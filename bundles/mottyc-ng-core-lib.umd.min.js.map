{"version":3,"sources":["../../../projects/ng-core-lib/src/lib/enums/AccountRoleCode.ts","../../../projects/ng-core-lib/src/lib/enums/AccountStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/AccountTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/BookingStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/DayOfWeekCode.ts","../../../projects/ng-core-lib/src/lib/enums/EntityTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/FeatureCode.ts","../../../projects/ng-core-lib/src/lib/enums/KayakTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/ResourceClassCode.ts","../../../projects/ng-core-lib/src/lib/enums/ResourceStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/ResourceTypeMask.ts","../../../projects/ng-core-lib/src/lib/enums/RowingBoatTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/TimeUnitCode.ts","../../../projects/ng-core-lib/src/lib/enums/UseTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/UserGenderCode.ts","../../../projects/ng-core-lib/src/lib/enums/UserStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/UserTypeCode.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ng-core-lib/src/utils/localStorage-util.ts","../../../projects/ng-core-lib/src/utils/rest-util.ts","../../../projects/ng-core-lib/src/config.ts","../../../projects/ng-core-lib/src/lib/services/adminBoatsService.ts","../../../projects/ng-core-lib/src/lib/services/adminKayaksService.ts","../../../projects/ng-core-lib/src/lib/services/adminResourcesService.ts","../../../projects/ng-core-lib/src/lib/services/healthCheckService.ts","../../../projects/ng-core-lib/src/lib/services/userBookingsService.ts","../../../projects/ng-core-lib/src/lib/services/userPlacementsService.ts","../../../projects/ng-core-lib/src/lib/services/usersService.ts","../../../projects/ng-core-lib/src/lib/services/userAccountsService.ts","../../../projects/ng-core-lib/src/lib/services/userService.ts","../../../projects/ng-core-lib/src/lib/services/sysAccountsService.ts","../../../projects/ng-core-lib/src/lib/services/sysUsersService.ts","../../../projects/ng-core-lib/src/lib/services/services.export.ts","../../../projects/ng-core-lib/src/core-lib.module.ts"],"names":["AccountRoleCode","AccountStatusCode","AccountTypeCode","BookingStatusCode","DayOfWeekCode","EntityTypeCode","FeatureCode","KayakTypeCode","ResourceClassCode","ResourceStatusCode","ResourceTypeMask","RowingBoatTypeCode","TimeUnitCode","UseTypeCode","UserGenderCode","UserStatusCode","UserTypeCode","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","tokenKey","setToken","token","localStorage","setItem","removeToken","removeItem","RestUtil","http","this","headers","HttpHeaders","set","prototype","download","fileName","url","params","_i","resourceUrl","buildUrl","apply","ext","forEach","p","arr","split","toLowerCase","downloadLink","get","responseType","subscribe","data","downloadURL","window","URL","createObjectURL","link","document","createElement","href","click","_this","observe","pipe","map","res","processResponse","catchError","handleError","post","body","put","delete","join","response","status","LocalStorageUtil.removeToken","Error","accessToken","LocalStorageUtil.setToken","code","message","Promise","reject","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","AdminBoatsService","config","rest","baseUrl","api","create","JSON","stringify","update","id","find","search","resourceClass","resourceType","forUseBy","sort","page","pageSize","Array","_a","AdminKayaksService","AdminResourcesService","HealthCheckService","health","UserBookingsService","userId","resourceId","UserPlacementsService","bookingId","UsersService","invite","reInvite","changeName","changeMobile","changeType","type","getByEmail","email","accountId","getUserToken","exp","UserAccountsService","UserService","login","refreshToken","verifyLoginKey","key","sendVerificationCode","resetPassword","changePassword","checkUnusedPassword","switchAccount","SysAccountsService","purge","reset","days","SysUsersService","changeStatus","changeDefaultAccount","setRoles","roles","mergeRoles","Services","CoreLibModule","forRoot","ngModule","providers","provide","useValue","imports","CommonModule","HttpClientModule","getItem"],"mappings":"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","sourcesContent":["/* \n   Account role code (represent role of user in the account) \n*/\nexport enum AccountRoleCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account administrator can perform all operations [1] \n    ADMIN = 1,\n \n    // Part of a club staff [2] \n    STAFF = 2,\n \n    // Club Member [3] \n    MEMBER = 3,\n \n    // Olympic team [4] \n    TEAM = 4,\n \n    // Para-olympic team [5] \n    PARA = 5,\n \n    // Club guest [6] \n    GUEST = 6,\n \n}","/* \n   Account status code \n*/\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account [1] \n    ACTIVE = 1,\n \n    // Suspended (non-active) account [2] \n    SUSPENDED = 2,\n \n    // Deleted account [3] \n    DELETED = 3,\n \n}","/* \n   Account type code \n*/\nexport enum AccountTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Demo account for Tests and Demos [1] \n    DEMO = 1,\n \n    // Trial account for pilots [2] \n    TRIAL = 2,\n \n    // Active account for customer [3] \n    CUSTOMER = 3,\n \n}","/* \n   Booking status code \n*/\nexport enum BookingStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Pending booking request [1] \n    PENDING = 1,\n \n    // Approved booking [2] \n    APPROVED = 2,\n \n    // Cancelled booking [3] \n    CANCELLED = 3,\n \n}","/* \n   Day of week code \n*/\nexport enum DayOfWeekCode {\n \n    // Sunday [0] \n    SUN = 0,\n \n    // Monday [1] \n    MON = 1,\n \n    // Tuesday [2] \n    TUE = 2,\n \n    // Wednesday [3] \n    WED = 3,\n \n    // Thursday [4] \n    THU = 4,\n \n    // Friday [5] \n    FRI = 5,\n \n    // Saturday [6] \n    SAT = 6,\n \n}","/* \n   Entity type code (represent entity type in the system) \n*/\nexport enum EntityTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account [1] \n    ACCOUNT = 1,\n \n    // User [2] \n    USER = 2,\n \n    // API Key [3] \n    API_KEY = 3,\n \n    // Audit Log [4] \n    AUDIT_LOG = 4,\n \n    // Booking [5] \n    BOOKING = 5,\n \n    // Feature [6] \n    FEATURE = 6,\n \n    // Features Group [7] \n    FEATURES_GROUP = 7,\n \n    // Incident [8] \n    INCIDENT = 8,\n \n    // Booking Placement [9] \n    PLACEMENT = 9,\n \n    // Club Resource [10] \n    RESOURCE = 10,\n \n}","/* \n   Feature codes \n*/\nexport enum FeatureCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Admin module [1] \n    MODULE_ADMIN = 1,\n \n    // System admin module [2] \n    MODULE_SYSADMIN = 2,\n \n}","/* \n   Kayak type code \n*/\nexport enum KayakTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Ocean Kayak [2048 + 1] \n    OCEAN = 2049,\n \n    // Double Ocean Kayak [2048 + 2] \n    OCEAN_X2 = 2050,\n \n    // SurfSki Kayak [2048 + 4096 + 1] \n    SURFSKI = 6145,\n \n    // Double SurfSki Kayak [2048 + 4096 + 2] \n    SURFSKI_X2 = 6146,\n \n    // Waves (short) kayak [2048 + 1 + 8192] \n    WAVES = 10241,\n \n}","/* \n   Resource class code (represent resource in the system) \n*/\nexport enum ResourceClassCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Rowing Boat [1024] \n    RBOAT = 1,\n \n    // Kayak [2048] \n    KAYAK = 2,\n \n}","/* \n   Resource status code \n*/\nexport enum ResourceStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Available [1] \n    AVAILABLE = 1,\n \n    // Non-available [2] \n    NONAVAILABLE = 2,\n \n}","/* \n   General Resource Type (Attributes bit mask) \n*/\nexport enum ResourceTypeMask {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Single [1] \n    P1 = 1,\n \n    // Double [2] \n    P2 = 2,\n \n    // Quad [4] \n    P4 = 4,\n \n    // Eight [8] \n    P8 = 8,\n \n    // Wide [16] \n    WIDE = 16,\n \n    // Sculling (2 oars) [32] \n    SCULL = 32,\n \n    // Need Cox [64] \n    COX = 64,\n \n    // Coastal (use in sea) [128] \n    COASTAL = 128,\n \n    // For competition [254] \n    COMP = 254,\n \n    // For para-olympic [512] \n    PARA = 512,\n \n    // Rowing Boat [1024] \n    RBOAT = 1024,\n \n    // Kayak [2048] \n    KAYAK = 2048,\n \n    // Surf Ski [4096] \n    SURFSKI = 4096,\n \n    // Waves Kayak [8192] \n    WAVES = 8192,\n \n}","/* \n   Rowing boat type code \n*/\nexport enum RowingBoatTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Sculling 1X [1024 + 1 + 32] \n    SCULL_1X = 1057,\n \n    // Sculling 1X Wide [1024 + 1 + 32 + 16] \n    SCULL_1X_WIDE = 1073,\n \n    // Sculling 1X Competition [1024 + 1 + 32 + 254] \n    SCULL_1X_COMP = 1311,\n \n    // Sculling 1X Para Olympic [1024 + 1 + 32 + 512] \n    SCULL_1X_PARA = 1569,\n \n    // Sculling 2X [1024 + 2 + 32] \n    SCULL_2X = 1058,\n \n    // Sculling 2X Wide [1024 + 2 + 32 + 16] \n    SCULL_2X_WIDE = 1074,\n \n    // Sculling 2X Competition [1024 + 2 + 32 + 254] \n    SCULL_2X_COMP = 1312,\n \n    // Sculling 2X Para Olympic [1024 + 2 + 32 + 512] \n    SCULL_2X_PARA = 1570,\n \n    // Sweeping 2- Coxless Pair [1024 + 2] \n    SWEEP_2_COXLESS = 1026,\n \n    // Coastal 2X [1024 + 2 + 32 + 128] \n    COASTAL_2X = 1186,\n \n    // Sculling 4X Quad [1024 + 4 + 32] \n    SCULL_4X = 1060,\n \n    // Sculling 4X Quad with cox [1024 + 4 + 32 + 64] \n    SCULL_4X_COX = 1124,\n \n    // Sweeping 4- Coxless Quad [1024 + 4] \n    SWEEP_4_COXLESS = 10283,\n \n    // Sculling 4X Competition [1024 + 4 + 32 + 254] \n    SCULL_4X_COMP = 1314,\n \n    // Sculling 4X Para Olympic [1024 + 4 + 32 + 512] \n    SCULL_4X_PARA = 1572,\n \n    // Coastal 4X with cox [1024 + 4 + 32 + 64 + 128] \n    COASTAL_4X_COX = 1252,\n \n    // Sweeping 8 - with cox [1024 + 8 + 64] \n    SWEEP_8_COX = 1096,\n \n    // Sculling 8 - with cox [1024 + 8 + 32 + 64] \n    SCULL_8X_COX = 1128,\n \n}","/* \n   Time unit interval \n*/\nexport enum TimeUnitCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Second interval [1] \n    SECOND = 1,\n \n    // Minute interval [2] \n    MINUTE = 2,\n \n    // Hour interval [3] \n    HOUR = 3,\n \n    // Day interval [4] \n    DAY = 4,\n \n    // Week interval [5] \n    WEEK = 5,\n \n    // Month interval [6] \n    MONTH = 6,\n \n}","/* \n   Resource Used by \n*/\nexport enum UseTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Used by club members [1] \n    MEMBER = 1,\n \n    // Used by club staff [2] \n    STAFF = 2,\n \n    // Used by team members [3] \n    TEAM = 3,\n \n    // Used by para-olympic team [4] \n    PARA = 4,\n \n}","/* \n   User gender code \n*/\nexport enum UserGenderCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Male [1] \n    MALE = 1,\n \n    // Female [2] \n    FEMALE = 2,\n \n}","/* \n   User status code \n*/\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [4] \n    BLOCKED = 3,\n \n    // Suspended user (about to be deleted) [8] \n    SUSPENDED = 4,\n \n}","/* \n   User type code \n*/\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // Account user - has access to specific accounts with role based access control [4] \n    USER = 4,\n \n    // Account service - to be used by other systems to perform actions using the API (can't login as a user to the portal)' [5]` \n    SERVICE = 5,\n \n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// Access token key in the local storage\nconst tokenKey = 'portalAccessToken';\nconst loginKey = 'portalLoginData';\n\nexport function getToken() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport function setToken(token) {\n  localStorage.setItem(tokenKey, token);\n}\n\nexport function removeToken() {\n  localStorage.removeItem(tokenKey);\n  localStorage.removeItem(loginKey);\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';  // replaces previous Http service\nimport { map, catchError } from 'rxjs/operators';\nimport * as LocalStorageUtil from './localStorage-util';\n\n/**\n * Utility class for all REST services with common functions\n */\n@Injectable()\nexport class RestUtil {\n\n  // Set headers\n  private headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  /**\n   * Constructor with injected authentication service\n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Download is HTTP GET action but the content is blob\n   */\n  download(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let ext = 'json';\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'format') {\n          ext = arr[1];\n        }\n      }\n    });\n    \n    const downloadLink = fileName + '.' + ext;\n\n    return this.http.get(resourceUrl, {responseType: 'blob'}).subscribe((data) => {\n      const downloadURL = window.URL.createObjectURL(data);\n      const link = document.createElement('a');\n      link.href = downloadURL;\n      link.download = downloadLink;\n      link.click();\n    });\n\n  }\n  \n  /**\n   * HTTP GET action\n   */\n  get(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .get(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError),\n      );\n  }\n\n  /**\n   * HTTP POST action\n   */\n  post(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .post(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP PUT action\n   */\n  put(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .put(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP DELETE action\n   */\n  delete(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .delete(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Construct URL with parameters\n   */\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  /**\n   * Process the response, extract and refresh access token and return the body\n   */\n  private processResponse(response: HttpResponse<any>) {\n\n    if (response.status === 401) {\n      LocalStorageUtil.removeToken();\n      throw new Error('Access denied, reset token: ' + response.status);\n    } else if (response.status > 400) {\n      throw new Error('HTTP status error: ' + response.status);\n    }\n\n    // Get access token from header and update authentication service\n\n    const accessToken = response.headers.get('X-ACCESS-TOKEN');\n\n    if ((accessToken !== null) && (accessToken.length > 0)) {\n      LocalStorageUtil.setToken(accessToken);\n    } \n    \n    if (response.body && response.body.code && response.body.code !== 0) {\n      throw { code: response.body.code, message: response.body.error };\n    }\n    \n    return response.body;\n  }\n\n  /**\n   * Error handling\n   */\n  private handleError(error: any): Promise<any> {\n    if (error.code) {\n      return Promise.reject(error);\n    }\n    return Promise.reject(error.message || error);\n  }\n}\n","export class CoreConfig {\n    api: string;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UseTypeCode } from '../enums/UseTypeCode';\nimport { Resource } from '../entities/Resource';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\n\n\n/**\n * Services for managing boats resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminBoatsService {\n\n  // URL to web api\n  private baseUrl = '/admin/boats';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new boat resource\n   * @Return: EntityResponse<Resource>\n   */\n  create(body?: Resource) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update boat resource\n   * @Return: EntityResponse<Resource>\n   */\n  update(body?: Resource) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete boat resource\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single boat by id\n   * @Return: EntityResponse<Resource>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find boats by filters\n   * @Return: QueryResponse<Resource>\n   */\n  find(search?: string, resourceClass?: ResourceClassCode, resourceType?: ResourceTypeMask, status?: ResourceStatusCode, forUseBy?: UseTypeCode, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (resourceClass != null) { params.push(`resourceClass=${resourceClass}`); }\n    if (resourceType != null) { params.push(`resourceType=${resourceType}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\nimport { UseTypeCode } from '../enums/UseTypeCode';\nimport { Resource } from '../entities/Resource';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\n\n\n/**\n * Services for managing kayak resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminKayaksService {\n\n  // URL to web api\n  private baseUrl = '/admin/kayaks';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new kayak resource\n   * @Return: EntityResponse<Resource>\n   */\n  create(body?: Resource) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update kayak resource\n   * @Return: EntityResponse<Resource>\n   */\n  update(body?: Resource) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete kayak resource\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single kayak by id\n   * @Return: EntityResponse<Resource>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find kayaks by filters\n   * @Return: QueryResponse<Resource>\n   */\n  find(search?: string, resourceClass?: ResourceClassCode, resourceType?: ResourceTypeMask, status?: ResourceStatusCode, forUseBy?: UseTypeCode, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (resourceClass != null) { params.push(`resourceClass=${resourceClass}`); }\n    if (resourceType != null) { params.push(`resourceType=${resourceType}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\nimport { UseTypeCode } from '../enums/UseTypeCode';\nimport { Resource } from '../entities/Resource';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\n\n\n/**\n * Services for managing club resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminResourcesService {\n\n  // URL to web api\n  private baseUrl = '/admin/resources';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new resource\n   * @Return: EntityResponse<Resource>\n   */\n  create(body?: Resource) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update resource\n   * @Return: EntityResponse<Resource>\n   */\n  update(body?: Resource) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete resource\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single resource by id\n   * @Return: EntityResponse<Resource>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find resources by filters\n   * @Return: QueryResponse<Resource>\n   */\n  find(search?: string, resourceClass?: ResourceClassCode, resourceType?: ResourceTypeMask, status?: ResourceStatusCode, forUseBy?: UseTypeCode, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (resourceClass != null) { params.push(`resourceClass=${resourceClass}`); }\n    if (resourceType != null) { params.push(`resourceType=${resourceType}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * Health check service, no X-API-KEY or X-ACCESS-TOKEN are required \n */\n@Injectable()\nexport class HealthCheckService {\n\n  // URL to web api\n  private baseUrl = '/health';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Health check to test service availability\n   * @Return: ActionResponse - with version info\n   */\n  health() {\n    return this.rest.get(`${this.baseUrl}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Booking } from '../entities/Booking';\n\n\n/**\n * Services for managing kayak resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UserBookingsService {\n\n  // URL to web api\n  private baseUrl = '/user/bookings';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new booking\n   * @Return: EntityResponse<Booking>\n   */\n  create(body?: Booking) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update booking\n   * @Return: EntityResponse<Booking>\n   */\n  update(body?: Booking) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete booking\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single booking by id\n   * @Return: EntityResponse<Booking>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find bookings by filters\n   * @Return: QueryResponse<Booking>\n   */\n  find(userId?: string, resourceId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Placement } from '../entities/Placement';\nimport { BookingStatusCode } from '../enums/BookingStatusCode';\n\n\n/**\n * Services for managing user placements (approved bookings)\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UserPlacementsService {\n\n  // URL to web api\n  private baseUrl = '/user/placements';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new placement\n   * @Return: EntityResponse<Placement>\n   */\n  create(body?: Placement) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update placement\n   * @Return: EntityResponse<Placement>\n   */\n  update(body?: Placement) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete placement\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single placement by id\n   * @Return: EntityResponse<Placement>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find placements by filters\n   * @Return: QueryResponse<Placement>\n   */\n  find(userId?: string, resourceId?: string, bookingId?: string, status?: BookingStatusCode, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (bookingId != null) { params.push(`bookingId=${bookingId}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UserInvitation } from '../common/UserInvitation';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n\n/**\n * List of all user related actions for account administrator only \n */\n@Injectable()\nexport class UsersService {\n\n  // URL to web api\n  private baseUrl = '/admin/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Send invitation to a new user for the current account\n   * @Return: ActionResponse\n   */\n  invite(body?: UserInvitation) {\n    return this.rest.post(`${this.baseUrl}/invite`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Resend invitation to an existing user for the current account\n   * @Return: ActionResponse\n   */\n  reInvite(id?: string) {\n    return this.rest.post(`${this.baseUrl}/re-invite/${id}`, null);\n  }\n\n  /**\n   * Update user\n   * @Return: EntityResponse<User>\n   */\n  update(id?: string, body?: User) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user name\n   * @Return: EntityResponse<User>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user mobile\n   * @Return: EntityResponse<User>\n   */\n  changeMobile(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id?: string, type?: UserTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, null);\n  }\n\n  /**\n   * Delete user from the system\n   * The user will be removed from the account, if no accounts associated with the user, it will be deleted\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by id\n   * @Return: EntityResponse<User>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by email\n   * @Return: EntityResponse<User>\n   */\n  getByEmail(email?: string) {\n    return this.rest.get(`${this.baseUrl}/byEmail/${email}`);\n  }\n\n  /**\n   * Find list of users and filter the list\n   * System user will see all users, Account system will see all users of the account, registered user will get an error.\n   * @Return: QueryResponse<User>\n   */\n  find(accountId?: string, search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get access token for user\n   * @Return: ActionResponse\n   */\n  getUserToken(id?: string, exp?: number) {\n    return this.rest.get(`${this.baseUrl}/${id}/token/${exp}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n\n/**\n * List of account related actions \n */\n@Injectable()\nexport class UserAccountsService {\n\n  // URL to web api\n  private baseUrl = '/user/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { LoginParams } from '../common/LoginParams';\nimport { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\nimport { TokenRequest } from '../messages/TokenRequest';\n\n\n/**\n * Services for user registration and login \n */\n@Injectable()\nexport class UserService {\n\n  // URL to web api\n  private baseUrl = '/user/user';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Login to the system with user email and password\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: EntityResponse<LoginData>\n   */\n  login(body?: LoginParams) {\n    return this.rest.post(`${this.baseUrl}/login`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<LoginData>\n   */\n  refreshToken() {\n    return this.rest.post(`${this.baseUrl}/refresh-token`, null);\n  }\n\n  /**\n   * Verify user by temporary login key\n   * @Return: EntityResponse<User>\n   */\n  verifyLoginKey(key?: string) {\n    const params = new Array();\t\t\n    if (key != null) { params.push(`key=${key}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/login/verify`, ...params);\n  }\n\n  /**\n   * Send verification code by email\n   * @Return: ActionResponse\n   */\n  sendVerificationCode(body?: string) {\n    return this.rest.post(`${this.baseUrl}/verify`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Validate verification code and reset password\n   * @Return: ActionResponse\n   */\n  resetPassword(code?: string) {\n    return this.rest.post(`${this.baseUrl}/reset-password`, typeof code === 'object' ? JSON.stringify(code) : code);\n  }\n\n  /**\n   * Change password\n   * @Return: ActionResponse\n   */\n  changePassword(body?: ChangePasswordRequest) {\n    return this.rest.post(`${this.baseUrl}/change-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Check if password was used before (according to password policy)\n   * @Return: ActionResponse\n   */\n  checkUnusedPassword(body?: string) {\n    return this.rest.post(`${this.baseUrl}/check-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user name\n   * @Return: ActionResponse\n   */\n  changeName(body?: string) {\n    return this.rest.put(`${this.baseUrl}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user mobile\n   * @Return: ActionResponse\n   */\n  changeMobile(body?: string) {\n    return this.rest.put(`${this.baseUrl}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<UserAccountInfo>\n   */\n  switchAccount(body?: TokenRequest) {\n    return this.rest.post(`${this.baseUrl}/switch-account`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { Account } from '../entities/Account';\n\n\n/**\n * List of account related actions for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysAccountsService {\n\n  // URL to web api\n  private baseUrl = '/sys/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   * @Return: EntityResponse<Account>\n   */\n  create(body?: Account) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account in the system\n   * @Return: EntityResponse<Account>\n   */\n  update(body?: Account) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete account from the system\n   * The account is moved to DELETED mode and will be deleted after 90 days\n   * Only account marked as SUSPENDED can be deleted\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Delete account immediately without account status restrictions\n   * @Return: ActionResponse\n   */\n  purge(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/purge/${id}`);\n  }\n\n  /**\n   * Reset account - remove all operational data older than the retention time in days (events, status, log ...) but leave configuration data\n   * @Return: ActionResponse\n   */\n  reset(id?: string, days?: number) {\n    return this.rest.delete(`${this.baseUrl}/reset/${id}/days/${days}`);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UserRegistration } from '../common/UserRegistration';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n\n/**\n * List of all user related actions for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysUsersService {\n\n  // URL to web api\n  private baseUrl = '/sys/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create a new user for the current account\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: ActionResponse\n   */\n  create(body?: UserRegistration) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update user\n   * @Return: EntityResponse<User>\n   */\n  update(id?: string, body?: User) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user name\n   * @Return: EntityResponse<User>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user mobile\n   * @Return: EntityResponse<User>\n   */\n  changeMobile(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id?: string, type?: UserTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, null);\n  }\n\n  /**\n   * Change user status\n   * @Return: EntityResponse<User>\n   */\n  changeStatus(id?: string, status?: UserStatusCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/status/${status}`, null);\n  }\n\n  /**\n   * Change user default account\n   * @Return: EntityResponse<User>\n   */\n  changeDefaultAccount(id?: string, accountId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/defaultAccount/${accountId}`, null);\n  }\n\n  /**\n   * Reset password for user, generate one-time temporary password\n   * @Return: ActionResponse\n   */\n  resetPassword(id?: string) {\n    return this.rest.post(`${this.baseUrl}/${id}/reset-password`, null);\n  }\n\n  /**\n   * Set user roles in his accounts (override previous roles)\n   * @Return: EntityResponse<User>\n   */\n  setRoles(id?: string, roles?: AccountRoleCode[]) {\n    return this.rest.post(`${this.baseUrl}/${id}/roles/`, typeof roles === 'object' ? JSON.stringify(roles) : roles);\n  }\n\n  /**\n   * Update user roles in his accounts (merge with existing roles)\n   * @Return: EntityResponse<User>\n   */\n  mergeRoles(id?: string, roles?: AccountRoleCode[]) {\n    return this.rest.put(`${this.baseUrl}/${id}/roles/`, typeof roles === 'object' ? JSON.stringify(roles) : roles);\n  }\n\n  /**\n   * Delete user from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by Id\n   * @Return: EntityResponse<User>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of users by filter\n   * @Return: QueryResponse<User>\n   */\n  find(accountId?: string, search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { AdminBoatsService } from './adminBoatsService';\nimport { AdminKayaksService } from './adminKayaksService';\nimport { AdminResourcesService } from './adminResourcesService';\nimport { UserBookingsService } from './userBookingsService';\nimport { UserPlacementsService } from './userPlacementsService';\nimport { UsersService } from './usersService';\nimport { UserAccountsService } from './userAccountsService';\nimport { UserService } from './userService';\nimport { HealthCheckService } from './healthCheckService';\nimport { SysAccountsService } from './sysAccountsService';\nimport { SysUsersService } from './sysUsersService';\n\nexport const Services = [\n    AdminBoatsService,\n    AdminKayaksService,\n    AdminResourcesService,\n    UserBookingsService,\n    UserPlacementsService,\n    UsersService,\n    UserAccountsService,\n    UserService,\n    HealthCheckService,\n    SysAccountsService,\n    SysUsersService,\n    \n]","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Services } from './lib/services/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CoreConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class CoreLibModule {\n  static forRoot(config: CoreConfig): ModuleWithProviders<CoreLibModule> {\n    // console.log(config);\n    return {\n      ngModule: CoreLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n"]}