{"version":3,"sources":["../../../projects/ng-core-lib/src/lib/common/AbsoluteTimeFrame.ts","../../../projects/ng-core-lib/src/lib/common/AccountRole.ts","../../../projects/ng-core-lib/src/lib/common/AccountSettings.ts","../../../projects/ng-core-lib/src/lib/common/CountDataPoint.ts","../../../projects/ng-core-lib/src/lib/common/LoginData.ts","../../../projects/ng-core-lib/src/lib/common/LoginParams.ts","../../../projects/ng-core-lib/src/lib/common/MemberRegistration.ts","../../../projects/ng-core-lib/src/lib/common/RecurrentActivity.ts","../../../projects/ng-core-lib/src/lib/common/RecurrentTimeFrame.ts","../../../projects/ng-core-lib/src/lib/common/StringIntValue.ts","../../../projects/ng-core-lib/src/lib/common/StringKeyValue.ts","../../../projects/ng-core-lib/src/lib/common/TimeFrame.ts","../../../projects/ng-core-lib/src/lib/common/UserAccountInfo.ts","../../../projects/ng-core-lib/src/lib/common/UserInvitation.ts","../../../projects/ng-core-lib/src/lib/common/UserRegistration.ts","../../../projects/ng-core-lib/src/lib/common/WeightRange.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ng-core-lib/src/lib/enums/AccountRoleCode.ts","../../../projects/ng-core-lib/src/lib/enums/AccountStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/AccountTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/ActivityStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/BookingStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/DayOfWeekCode.ts","../../../projects/ng-core-lib/src/lib/enums/EntityTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/FeatureCode.ts","../../../projects/ng-core-lib/src/lib/enums/KayakTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/MemberStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/NotificationTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/PlacementStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/ResourceClassCode.ts","../../../projects/ng-core-lib/src/lib/enums/ResourceStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/ResourceTypeMask.ts","../../../projects/ng-core-lib/src/lib/enums/RowingBoatTypeCode.ts","../../../projects/ng-core-lib/src/lib/enums/TimeUnitCode.ts","../../../projects/ng-core-lib/src/lib/enums/UserGenderCode.ts","../../../projects/ng-core-lib/src/lib/enums/UserStatusCode.ts","../../../projects/ng-core-lib/src/lib/enums/UserTypeCode.ts","../../../projects/ng-core-lib/src/lib/entities/BaseEntity.ts","../../../projects/ng-core-lib/src/lib/entities/Account.ts","../../../projects/ng-core-lib/src/lib/entities/Activity.ts","../../../projects/ng-core-lib/src/lib/entities/ActivityBookingGroup.ts","../../../projects/ng-core-lib/src/lib/entities/Actual.ts","../../../projects/ng-core-lib/src/lib/entities/ApiKey.ts","../../../projects/ng-core-lib/src/lib/entities/AuditLog.ts","../../../projects/ng-core-lib/src/lib/entities/Booking.ts","../../../projects/ng-core-lib/src/lib/entities/BookingGroup.ts","../../../projects/ng-core-lib/src/lib/entities/BookingRequest.ts","../../../projects/ng-core-lib/src/lib/entities/Feature.ts","../../../projects/ng-core-lib/src/lib/entities/FeaturesGroup.ts","../../../projects/ng-core-lib/src/lib/entities/Incident.ts","../../../projects/ng-core-lib/src/lib/entities/Member.ts","../../../projects/ng-core-lib/src/lib/entities/MemberUser.ts","../../../projects/ng-core-lib/src/lib/entities/Membership.ts","../../../projects/ng-core-lib/src/lib/entities/Notification.ts","../../../projects/ng-core-lib/src/lib/entities/Placement.ts","../../../projects/ng-core-lib/src/lib/entities/Planing.ts","../../../projects/ng-core-lib/src/lib/entities/Registration.ts","../../../projects/ng-core-lib/src/lib/entities/Resource.ts","../../../projects/ng-core-lib/src/lib/entities/Usage.ts","../../../projects/ng-core-lib/src/lib/entities/User.ts","../../../projects/ng-core-lib/src/lib/entities/Verification.ts","../../../projects/ng-core-lib/src/lib/messages/AccountIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/ActionResponse.ts","../../../projects/ng-core-lib/src/lib/messages/ActivityIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminAccountSettingsUpdateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminActivityBulkCreateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminActivityDefaultCreateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminActivityDefaultDeleteRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminActivityFindFreeResourcesRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminActivityFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminActivityPlaningRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminBookingHistoryRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminCreateActivityRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminCreateResourceRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminDailyPlaningExportRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminDailyPlaningRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminDailyRegistrationRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminDailyResourcesRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminFindFreeResourcesRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminMembersFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminPlaningAssignResourceRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminPlaningDeleteActivityRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminPlaningDeleteBookingRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminPlaningMergeBookingsRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminPlaningSplitBookingRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminPlaningUnAssignResourceRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminReportAbsenceRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminReportIncidentRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminResourceBulkCreateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminResourceFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminResourceHistoryRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminUpdateActivityRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminUpdateRegistrationRequest.ts","../../../projects/ng-core-lib/src/lib/messages/AdminUpdateResourceRequest.ts","../../../projects/ng-core-lib/src/lib/messages/BookingIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/BookingRequestIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/ChangePasswordRequest.ts","../../../projects/ng-core-lib/src/lib/messages/DistributionRequest.ts","../../../projects/ng-core-lib/src/lib/messages/EmptyRequest.ts","../../../projects/ng-core-lib/src/lib/messages/EmptyResponse.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponse.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfAccount.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfActivity.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfActivityBookingGroup.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfActual.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfBooking.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfBookingGroup.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfBookingRequest.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponse.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfCountDataPoint.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfMembership.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfNotification.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfPlacement.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfResource.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfStringIntValue.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfStringKeyValue.ts","../../../projects/ng-core-lib/src/lib/messages/EntitiesResponseOfUsage.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfAccount.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfAccountSettings.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfActivity.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfBooking.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfBookingRequest.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfLoginData.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfMember.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfMemberUser.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfPlacement.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfPlaning.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfResource.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfUser.ts","../../../projects/ng-core-lib/src/lib/messages/EntityResponseOfUserAccountInfo.ts","../../../projects/ng-core-lib/src/lib/messages/FindNotificationsRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MemberIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MembersBulkImportRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MembersCountOvertimeRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MembersFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MembersServiceInviteRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MembersServiceUpdateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MembershipIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MembershipsRequest.ts","../../../projects/ng-core-lib/src/lib/messages/MonthlyCountRequest.ts","../../../projects/ng-core-lib/src/lib/messages/NotificationIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/NotifyActivityUsersRequest.ts","../../../projects/ng-core-lib/src/lib/messages/NotifyAllMembersRequest.ts","../../../projects/ng-core-lib/src/lib/messages/NotifyBookingUsersRequest.ts","../../../projects/ng-core-lib/src/lib/messages/NotifyDailyUsersRequest.ts","../../../projects/ng-core-lib/src/lib/messages/NotifyUserRequest.ts","../../../projects/ng-core-lib/src/lib/messages/PeriodCountRequest.ts","../../../projects/ng-core-lib/src/lib/messages/PlacementIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponse.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfAccount.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfActivity.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfBooking.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfBookingRequest.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfMemberUser.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfMembership.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfNotification.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfPlacement.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfResource.ts","../../../projects/ng-core-lib/src/lib/messages/QueryResponseOfUser.ts","../../../projects/ng-core-lib/src/lib/messages/ResourceIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/ResourcesCountOvertimeRequest.ts","../../../projects/ng-core-lib/src/lib/messages/StreamResponse.ts","../../../projects/ng-core-lib/src/lib/messages/SysAdminAccountCreateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/SysAdminAccountResetRequest.ts","../../../projects/ng-core-lib/src/lib/messages/SysAdminAccountUpdateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/SysAdminAccountsFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/TokenRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserAccountsFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserBookingFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserBookingGroupRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserBookingHistoryRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserBookingRequestFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserByEmailRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserCreateBookingRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserCreateBookingRequestRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserCreatePlacementRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserIdRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserIdsRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserPlacementFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceChangeMobileRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceChangeNameRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceChangePasswordRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceCheckPasswordRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceLoginRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceReadNotificationRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceResetPasswordRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceSendVerificationRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceSwitchAccountRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceUpdateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserServiceVerifyLoginRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserTokenRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserUpdateBookingRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserUpdateBookingRequestRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UserUpdatePlacementRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceChangeDefaultAccountRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceChangeMobileRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceChangeNameRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceChangeRoleRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceChangeStatusRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceChangeTypeRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceCreateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceExportRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceFindRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceInviteRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceSetRolesRequest.ts","../../../projects/ng-core-lib/src/lib/messages/UsersServiceUpdateRequest.ts","../../../projects/ng-core-lib/src/lib/messages/WebSocketMessageHeader.ts","../../../projects/ng-core-lib/src/utils/localStorage-util.ts","../../../projects/ng-core-lib/src/utils/rest-util.ts","../../../projects/ng-core-lib/src/config.ts","../../../projects/ng-core-lib/src/lib/services/adminAccountService.ts","../../../projects/ng-core-lib/src/lib/services/adminActivitiesService.ts","../../../projects/ng-core-lib/src/lib/services/adminMembersService.ts","../../../projects/ng-core-lib/src/lib/services/adminNotificationsService.ts","../../../projects/ng-core-lib/src/lib/services/adminPlaningService.ts","../../../projects/ng-core-lib/src/lib/services/adminReportsService.ts","../../../projects/ng-core-lib/src/lib/services/adminResourcesService.ts","../../../projects/ng-core-lib/src/lib/services/healthCheckService.ts","../../../projects/ng-core-lib/src/lib/services/sysAccountsService.ts","../../../projects/ng-core-lib/src/lib/services/sysUsersService.ts","../../../projects/ng-core-lib/src/lib/services/usrActivitiesService.ts","../../../projects/ng-core-lib/src/lib/services/userBookingsService.ts","../../../projects/ng-core-lib/src/lib/services/userPlacementsService.ts","../../../projects/ng-core-lib/src/lib/services/userAccountsService.ts","../../../projects/ng-core-lib/src/lib/services/usrMembersService.ts","../../../projects/ng-core-lib/src/lib/services/userService.ts","../../../projects/ng-core-lib/src/lib/services/services.export.ts","../../../projects/ng-core-lib/src/core-lib.module.ts"],"names":["name","startTime","endTime","active","this","accountId","role","defaultActivities","retentionDays","timestamp","label","value","accessToken","userId","accountRole","memberStatus","userName","userEmail","userType","userStatus","changePassword","messages","email","password","mobile","gender","tempPassword","verifyByEmail","dayOfWeek","resourceFilter","roleFilter","limit","key","from","to","account","loginData","features","type","description","min","max","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","error","__spread","arguments","length","concat","AccountRoleCode","AccountStatusCode","AccountTypeCode","ActivityStatusCode","BookingStatusCode","DayOfWeekCode","EntityTypeCode","FeatureCode","KayakTypeCode","MemberStatusCode","NotificationTypeCode","PlacementStatusCode","ResourceClassCode","ResourceStatusCode","ResourceTypeMask","RowingBoatTypeCode","TimeUnitCode","UserGenderCode","UserStatusCode","UserTypeCode","id","createdOn","updatedOn","Account","_super","BaseEntity","Activity","activity","bookings","Actual","ApiKey","AuditLog","Booking","timeGroup","BookingRequest","Feature","FeaturesGroup","Incident","Member","MemberUser","Membership","Notification","Placement","Planing","Registration","Resource","Usage","User","Verification","code","data","body","year","month","day","resType","weight","forUseBy","total","resourceType","resourceId","sort","lang","resFilter","userFilter","filter","missingOnly","search","status","page","pageSize","source","target","resourceClass","oldPassword","newPassword","EntitiesResponseOfAccount","EntitiesResponse","EntitiesResponseOfActivity","EntitiesResponseOfActivityBookingGroup","EntitiesResponseOfActual","EntitiesResponseOfBooking","EntitiesResponseOfBookingGroup","EntitiesResponseOfBookingRequest","EntitiesResponseOfCountDataPoint","EntityResponse","EntitiesResponseOfMembership","EntitiesResponseOfNotification","EntitiesResponseOfPlacement","EntitiesResponseOfResource","EntitiesResponseOfStringIntValue","EntitiesResponseOfStringKeyValue","EntitiesResponseOfUsage","EntityResponseOfAccount","EntityResponseOfAccountSettings","EntityResponseOfActivity","EntityResponseOfBooking","EntityResponseOfBookingRequest","EntityResponseOfLoginData","EntityResponseOfMember","EntityResponseOfMemberUser","EntityResponseOfPlacement","EntityResponseOfPlaning","EntityResponseOfResource","EntityResponseOfUser","EntityResponseOfUserAccountInfo","activityId","bookingId","dayId","pages","queryDef","docType","QueryResponseOfAccount","QueryResponse","QueryResponseOfActivity","QueryResponseOfBooking","QueryResponseOfBookingRequest","QueryResponseOfMemberUser","QueryResponseOfMembership","QueryResponseOfNotification","QueryResponseOfPlacement","QueryResponseOfResource","QueryResponseOfUser","content","days","groupBy","exp","format","fields","roles","opcode","version","messageId","correlationId","sessionId","op","ver","cid","sid","tokenKey","setToken","token","localStorage","setItem","removeToken","removeItem","RestUtil","http","headers","HttpHeaders","set","download","fileName","url","params","_i","resourceUrl","buildUrl","apply","ext","forEach","arr","split","toLowerCase","downloadLink","get","responseType","subscribe","downloadURL","window","URL","createObjectURL","link","document","createElement","href","click","_this","observe","pipe","map","res","processResponse","catchError","handleError","post","put","delete","join","response","LocalStorageUtil.removeToken","Error","LocalStorageUtil.setToken","message","Promise","reject","i0__namespace","ɵɵinject","i1__namespace","HttpClient","factory","ɵfac","Injectable","AdminAccountService","config","rest","baseUrl","api","getSettings","updateSettings","JSON","stringify","Inject","AdminActivitiesService","update","prev","find","_a","findFreeResources","createBulk","createDefault","clearDefault","AdminMembersService","invite","reInvite","resetPassword","getUserByEmail","getUserMemberships","bulkImport","findMemberHistory","AdminNotificationsService","notifyUser","notifyBookingUsers","notifyActivityUsers","notifyDailyUsers","notifyAllMembers","AdminPlaningService","getDailyPlaning","getDailyResources","exportDailyPlaning","assignResource","unAssignResource","mergeBookings","splitBookings","deleteBooking","deleteActivity","getDailyRegistration","updateRegistration","reportAbsence","reportIncident","AdminReportsService","getMonthlyCount","getPeriodCount","getDayOfWeekDistribution","getResourceTypeDistribution","AdminResourcesService","bulkCreate","findResourceHistory","HealthCheckService","health","SysAccountsService","purge","reset","SysUsersService","changeName","changeMobile","changeType","changeStatus","changeDefaultAccount","UsrActivitiesService","findAllResources","UserBookingsService","updateLog","removeMe","getExt","history","groups","activities","UserPlacementsService","UserAccountsService","getMemberships","deleteMemberships","UsrMembersService","getMy","UserService","login","refreshToken","verifyLoginKey","sendVerificationCode","checkUnusedPassword","getAccounts","switchAccount","switchNext","getProfile","setProfile","getVersion","findNotifications","readNotification","deleteNotification","Services","CoreLibModule","forRoot","ngModule","providers","provide","useValue","imports","CommonModule","HttpClientModule","NgModule","getItem"],"mappings":"s1BA6BI,SAAYA,EAAeC,EAAoBC,EAAkBC,GAC7DC,KAAKJ,KAAOA,EACZI,KAAKH,UAAYA,EACjBG,KAAKF,QAAUA,EACfE,KAAKD,OAASA,KCpBlB,SAAYE,EAAoBC,GAC5BF,KAAKC,UAAYA,EACjBD,KAAKE,KAAOA,KCFhB,SAAYC,EAAyCC,GACjDJ,KAAKG,kBAAoBA,EACzBH,KAAKI,cAAgBA,KCAzB,SAAYC,EAAoBC,EAAgBC,GAC5CP,KAAKK,UAAYA,EACjBL,KAAKM,MAAQA,EACbN,KAAKO,MAAQA,KCyBjB,SAAYC,EAAsBC,EAAiBR,EAAoBS,EAA+BC,EAAiCC,EAAmBC,EAAoBC,EAAyBC,EAA6BC,EAA0BC,GAC1PjB,KAAKQ,YAAcA,EACnBR,KAAKS,OAASA,EACdT,KAAKC,UAAYA,EACjBD,KAAKU,YAAcA,EACnBV,KAAKW,aAAeA,EACpBX,KAAKY,SAAWA,EAChBZ,KAAKa,UAAYA,EACjBb,KAAKc,SAAWA,EAChBd,KAAKe,WAAaA,EAClBf,KAAKgB,eAAiBA,EACtBhB,KAAKiB,SAAWA,KCvCpB,SAAYC,EAAgBC,EAAmBX,GAC3CR,KAAKkB,MAAQA,EACblB,KAAKmB,SAAWA,EAChBnB,KAAKQ,YAAcA,KCiBvB,SAAYZ,EAAesB,EAAgBE,EAAiBC,EAAyBpB,EAAoBS,EAA+BY,EAAuBN,EAA0BO,GACrLvB,KAAKJ,KAAOA,EACZI,KAAKkB,MAAQA,EACblB,KAAKoB,OAASA,EACdpB,KAAKqB,OAASA,EACdrB,KAAKC,UAAYA,EACjBD,KAAKU,YAAcA,EACnBV,KAAKsB,aAAeA,EACpBtB,KAAKgB,eAAiBA,EACtBhB,KAAKuB,cAAgBA,KCdzB,SAAYC,EAA2B3B,EAAoBC,EAAkBF,EAAe6B,EAAqCC,EAAgCC,GAC7J3B,KAAKwB,UAAYA,EACjBxB,KAAKH,UAAYA,EACjBG,KAAKF,QAAUA,EACfE,KAAKJ,KAAOA,EACZI,KAAKyB,eAAiBA,EACtBzB,KAAK0B,WAAaA,EAClB1B,KAAK2B,MAAQA,KClBjB,SAAYH,EAA2B3B,EAAoBC,EAAkBF,GACzEI,KAAKwB,UAAYA,EACjBxB,KAAKH,UAAYA,EACjBG,KAAKF,QAAUA,EACfE,KAAKJ,KAAOA,KCXhB,SAAYgC,EAAcrB,GACtBP,KAAK4B,IAAMA,EACX5B,KAAKO,MAAQA,KCFjB,SAAYqB,EAAcrB,GACtBP,KAAK4B,IAAMA,EACX5B,KAAKO,MAAQA,KCFjB,SAAYsB,EAAeC,GACvB9B,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,KCId,SAAYC,EAAmBC,EAAuBC,GAClDjC,KAAK+B,QAAUA,EACf/B,KAAKgC,UAAYA,EACjBhC,KAAKiC,SAAWA,KCRpB,SAAYf,EAAgBhB,GACxBF,KAAKkB,MAAQA,EACblB,KAAKE,KAAOA,KCuBhB,SAAYN,EAAesB,EAAgBE,EAAiBnB,EAAoBS,EAA+BwB,EAAqBZ,EAAuBN,EAA0BO,EAAyBY,GAC1MnC,KAAKJ,KAAOA,EACZI,KAAKkB,MAAQA,EACblB,KAAKoB,OAASA,EACdpB,KAAKC,UAAYA,EACjBD,KAAKU,YAAcA,EACnBV,KAAKkC,KAAOA,EACZlC,KAAKsB,aAAeA,EACpBtB,KAAKgB,eAAiBA,EACtBhB,KAAKuB,cAAgBA,EACrBvB,KAAKmC,YAAcA,KCpCvB,SAAYC,EAAcC,GACtBrC,KAAKoC,IAAMA,EACXpC,KAAKqC,IAAMA,GCEfC,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,MAC3EN,EAAGC,aAGZS,EAAUV,EAAGC,GACzB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIU,UAAU,uBAAyBC,OAAOX,GAAK,iCAE7D,SAASY,IAAOpD,KAAKqD,YAAcd,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMY,EAAGN,UAAYN,EAAEM,UAAW,IAAIM,GA+EtDX,OAAOa,gBAwBpBC,EAAOC,EAAGC,GACtB,IAAIC,EAAsB,mBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IAAmBK,EAAYC,EAA3BC,EAAIL,EAAEV,KAAKQ,GAAOQ,EAAK,GAC3B,IACI,WAAc,IAANP,GAAgBA,KAAM,MAAQI,EAAIE,EAAEE,QAAQC,MAAMF,EAAGG,KAAKN,EAAEtD,OAExE,MAAO6D,GAASN,EAAI,CAAEM,MAAOA,WAEzB,IACQP,IAAMA,EAAEK,OAASR,EAAIK,EAAU,SAAIL,EAAEV,KAAKe,WAExC,GAAID,EAAG,MAAMA,EAAEM,OAE7B,OAAOJ,WAIKK,IACZ,IAAK,IAAIL,EAAK,GAAID,EAAI,EAAGA,EAAIO,UAAUC,OAAQR,IAC3CC,EAAKA,EAAGQ,OAAOjB,EAAOe,UAAUP,KACpC,OAAOC,EAqDcvB,OAAOa,WC1MpBmB,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ECAAC,ICYR,SAAYC,EAAaC,EAAoBC,GACzC/F,KAAK6F,GAAKA,EACV7F,KAAK8F,UAAYA,EACjB9F,KAAK+F,UAAYA,iBCRzB,SAAAC,0DAA6B/C,EAAA+C,EAAAC,MAAAC,iBCD7B,SAAAC,0DAA8BlD,EAAAkD,EAAAF,MAAAC,KCM1B,SAAYE,EAAqBC,GAC7BrG,KAAKoG,SAAWA,EAChBpG,KAAKqG,SAAWA,iBCXxB,SAAAC,0DAA4BrD,EAAAqD,EAAAL,MAAAC,iBCI5B,SAAAK,0DAA4BtD,EAAAsD,EAAAN,MAAAC,kBCF5B,SAAAM,0DAA8BvD,EAAAuD,EAAAP,MAAAC,kBCC9B,SAAAO,0DAA6BxD,EAAAwD,EAAAR,MAAAC,MCKzB,SAAYQ,EAAoBL,GAC5BrG,KAAK0G,UAAYA,EACjB1G,KAAKqG,SAAWA,kBCRxB,SAAAM,0DAAoC1D,EAAA0D,EAAAV,MAAAC,kBCDpC,SAAAU,0DAA6B3D,EAAA2D,EAAAX,MAAAC,kBCA7B,SAAAW,0DAAmC5D,EAAA4D,EAAAZ,MAAAC,kBCDnC,SAAAY,0DAA8B7D,EAAA6D,EAAAb,MAAAC,kBCE9B,SAAAa,0DAA4B9D,EAAA8D,EAAAd,MAAAC,kBCC5B,SAAAc,0DAAgC/D,EAAA+D,EAAAf,MAAAC,kBCDhC,SAAAe,0DAAgChE,EAAAgE,EAAAhB,MAAAC,kBCAhC,SAAAgB,0DAAkCjE,EAAAiE,EAAAjB,MAAAC,kBCClC,SAAAiB,0DAA+BlE,EAAAkE,EAAAlB,MAAAC,kBCD/B,SAAAkB,0DAA6BnE,EAAAmE,EAAAnB,MAAAC,kBCD7B,SAAAmB,0DAAkCpE,EAAAoE,EAAApB,MAAAC,kBCIlC,SAAAoB,0DAA8BrE,EAAAqE,EAAArB,MAAAC,kBCH9B,SAAAqB,0DAA2BtE,EAAAsE,EAAAtB,MAAAC,kBCC3B,SAAAsB,0DAA0BvE,EAAAuE,EAAAvB,MAAAC,kBCH1B,SAAAuB,0DAAkCxE,EAAAwE,EAAAxB,MAAAC,G3CHtBzB,EAAAA,qBAAAA,GAAAA,EAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KAGvBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,MAAA,GAAA,QAGAA,EAAAA,EAAA,MAAA,GAAA,QAGAA,EAAAA,EAAA,OAAA,GAAA,SAGAA,EAAAA,EAAA,KAAA,GAAA,OAGAA,EAAAA,EAAA,KAAA,IAAA,OAGAA,EAAAA,EAAA,MAAA,IAAA,QCrBQC,EAAAA,uBAAAA,GAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAGzBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,OAAA,GAAA,SAGAA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UCZQC,EAAAA,qBAAAA,GAAAA,EAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KAGvBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,KAAA,GAAA,OAGAA,EAAAA,EAAA,MAAA,GAAA,QAGAA,EAAAA,EAAA,SAAA,GAAA,WCZQC,EAAAA,wBAAAA,GAAAA,EAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAG1BA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,KAAA,GAAA,OCTQC,EAAAA,uBAAAA,GAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAGzBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,SAAA,GAAA,WAGAA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,SAAA,GAAA,WClBQC,EAAAA,mBAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,EAAAA,cAAa,KAGrBA,EAAA,IAAA,GAAA,MAGAA,EAAAA,EAAA,IAAA,GAAA,MAGAA,EAAAA,EAAA,IAAA,GAAA,MAGAA,EAAAA,EAAA,IAAA,GAAA,MAGAA,EAAAA,EAAA,IAAA,GAAA,MAGAA,EAAAA,EAAA,IAAA,GAAA,MAGAA,EAAAA,EAAA,IAAA,GAAA,MCrBQC,EAAAA,oBAAAA,GAAAA,EAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KAGtBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,KAAA,GAAA,OAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,eAAA,GAAA,iBAGAA,EAAAA,EAAA,SAAA,GAAA,WAGAA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,SAAA,IAAA,WCjCQC,EAAAA,iBAAAA,GAAAA,EAAAA,EAAAA,cAAAA,EAAAA,YAAW,KAGnBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,aAAA,GAAA,eAGAA,EAAAA,EAAA,gBAAA,GAAA,kBCTQC,EAAAA,mBAAAA,GAAAA,EAAAA,EAAAA,gBAAAA,EAAAA,cAAa,KAGrBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,MAAA,MAAA,QAGAA,EAAAA,EAAA,SAAA,MAAA,WCTQC,EAAAA,sBAAAA,GAAAA,EAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAGxBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,OAAA,GAAA,SAGAA,EAAAA,EAAA,OAAA,GAAA,SCZQC,EAAAA,0BAAAA,GAAAA,EAAAA,EAAAA,uBAAAA,EAAAA,qBAAoB,KAG5BA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,SAAA,GAAA,WCZQC,EAAAA,yBAAAA,GAAAA,EAAAA,EAAAA,sBAAAA,EAAAA,oBAAmB,KAG3BA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,SAAA,GAAA,WAGAA,EAAAA,EAAA,SAAA,GAAA,WCZQC,EAAAA,uBAAAA,GAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAGzBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,MAAA,MAAA,QAGAA,EAAAA,EAAA,MAAA,MAAA,QCTQC,EAAAA,wBAAAA,GAAAA,EAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAG1BA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,aAAA,GAAA,eCTQC,EAAAA,sBAAAA,GAAAA,EAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAGxBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,MAAA,GAAA,QAGAA,EAAAA,EAAA,MAAA,GAAA,QAGAA,EAAAA,EAAA,MAAA,GAAA,QAGAA,EAAAA,EAAA,IAAA,GAAA,MAGAA,EAAAA,EAAA,KAAA,IAAA,OAGAA,EAAAA,EAAA,KAAA,IAAA,OAGAA,EAAAA,EAAA,KAAA,IAAA,OAGAA,EAAAA,EAAA,QAAA,KAAA,UAGAA,EAAAA,EAAA,GAAA,MAAA,KAGAA,EAAAA,EAAA,GAAA,MAAA,KAGAA,EAAAA,EAAA,GAAA,MAAA,KAGAA,EAAAA,EAAA,GAAA,MAAA,KCvCQC,EAAAA,wBAAAA,GAAAA,EAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAG1BA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,SAAA,MAAA,WAGAA,EAAAA,EAAA,cAAA,MAAA,gBAGAA,EAAAA,EAAA,cAAA,MAAA,gBAGAA,EAAAA,EAAA,cAAA,MAAA,gBAGAA,EAAAA,EAAA,SAAA,MAAA,WAGAA,EAAAA,EAAA,cAAA,MAAA,gBAGAA,EAAAA,EAAA,cAAA,MAAA,gBAGAA,EAAAA,EAAA,cAAA,MAAA,gBAGAA,EAAAA,EAAA,gBAAA,MAAA,kBAGAA,EAAAA,EAAA,WAAA,MAAA,aAGAA,EAAAA,EAAA,SAAA,MAAA,WAGAA,EAAAA,EAAA,aAAA,MAAA,eAGAA,EAAAA,EAAA,gBAAA,MAAA,kBAGAA,EAAAA,EAAA,cAAA,MAAA,gBAGAA,EAAAA,EAAA,cAAA,MAAA,gBAGAA,EAAAA,EAAA,eAAA,MAAA,iBAGAA,EAAAA,EAAA,YAAA,MAAA,cAGAA,EAAAA,EAAA,aAAA,MAAA,eCzDQC,EAAAA,kBAAAA,GAAAA,EAAAA,EAAAA,eAAAA,EAAAA,aAAY,KAGpBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,OAAA,GAAA,SAGAA,EAAAA,EAAA,OAAA,GAAA,SAGAA,EAAAA,EAAA,KAAA,GAAA,OAGAA,EAAAA,EAAA,IAAA,GAAA,MAGAA,EAAAA,EAAA,KAAA,GAAA,OAGAA,EAAAA,EAAA,MAAA,GAAA,QCrBQC,EAAAA,oBAAAA,GAAAA,EAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KAGtBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,KAAA,GAAA,OAGAA,EAAAA,EAAA,OAAA,GAAA,SCTQC,EAAAA,oBAAAA,GAAAA,EAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KAGtBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,OAAA,GAAA,SAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,UAAA,GAAA,YCfQC,EAAAA,kBAAAA,GAAAA,EAAAA,EAAAA,eAAAA,EAAAA,aAAY,KAGpBA,EAAA,UAAA,GAAA,YAGAA,EAAAA,EAAA,SAAA,GAAA,WAGAA,EAAAA,EAAA,QAAA,GAAA,UAGAA,EAAAA,EAAA,KAAA,GAAA,OAGAA,EAAAA,EAAA,QAAA,GAAA,iByBVA,SAAYC,GACR7F,KAAK6F,GAAKA,MCSd,SAAY6B,EAAetD,EAAgBxC,EAAc+F,GACrD3H,KAAK0H,KAAOA,EACZ1H,KAAKoE,MAAQA,EACbpE,KAAK4B,IAAMA,EACX5B,KAAK2H,KAAOA,MCdhB,SAAY9B,GACR7F,KAAK6F,GAAKA,MCAd,SAAY+B,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCIhB,SAAYC,EAAeC,EAAgBC,GACvC/H,KAAK6H,KAAOA,EACZ7H,KAAK8H,MAAQA,EACb9H,KAAK+H,IAAMA,MCHf,SAAYF,EAAeC,EAAgBC,GACvC/H,KAAK6H,KAAOA,EACZ7H,KAAK8H,MAAQA,EACb9H,KAAK+H,IAAMA,MCCf,SAAYlC,EAAamC,EAAkBC,EAAiBC,GACxDlI,KAAK6F,GAAKA,EACV7F,KAAKgI,QAAUA,EACfhI,KAAKiI,OAASA,EACdjI,KAAKkI,SAAWA,MCCpB,SAAYrG,EAAeC,EAAa+F,EAAeC,EAAgBC,EAAcI,GACjFnI,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAK6H,KAAOA,EACZ7H,KAAK8H,MAAQA,EACb9H,KAAK+H,IAAMA,EACX/H,KAAKmI,MAAQA,MCjBjB,SAAYtC,EAAauC,GACrBpI,KAAK6F,GAAKA,EACV7F,KAAKoI,aAAeA,MCSxB,SAAYvC,EAAawC,EAAqBR,EAAeC,EAAgBC,EAAcO,GACvFtI,KAAK6F,GAAKA,EACV7F,KAAKqI,WAAaA,EAClBrI,KAAK6H,KAAOA,EACZ7H,KAAK8H,MAAQA,EACb9H,KAAK+H,IAAMA,EACX/H,KAAKsI,KAAOA,MCpBhB,SAAYV,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCChB,SAAYG,EAAcQ,GACtBvI,KAAK+H,IAAMA,EACX/H,KAAKuI,KAAOA,MCChB,SAAYR,EAAcS,EAAoBC,GAC1CzI,KAAK+H,IAAMA,EACX/H,KAAKwI,UAAYA,EACjBxI,KAAKyI,WAAaA,MCHtB,SAAYV,EAAcW,EAAiBC,GACvC3I,KAAK+H,IAAMA,EACX/H,KAAK0I,OAASA,EACd1I,KAAK2I,YAAcA,MCTvB,SAAYZ,GACR/H,KAAK+H,IAAMA,MCDf,SAAYlC,GACR7F,KAAK6F,GAAKA,MCmBd,SAAY5F,EAAoB2I,EAAiB1I,EAA0B2I,EAA6BP,EAAeQ,EAAeC,GAClI/I,KAAKC,UAAYA,EACjBD,KAAK4I,OAASA,EACd5I,KAAKE,KAAOA,EACZF,KAAK6I,OAASA,EACd7I,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MCxBpB,SAAYlD,EAAawC,GACrBrI,KAAK6F,GAAKA,EACV7F,KAAKqI,WAAaA,MCFtB,SAAYN,EAAclC,GACtB7F,KAAK+H,IAAMA,EACX/H,KAAK6F,GAAKA,MCFd,SAAYkC,EAAclC,GACtB7F,KAAK+H,IAAMA,EACX/H,KAAK6F,GAAKA,MCCd,SAAYkC,EAAciB,EAAiBC,GACvCjJ,KAAK+H,IAAMA,EACX/H,KAAKgJ,OAASA,EACdhJ,KAAKiJ,OAASA,MCNlB,SAAYlB,EAAclC,GACtB7F,KAAK+H,IAAMA,EACX/H,KAAK6F,GAAKA,MCLd,SAAYA,GACR7F,KAAK6F,GAAKA,MCEd,SAAYA,EAAapF,GACrBT,KAAK6F,GAAKA,EACV7F,KAAKS,OAASA,MCClB,SAAYoF,EAAapF,EAAmBmH,GACxC5H,KAAK6F,GAAKA,EACV7F,KAAKS,OAASA,EACdT,KAAK4H,KAAOA,MCRhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCuBhB,SAAYgB,EAAiBM,EAAmCd,EAAiCS,EAA6BX,EAA4BI,EAAeQ,EAAeC,GACpL/I,KAAK4I,OAASA,EACd5I,KAAKkJ,cAAgBA,EACrBlJ,KAAKoI,aAAeA,EACpBpI,KAAK6I,OAASA,EACd7I,KAAKkI,SAAWA,EAChBlI,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MCrBpB,SAAYlD,EAAagC,EAAeC,EAAgBC,EAAcO,GAClEtI,KAAK6F,GAAKA,EACV7F,KAAK6H,KAAOA,EACZ7H,KAAK8H,MAAQA,EACb9H,KAAK+H,IAAMA,EACX/H,KAAKsI,KAAOA,MChBhB,SAAYV,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCFhB,SAAY/B,GACR7F,KAAK6F,GAAKA,MCDd,SAAYA,GACR7F,KAAK6F,GAAKA,MCMd,SAAYhF,EAAoBsI,EAAsBC,GAClDpJ,KAAKa,UAAYA,EACjBb,KAAKmJ,YAAcA,EACnBnJ,KAAKoJ,YAAcA,MCPvB,SAAYvH,EAAeC,GACvB9B,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,MCRd,gBCAA,gBCOA,SAAY4F,EAAetD,GACvBpE,KAAK0H,KAAOA,EACZ1H,KAAKoE,MAAQA,kBCRrB,SAAAiF,0DAA+CpG,EAAAoG,EAAApD,MAAAqD,mBCA/C,SAAAC,0DAAgDtG,EAAAsG,EAAAtD,MAAAqD,mBCChD,SAAAE,0DAA4DvG,EAAAuG,EAAAvD,MAAAqD,mBCA5D,SAAAG,0DAA8CxG,EAAAwG,EAAAxD,MAAAqD,mBCD9C,SAAAI,0DAA+CzG,EAAAyG,EAAAzD,MAAAqD,mBCA/C,SAAAK,0DAAoD1G,EAAA0G,EAAA1D,MAAAqD,mBCApD,SAAAM,0DAAsD3G,EAAA2G,EAAA3D,MAAAqD,OCMlD,SAAY5B,EAAetD,GACvBpE,KAAK0H,KAAOA,EACZ1H,KAAKoE,MAAQA,kBCRrB,SAAAyF,0DAAsD5G,EAAA4G,EAAA5D,MAAA6D,mBCAtD,SAAAC,0DAAkD9G,EAAA8G,EAAA9D,MAAAqD,mBCAlD,SAAAU,0DAAoD/G,EAAA+G,EAAA/D,MAAAqD,mBCApD,SAAAW,0DAAiDhH,EAAAgH,EAAAhE,MAAAqD,mBCAjD,SAAAY,0DAAgDjH,EAAAiH,EAAAjE,MAAAqD,mBCAhD,SAAAa,0DAAsDlH,EAAAkH,EAAAlE,MAAAqD,mBCCtD,SAAAc,0DAAsDnH,EAAAmH,EAAAnE,MAAAqD,mBCDtD,SAAAe,0DAA6CpH,EAAAoH,EAAApE,MAAA6D,mBCA7C,SAAAQ,0DAA6CrH,EAAAqH,EAAArE,MAAA6D,mBCA7C,SAAAS,0DAAqDtH,EAAAsH,EAAAtE,MAAA6D,mBCArD,SAAAU,0DAA8CvH,EAAAuH,EAAAvE,MAAA6D,mBCA9C,SAAAW,0DAA6CxH,EAAAwH,EAAAxE,MAAA6D,mBCA7C,SAAAY,0DAAoDzH,EAAAyH,EAAAzE,MAAA6D,mBCApD,SAAAa,0DAA+C1H,EAAA0H,EAAA1E,MAAA6D,mBCA/C,SAAAc,0DAA4C3H,EAAA2H,EAAA3E,MAAA6D,mBCA5C,SAAAe,0DAAgD5H,EAAA4H,EAAA5E,MAAA6D,mBCAhD,SAAAgB,0DAA+C7H,EAAA6H,EAAA7E,MAAA6D,mBCA/C,SAAAiB,0DAA6C9H,EAAA8H,EAAA9E,MAAA6D,mBCA7C,SAAAkB,0DAA8C/H,EAAA+H,EAAA/E,MAAA6D,mBCA9C,SAAAmB,0DAA0ChI,EAAAgI,EAAAhF,MAAA6D,mBCA1C,SAAAoB,0DAAqDjI,EAAAiI,EAAAjF,MAAA6D,OCejD,SAAYlB,EAAiB1G,EAA6BoG,EAAeQ,EAAeC,GACpF/I,KAAK4I,OAASA,EACd5I,KAAKkC,KAAOA,EACZlC,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MClBpB,SAAYlD,GACR7F,KAAK6F,GAAKA,MCAd,SAAY+B,GACR5H,KAAK4H,KAAOA,MCChB,SAAY/F,EAAeC,GACvB9B,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,MCYd,SAAY8G,EAAiB1I,EAA0B2I,EAA6BP,EAAeQ,EAAeC,GAC9G/I,KAAK4I,OAASA,EACd5I,KAAKE,KAAOA,EACZF,KAAK6I,OAASA,EACd7I,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MCtBpB,SAAYnB,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCFhB,SAAY/B,GACR7F,KAAK6F,GAAKA,MCDd,SAAYpF,GACRT,KAAKS,OAASA,MCElB,SAAYoH,EAAeC,GACvB9H,KAAK6H,KAAOA,EACZ7H,KAAK8H,MAAQA,MCLjB,SAAYjC,GACR7F,KAAK6F,GAAKA,MCYd,SAAYsF,EAAqBjJ,EAA6BL,EAAeC,EAAa8F,GACtF5H,KAAKmL,WAAaA,EAClBnL,KAAKkC,KAAOA,EACZlC,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAK4H,KAAOA,MCRhB,SAAY1F,EAA6BL,EAAeC,EAAa8F,GACjE5H,KAAKkC,KAAOA,EACZlC,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAK4H,KAAOA,MCDhB,SAAYwD,EAAoBlJ,EAA6BL,EAAeC,EAAa8F,GACrF5H,KAAKoL,UAAYA,EACjBpL,KAAKkC,KAAOA,EACZlC,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAK4H,KAAOA,MCLhB,SAAYyD,EAAgBnJ,EAA6BL,EAAeC,EAAa8F,GACjF5H,KAAKqL,MAAQA,EACbrL,KAAKkC,KAAOA,EACZlC,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAK4H,KAAOA,MCLhB,SAAYnH,EAAmByB,EAA6BL,EAAeC,EAAa8F,GACpF5H,KAAKS,OAASA,EACdT,KAAKkC,KAAOA,EACZlC,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAK4H,KAAOA,MCfhB,SAAY/F,EAAeC,GACvB9B,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,MCLd,SAAY+D,GACR7F,KAAK6F,GAAKA,MCqBd,SAAY6B,EAAetD,EAAgB0E,EAAeC,EAAmBuC,EAAgBnD,EAAgBoD,EAAmBC,GAC5HxL,KAAK0H,KAAOA,EACZ1H,KAAKoE,MAAQA,EACbpE,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,EAChB/I,KAAKsL,MAAQA,EACbtL,KAAKmI,MAAQA,EACbnI,KAAKuL,SAAWA,EAChBvL,KAAKwL,QAAUA,kBChCvB,SAAAC,0DAA4CxI,EAAAwI,EAAAxF,MAAAyF,mBCA5C,SAAAC,0DAA6C1I,EAAA0I,EAAA1F,MAAAyF,mBCA7C,SAAAE,0DAA4C3I,EAAA2I,EAAA3F,MAAAyF,mBCA5C,SAAAG,0DAAmD5I,EAAA4I,EAAA5F,MAAAyF,mBCAnD,SAAAI,0DAA+C7I,EAAA6I,EAAA7F,MAAAyF,mBCA/C,SAAAK,0DAA+C9I,EAAA8I,EAAA9F,MAAAyF,mBCA/C,SAAAM,0DAAiD/I,EAAA+I,EAAA/F,MAAAyF,mBCAjD,SAAAO,0DAA8ChJ,EAAAgJ,EAAAhG,MAAAyF,mBCA9C,SAAAQ,0DAA6CjJ,EAAAiJ,EAAAjG,MAAAyF,mBCA7C,SAAAS,0DAAyClJ,EAAAkJ,EAAAlG,MAAAyF,OCErC,SAAY7F,GACR7F,KAAK6F,GAAKA,MCEd,SAAYhE,EAAeC,GACvB9B,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,MCJd,SAAYsK,GACRpM,KAAKoM,QAAUA,MCDnB,SAAYxE,GACR5H,KAAK4H,KAAOA,MCChB,SAAY/B,EAAawG,GACrBrM,KAAK6F,GAAKA,EACV7F,KAAKqM,KAAOA,MCJhB,SAAYzE,GACR5H,KAAK4H,KAAOA,MCehB,SAAYgB,EAAiB1G,EAA0B2G,EAA8BP,EAAeQ,EAAeC,GAC/G/I,KAAK4I,OAASA,EACd5I,KAAKkC,KAAOA,EACZlC,KAAK6I,OAASA,EACd7I,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MChBpB,SAAYrB,EAAetD,EAAgBnE,GACvCD,KAAK0H,KAAOA,EACZ1H,KAAKoE,MAAQA,EACbpE,KAAKC,UAAYA,MCOrB,SAAY2I,EAAiB1G,EAA0B2G,EAA8BP,EAAeQ,EAAeC,GAC/G/I,KAAK4I,OAASA,EACd5I,KAAKkC,KAAOA,EACZlC,KAAK6I,OAASA,EACd7I,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MCLpB,SAAYtI,EAAiB4H,EAAqBxG,EAAeC,EAAawG,EAAeQ,EAAeC,GACxG/I,KAAKS,OAASA,EACdT,KAAKqI,WAAaA,EAClBrI,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MClBpB,SAAYlH,EAAeC,EAAawK,GACpCtM,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAKsM,QAAUA,MCEnB,SAAYjE,EAAqBR,EAAeC,EAAgBC,EAAcO,GAC1EtI,KAAKqI,WAAaA,EAClBrI,KAAK6H,KAAOA,EACZ7H,KAAK8H,MAAQA,EACb9H,KAAK+H,IAAMA,EACX/H,KAAKsI,KAAOA,MCChB,SAAY7H,EAAiB4H,EAAqBxG,EAAeC,EAAawG,EAAeQ,EAAeC,GACxG/I,KAAKS,OAASA,EACdT,KAAKqI,WAAaA,EAClBrI,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MCzBpB,SAAY7H,GACRlB,KAAKkB,MAAQA,MCAjB,SAAY0G,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCFhB,SAAY/B,GACR7F,KAAK6F,GAAKA,MCDd,SAAYA,GACR7F,KAAK6F,GAAKA,MCwBd,SAAYpF,EAAiB4H,EAAqBxG,EAAeC,EAAasJ,EAAoBvC,EAA4BP,EAAeQ,EAAeC,GACxJ/I,KAAKS,OAASA,EACdT,KAAKqI,WAAaA,EAClBrI,KAAK6B,KAAOA,EACZ7B,KAAK8B,GAAKA,EACV9B,KAAKoL,UAAYA,EACjBpL,KAAK6I,OAASA,EACd7I,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MClCpB,SAAYnB,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCAhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCFhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCAhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCFhB,SAAY/B,GACR7F,KAAK6F,GAAKA,MCDd,SAAY6B,GACR1H,KAAK0H,KAAOA,MCDhB,SAAYE,GACR5H,KAAK4H,KAAOA,MCAhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCFhB,SAAYhG,GACR5B,KAAK4B,IAAMA,MCEf,SAAYiE,EAAa0G,GACrBvM,KAAK6F,GAAKA,EACV7F,KAAKuM,IAAMA,MCJf,SAAY3E,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCDhB,SAAYA,GACR5H,KAAK4H,KAAOA,MCChB,SAAY/B,EAAa5F,GACrBD,KAAK6F,GAAKA,EACV7F,KAAKC,UAAYA,MCFrB,SAAY4F,EAAa+B,GACrB5H,KAAK6F,GAAKA,EACV7F,KAAK4H,KAAOA,MCFhB,SAAY/B,EAAa+B,GACrB5H,KAAK6F,GAAKA,EACV7F,KAAK4H,KAAOA,MCDhB,SAAY/B,EAAa3F,GACrBF,KAAK6F,GAAKA,EACV7F,KAAKE,KAAOA,MCFhB,SAAY2F,EAAagD,GACrB7I,KAAK6F,GAAKA,EACV7F,KAAK6I,OAASA,MCFlB,SAAYhD,EAAa3D,GACrBlC,KAAK6F,GAAKA,EACV7F,KAAKkC,KAAOA,MCLhB,SAAY0F,GACR5H,KAAK4H,KAAOA,MCehB,SAAYgB,EAAiB1G,EAAuB2G,EAA2BP,EAAekE,EAAiBC,GAC3GzM,KAAK4I,OAASA,EACd5I,KAAKkC,KAAOA,EACZlC,KAAK6I,OAASA,EACd7I,KAAKsI,KAAOA,EACZtI,KAAKwM,OAASA,EACdxM,KAAKyM,OAASA,MCHlB,SAAYxM,EAAoB2I,EAAiB1G,EAAuB2G,EAA2BP,EAAeQ,EAAeC,GAC7H/I,KAAKC,UAAYA,EACjBD,KAAK4I,OAASA,EACd5I,KAAKkC,KAAOA,EACZlC,KAAK6I,OAASA,EACd7I,KAAKsI,KAAOA,EACZtI,KAAK8I,KAAOA,EACZ9I,KAAK+I,SAAWA,MC1BpB,SAAYnB,GACR5H,KAAK4H,KAAOA,MCEhB,SAAY/B,EAAa6G,GACrB1M,KAAK6F,GAAKA,EACV7F,KAAK0M,MAAQA,MCFjB,SAAY7G,EAAa+B,GACrB5H,KAAK6F,GAAKA,EACV7F,KAAK4H,KAAOA,MCOhB,SAAY+E,EAAiBC,EAAkBC,EAAoBC,EAAwBC,GACvF/M,KAAKgN,GAAKL,EACV3M,KAAKiN,IAAML,EACX5M,KAAK6F,GAAKgH,EACV7M,KAAKkN,IAAMJ,EACX9M,KAAKmN,IAAMJ,GCzBbK,GAAW,6BAODC,GAASC,GACvBC,aAAaC,QAAQJ,GAAUE,YAGjBG,KACdF,aAAaG,WAAWN,IACxBG,aAAaG,WAZE,qCCef,SAAAC,EAAoBC,GAAA5N,KAAA4N,KAAAA,EALZ5N,KAAA6N,SAAU,IAAIC,EAAAA,aAAcC,IAAI,eAAgB,2BAUxDJ,EAAA7K,UAAAkL,SAAA,SAASC,EAAkBC,OAAa,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAA9J,UAAAC,OAAA6J,IAAAD,EAAAC,EAAA,GAAA9J,UAAA8J,GACtC,IAAMC,EAAcrO,KAAKsO,SAAQC,MAAbvO,KAAIqE,EAAA,CAAU6J,GAAQC,IAEtCK,EAAM,OACVL,EAAOM,SAAQ,SAAA5L,GACb,IAAI6L,EAAM7L,EAAE8L,MAAM,KACdD,EAAInK,OAAS,GACc,WAAzBmK,EAAI,GAAGE,gBACTJ,EAAME,EAAI,OAKhB,IAAMG,EAAeZ,EAAW,IAAMO,EAEtC,OAAOxO,KAAK4N,KAAKkB,IAAIT,EAAa,CAACU,aAAc,SAASC,WAAU,SAACrH,GACnE,IAAMsH,EAAcC,OAAOC,IAAIC,gBAAgBzH,GACzC0H,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOP,EACZI,EAAKrB,SAAWa,EAChBQ,EAAKI,YAQT9B,EAAA7K,UAAAgM,IAAA,SAAIZ,OAAJ,IAAAwB,EAAA1P,KAAiBmO,EAAA,GAAAC,EAAA,EAAAA,EAAA9J,UAAAC,OAAA6J,IAAAD,EAAAC,EAAA,GAAA9J,UAAA8J,GACf,IAAMC,EAAcrO,KAAKsO,SAAQC,MAAbvO,KAAIqE,EAAA,CAAU6J,GAAQC,IAC1C,OAAOnO,KAAK4N,KACTkB,IAAIT,EAAa,CAAER,QAAS7N,KAAK6N,QAAS8B,QAAS,aACnDC,KACCC,EAAAA,KAAI,SAACC,GAA2B,OAAAJ,EAAKK,gBAAgBD,MACrDE,EAAAA,WAAWhQ,KAAKiQ,eAOtBtC,EAAA7K,UAAAoN,KAAA,SAAKhC,EAAatG,OAAlB,IAAA8H,EAAA1P,KAAgCmO,EAAA,GAAAC,EAAA,EAAAA,EAAA9J,UAAAC,OAAA6J,IAAAD,EAAAC,EAAA,GAAA9J,UAAA8J,GAC9B,IAAMC,EAAcrO,KAAKsO,SAAQC,MAAbvO,KAAIqE,EAAA,CAAU6J,GAAQC,IAC1C,OAAOnO,KAAK4N,KACTsC,KAAK7B,EAAazG,EAAM,CAAEiG,QAAS7N,KAAK6N,QAAS8B,QAAS,aAC1DC,KACCC,EAAAA,KAAI,SAACC,GAA2B,OAAAJ,EAAKK,gBAAgBD,MACrDE,EAAAA,WAAWhQ,KAAKiQ,eAOtBtC,EAAA7K,UAAAqN,IAAA,SAAIjC,EAAatG,OAAjB,IAAA8H,EAAA1P,KAA+BmO,EAAA,GAAAC,EAAA,EAAAA,EAAA9J,UAAAC,OAAA6J,IAAAD,EAAAC,EAAA,GAAA9J,UAAA8J,GAC7B,IAAMC,EAAcrO,KAAKsO,SAAQC,MAAbvO,KAAIqE,EAAA,CAAU6J,GAAQC,IAC1C,OAAOnO,KAAK4N,KACTuC,IAAI9B,EAAazG,EAAM,CAAEiG,QAAS7N,KAAK6N,QAAS8B,QAAS,aACzDC,KACCC,EAAAA,KAAI,SAACC,GAA2B,OAAAJ,EAAKK,gBAAgBD,MACrDE,EAAAA,WAAWhQ,KAAKiQ,eAOtBtC,EAAA7K,UAAAsN,OAAA,SAAOlC,OAAP,IAAAwB,EAAA1P,KAAoBmO,EAAA,GAAAC,EAAA,EAAAA,EAAA9J,UAAAC,OAAA6J,IAAAD,EAAAC,EAAA,GAAA9J,UAAA8J,GAClB,IAAMC,EAAcrO,KAAKsO,SAAQC,MAAbvO,KAAIqE,EAAA,CAAU6J,GAAQC,IAC1C,OAAOnO,KAAK4N,KACTwC,OAAO/B,EAAa,CAAER,QAAS7N,KAAK6N,QAAS8B,QAAS,aACtDC,KACCC,EAAAA,KAAI,SAACC,GAA2B,OAAAJ,EAAKK,gBAAgBD,MACrDE,EAAAA,WAAWhQ,KAAKiQ,eAOdtC,EAAA7K,UAAAwL,SAAA,SAASJ,OAAa,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAA9J,UAAAC,OAAA6J,IAAAD,EAAAC,EAAA,GAAA9J,UAAA8J,GAC5B,OAAmB,OAAXD,GAA4C,IAAlBA,EAAO5J,OAAd2J,EAAuCA,GAAMC,GAAUA,EAAO5J,OAAS,EAAI,IAAI4J,EAAOkC,KAAK,KAAO,KAMvH1C,EAAA7K,UAAAiN,gBAAA,SAAgBO,GAEtB,GAAwB,MAApBA,EAASzH,OAEX,MADA0H,KACM,IAAIC,MAAM,+BAAiCF,EAASzH,QACrD,GAAIyH,EAASzH,OAAS,IAC3B,MAAM,IAAI2H,MAAM,sBAAwBF,EAASzH,QAKnD,IAAMrI,EAAc8P,EAASzC,QAAQiB,IAAI,kBAMzC,GAJqB,OAAhBtO,GAA0BA,EAAY+D,OAAS,GAClDkM,GAA0BjQ,GAGxB8P,EAAS1I,MAAQ0I,EAAS1I,KAAKF,MAA+B,IAAvB4I,EAAS1I,KAAKF,KACvD,KAAM,CAAEA,KAAM4I,EAAS1I,KAAKF,KAAMgJ,QAASJ,EAAS1I,KAAKxD,OAG3D,OAAOkM,EAAS1I,MAMV+F,EAAA7K,UAAAmN,YAAA,SAAY7L,GAClB,OAAIA,EAAMsD,KACDiJ,QAAQC,OAAOxM,GAEjBuM,QAAQC,OAAOxM,EAAMsM,SAAWtM,2CAnI9BuJ,IAAQkD,EAAAC,SAAAC,EAAAC,mDAARrD,GAAQsD,QAARtD,GAAQuD,uEAARvD,GAAQ,CAAA,MADpBwD,EAAAA,oECRD,2BCqBE,SAAAC,EAAsCC,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,iBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCH,EAAAtO,UAAA2O,YAAA,WACE,OAAOzR,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,cAOtCH,EAAAtO,UAAA4O,eAAA,SAAe9J,GACb,OAAO5H,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,YAA6B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,2CA1B1FwJ,IAAmBP,EAAAC,SAQV,UAAQD,EAAAC,SAAAnD,2CARjByD,GAAmBH,QAAnBG,GAAmBF,uEAAnBE,GAAmB,CAAA,MAD/BD,EAAAA,2DAScU,EAAAA,aAAO,kDCCpB,SAAAC,EAAsCT,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,oBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCO,EAAAhP,UAAAQ,OAAA,SAAOsE,GACL,OAAO5H,KAAKsR,KAAKpB,KAAK,GAAGlQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO7FkK,EAAAhP,UAAAiP,OAAA,SAAOnK,GACL,OAAO5H,KAAKsR,KAAKnB,IAAI,GAAGnQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO5FkK,EAAAhP,UAAAsN,OAAA,SAAOvK,GACL,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,IAAI1L,IAO7CiM,EAAAhP,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1CiM,EAAAhP,UAAAkP,KAAA,SAAKnM,GACH,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,EAAE,UAO5CiM,EAAAhP,UAAAmB,KAAA,SAAK4B,GACH,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,EAAE,UAO5CiM,EAAAhP,UAAAmP,KAAA,SAAKpQ,EAAeC,EAAa+F,EAAeC,EAAgBC,EAAcI,SACtEgG,EAAS,IAAIvL,MAQrB,OAPc,MAARf,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,GACxB,MAAR+F,GAAgBsG,EAAOhK,KAAK,QAAQ0D,GAC3B,MAATC,GAAiBqG,EAAOhK,KAAK,SAAS2D,GAC/B,MAAPC,GAAeoG,EAAOhK,KAAK,OAAO4D,GACzB,MAATI,GAAiBgG,EAAOhK,KAAK,SAASgE,IAErC+J,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,KAO3C2D,EAAAhP,UAAAqP,kBAAA,SAAkBtM,EAAamC,EAAkBC,EAAiBC,SAC1DiG,EAAS,IAAIvL,MAKrB,OAJiB,MAAXoF,GAAmBmG,EAAOhK,KAAK,WAAW6D,GAChC,MAAVC,GAAkBkG,EAAOhK,KAAK,UAAU8D,GAC5B,MAAZC,GAAoBiG,EAAOhK,KAAK,YAAY+D,IAE3CgK,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,IAAI1L,EAAE,cAAiBsI,KAO3D2D,EAAAhP,UAAAsP,WAAA,SAAWxK,GACT,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,QAAyB,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOlGkK,EAAAhP,UAAAuP,cAAA,SAAcxK,EAAeC,EAAgBC,SACrCoG,EAAS,IAAIvL,MAKrB,OAJc,MAARiF,GAAgBsG,EAAOhK,KAAK,QAAQ0D,GAC3B,MAATC,GAAiBqG,EAAOhK,KAAK,SAAS2D,GAC/B,MAAPC,GAAeoG,EAAOhK,KAAK,OAAO4D,IAEjCmK,EAAAlS,KAAKsR,MAAKpB,KAAI3B,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,WAAY,MAASpD,KAO1D2D,EAAAhP,UAAAwP,aAAA,SAAazK,EAAeC,EAAgBC,SACpCoG,EAAS,IAAIvL,MAKrB,OAJc,MAARiF,GAAgBsG,EAAOhK,KAAK,QAAQ0D,GAC3B,MAATC,GAAiBqG,EAAOhK,KAAK,SAAS2D,GAC/B,MAAPC,GAAeoG,EAAOhK,KAAK,OAAO4D,IAEjCmK,EAAAlS,KAAKsR,MAAKlB,OAAM7B,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,YAAepD,4CAzH3C2D,IAAsBjB,EAAAC,SAQb,UAAQD,EAAAC,SAAAnD,2CARjBmE,GAAsBb,QAAtBa,GAAsBZ,uEAAtBY,GAAsB,CAAA,MADlCX,EAAAA,2DAScU,EAAAA,aAAO,kDCCpB,SAAAU,EAAsClB,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,iBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCgB,EAAAzP,UAAA0P,OAAA,SAAO5K,GACL,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,UAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOpG2K,EAAAzP,UAAA2P,SAAA,SAAS5M,GACP,OAAO7F,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,cAAc1L,EAAM,OAO3D0M,EAAAzP,UAAAiP,OAAA,SAAOnK,GACL,OAAO5H,KAAKsR,KAAKnB,IAAI,GAAGnQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAQ5F2K,EAAAzP,UAAAsN,OAAA,SAAOvK,GACL,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,IAAI1L,IAQ7C0M,EAAAzP,UAAA4P,cAAA,SAAc7M,GACZ,OAAO7F,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,IAAI1L,EAAE,kBAAmB,OAOhE0M,EAAAzP,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1C0M,EAAAzP,UAAA6P,eAAA,SAAezR,GACb,OAAOlB,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,UAAUrQ,IAOhDqR,EAAAzP,UAAA8P,mBAAA,SAAmBnS,GACjB,OAAOT,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,gBAAgB9Q,IAQtD8R,EAAAzP,UAAAmP,KAAA,SAAKhS,EAAoB2I,EAAiB1I,EAA0B2I,EAA6BP,EAAeQ,EAAeC,SACvHoF,EAAS,IAAIvL,MASrB,OARmB,MAAb3C,GAAqBkO,EAAOhK,KAAK,aAAalE,GACpC,MAAV2I,GAAkBuF,EAAOhK,KAAK,UAAUyE,GAChC,MAAR1I,GAAgBiO,EAAOhK,KAAK,QAAQjE,GAC1B,MAAV2I,GAAkBsF,EAAOhK,KAAK,UAAU0E,GAChC,MAARP,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,KAO3CoE,EAAAzP,UAAA+P,WAAA,SAAWjL,GACT,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,UAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOpG2K,EAAAzP,UAAAgQ,kBAAA,SAAkBjN,EAAawC,EAAqBR,EAAeC,EAAgBC,EAAcO,SACzF6F,EAAS,IAAIvL,MAOrB,OANoB,MAAdyF,GAAsB8F,EAAOhK,KAAK,cAAckE,GACxC,MAARR,GAAgBsG,EAAOhK,KAAK,QAAQ0D,GAC3B,MAATC,GAAiBqG,EAAOhK,KAAK,SAAS2D,GAC/B,MAAPC,GAAeoG,EAAOhK,KAAK,OAAO4D,GAC1B,MAARO,GAAgB6F,EAAOhK,KAAK,QAAQmE,IAEnC4J,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,IAAI1L,EAAE,YAAesI,4CArH9CoE,IAAmB1B,EAAAC,SAQV,UAAQD,EAAAC,SAAAnD,2CARjB4E,GAAmBtB,QAAnBsB,GAAmBrB,uEAAnBqB,GAAmB,CAAA,MAD/BpB,EAAAA,2DAScU,EAAAA,aAAO,kDCJpB,SAAAkB,EAAsC1B,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,uBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCwB,EAAAjQ,UAAAkQ,WAAA,SAAWvS,EAAmByB,EAA6BL,EAAeC,EAAa8F,SAC/EuG,EAAS,IAAIvL,MAMrB,OALgB,MAAVnC,GAAkB0N,EAAOhK,KAAK,UAAU1D,GAChC,MAARyB,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC5B,MAARL,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,IAE/BoQ,EAAAlS,KAAKsR,MAAKpB,KAAI3B,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,GAASuG,KAOpG4E,EAAAjQ,UAAAmQ,mBAAA,SAAmB7H,EAAoBlJ,EAA6BL,EAAeC,EAAa8F,SACxFuG,EAAS,IAAIvL,MAMrB,OALmB,MAAbwI,GAAqB+C,EAAOhK,KAAK,aAAaiH,GACtC,MAARlJ,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC5B,MAARL,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,IAE/BoQ,EAAAlS,KAAKsR,MAAKpB,KAAI3B,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,WAA4B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,GAASuG,KAO5G4E,EAAAjQ,UAAAoQ,oBAAA,SAAoB/H,EAAqBjJ,EAA6BL,EAAeC,EAAa8F,SAC1FuG,EAAS,IAAIvL,MAMrB,OALoB,MAAduI,GAAsBgD,EAAOhK,KAAK,cAAcgH,GACxC,MAARjJ,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC5B,MAARL,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,IAE/BoQ,EAAAlS,KAAKsR,MAAKpB,KAAI3B,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,YAA6B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,GAASuG,KAO7G4E,EAAAjQ,UAAAqQ,iBAAA,SAAiB9H,EAAgBnJ,EAA6BL,EAAeC,EAAa8F,SAClFuG,EAAS,IAAIvL,MAMrB,OALe,MAATyI,GAAiB8C,EAAOhK,KAAK,SAASkH,GAC9B,MAARnJ,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC5B,MAARL,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,IAE/BoQ,EAAAlS,KAAKsR,MAAKpB,KAAI3B,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,SAA0B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,GAASuG,KAO1G4E,EAAAjQ,UAAAsQ,iBAAA,SAAiBlR,EAA6BL,EAAeC,EAAa8F,SAClEuG,EAAS,IAAIvL,MAKrB,OAJc,MAARV,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC5B,MAARL,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,IAE/BoQ,EAAAlS,KAAKsR,MAAKpB,KAAI3B,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,WAA4B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,GAASuG,4CA/EjG4E,IAAyBlC,EAAAC,SAQhB,UAAQD,EAAAC,SAAAnD,2CARjBoF,GAAyB9B,QAAzB8B,GAAyB7B,uEAAzB6B,GAAyB,CAAA,MADrC5B,EAAAA,2DAScU,EAAAA,aAAO,kDCEpB,SAAAwB,EAAsChC,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,iBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxC8B,EAAAvQ,UAAAwQ,gBAAA,SAAgBvL,EAAcS,EAAoBC,SAC1C0F,EAAS,IAAIvL,MAIrB,OAHmB,MAAb4F,GAAqB2F,EAAOhK,KAAK,aAAaqE,GAChC,MAAdC,GAAsB0F,EAAOhK,KAAK,cAAcsE,IAE/CyJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,UAAUxJ,GAAUoG,KAOxDkF,EAAAvQ,UAAAyQ,kBAAA,SAAkBxL,GAChB,OAAO/H,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,oBAAoBxJ,IAO1DsL,EAAAvQ,UAAA0Q,mBAAA,SAAmBzL,EAAcQ,SACzB4F,EAAS,IAAIvL,MAGrB,OAFc,MAAR2F,GAAgB4F,EAAOhK,KAAK,QAAQoE,IAEnC2J,EAAAlS,KAAKsR,MAAKtD,SAAQO,MAAA2D,EAAA7N,EAAA,CAAC,gBAAmBrE,KAAKuR,QAAO,UAAUxJ,EAAG,WAAcoG,KAOpFkF,EAAAvQ,UAAAqP,kBAAA,SAAkBtM,GAChB,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,aAAa1L,EAAE,eAOrDwN,EAAAvQ,UAAA2Q,eAAA,SAAe5N,EAAawC,GAC1B,OAAOrI,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,aAAa1L,EAAE,WAAWwC,EAAc,OAO/EgL,EAAAvQ,UAAA4Q,iBAAA,SAAiB7N,GACf,OAAO7F,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,aAAa1L,EAAE,aAAc,OAOpEwN,EAAAvQ,UAAA6Q,cAAA,SAAc5L,EAAciB,EAAiBC,GAC3C,OAAOjJ,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,UAAUxJ,EAAG,aAAaiB,EAAM,UAAUC,EAAU,OAO3FoK,EAAAvQ,UAAA8Q,cAAA,SAAc7L,EAAclC,GAC1B,OAAO7F,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,UAAUxJ,EAAG,aAAalC,EAAE,SAAU,OAO7EwN,EAAAvQ,UAAA+Q,cAAA,SAAc9L,EAAclC,GAC1B,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,UAAUxJ,EAAG,aAAalC,IAOnEwN,EAAAvQ,UAAAgR,eAAA,SAAe/L,EAAclC,GAC3B,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,UAAUxJ,EAAG,eAAelC,IAOrEwN,EAAAvQ,UAAAiR,qBAAA,SAAqBhM,EAAcW,EAAiBC,SAC5CwF,EAAS,IAAIvL,MAIrB,OAHgB,MAAV8F,GAAkByF,EAAOhK,KAAK,UAAUuE,GACzB,MAAfC,GAAuBwF,EAAOhK,KAAK,eAAewE,IAEjDuJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,0BAA0BxJ,GAAUoG,KAOxEkF,EAAAvQ,UAAAkR,mBAAA,SAAmBpM,GACjB,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,yBAA0C,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOnHyL,EAAAvQ,UAAAmR,cAAA,SAAcpO,EAAapF,SACnB0N,EAAS,IAAIvL,MAGrB,OAFgB,MAAVnC,GAAkB0N,EAAOhK,KAAK,UAAU1D,IAEvCyR,EAAAlS,KAAKsR,MAAKpB,KAAI3B,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,aAAa1L,EAAE,WAAY,MAASsI,KAOzEkF,EAAAvQ,UAAAoR,eAAA,SAAerO,EAAapF,EAAmBmH,SACvCuG,EAAS,IAAIvL,MAGrB,OAFgB,MAAVnC,GAAkB0N,EAAOhK,KAAK,UAAU1D,IAEvCyR,EAAAlS,KAAKsR,MAAKpB,KAAI3B,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,aAAa1L,EAAE,YAA6B,iBAAT+B,EAAoB+J,KAAKC,UAAUhK,GAAQA,GAASuG,4CA3IjHkF,IAAmBxC,EAAAC,SAQV,UAAQD,EAAAC,SAAAnD,2CARjB0F,GAAmBpC,QAAnBoC,GAAmBnC,uEAAnBmC,GAAmB,CAAA,MAD/BlC,EAAAA,2DAScU,EAAAA,aAAO,kDCDpB,SAAAsC,EAAsC9C,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,iBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxC4C,EAAArR,UAAAsR,gBAAA,SAAgBvM,EAAeC,SACvBqG,EAAS,IAAIvL,MAIrB,OAHc,MAARiF,GAAgBsG,EAAOhK,KAAK,QAAQ0D,GAC3B,MAATC,GAAiBqG,EAAOhK,KAAK,SAAS2D,IAErCoK,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,kBAAqBpD,KAOzDgG,EAAArR,UAAAuR,eAAA,SAAexS,EAAeC,SACtBqM,EAAS,IAAIvL,MAIrB,OAHc,MAARf,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,IAE/BoQ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,iBAAoBpD,KAOxDgG,EAAArR,UAAAwR,yBAAA,SAAyBzS,EAAeC,SAChCqM,EAAS,IAAIvL,MAIrB,OAHc,MAARf,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,IAE/BoQ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,iBAAoBpD,KAOxDgG,EAAArR,UAAAyR,4BAAA,SAA4B1S,EAAeC,SACnCqM,EAAS,IAAIvL,MAIrB,OAHc,MAARf,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,IAE/BoQ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,kBAAqBpD,4CA1D9CgG,IAAmBtD,EAAAC,SAQV,UAAQD,EAAAC,SAAAnD,2CARjBwG,GAAmBlD,QAAnBkD,GAAmBjD,uEAAnBiD,GAAmB,CAAA,MAD/BhD,EAAAA,2DAScU,EAAAA,aAAO,kDCKpB,SAAA2C,EAAsCnD,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,mBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCiD,EAAA1R,UAAAQ,OAAA,SAAOsE,GACL,OAAO5H,KAAKsR,KAAKpB,KAAK,GAAGlQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO7F4M,EAAA1R,UAAAiP,OAAA,SAAOnK,GACL,OAAO5H,KAAKsR,KAAKnB,IAAI,GAAGnQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO5F4M,EAAA1R,UAAAsN,OAAA,SAAOvK,GACL,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,IAAI1L,IAO7C2O,EAAA1R,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1C2O,EAAA1R,UAAAmP,KAAA,SAAKrJ,EAAiBM,EAAmCd,EAAiCS,EAA6BX,EAA4BI,EAAeQ,EAAeC,SACzKoF,EAAS,IAAIvL,MAUrB,OATgB,MAAVgG,GAAkBuF,EAAOhK,KAAK,UAAUyE,GACvB,MAAjBM,GAAyBiF,EAAOhK,KAAK,iBAAiB+E,GACtC,MAAhBd,GAAwB+F,EAAOhK,KAAK,gBAAgBiE,GAC1C,MAAVS,GAAkBsF,EAAOhK,KAAK,UAAU0E,GAC5B,MAAZX,GAAoBiG,EAAOhK,KAAK,YAAY+D,GACpC,MAARI,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,KAO3CqG,EAAA1R,UAAA2R,WAAA,SAAW7M,GACT,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,UAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOpG4M,EAAA1R,UAAA4R,oBAAA,SAAoB7O,EAAagC,EAAeC,EAAgBC,EAAcO,SACtE6F,EAAS,IAAIvL,MAMrB,OALc,MAARiF,GAAgBsG,EAAOhK,KAAK,QAAQ0D,GAC3B,MAATC,GAAiBqG,EAAOhK,KAAK,SAAS2D,GAC/B,MAAPC,GAAeoG,EAAOhK,KAAK,OAAO4D,GAC1B,MAARO,GAAgB6F,EAAOhK,KAAK,QAAQmE,IAEnC4J,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,IAAI1L,EAAE,YAAesI,4CAlF9CqG,IAAqB3D,EAAAC,SAQZ,UAAQD,EAAAC,SAAAnD,2CARjB6G,GAAqBvD,QAArBuD,GAAqBtD,uEAArBsD,GAAqB,CAAA,MADjCrD,EAAAA,2DAScU,EAAAA,aAAO,kDCPpB,SAAA8C,EAAsCtD,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,UAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCoD,EAAA7R,UAAA8R,OAAA,WACE,OAAO5U,KAAKsR,KAAKxC,IAAI,GAAG9O,KAAKuR,iDAlBpBoD,IAAkB9D,EAAAC,SAQT,UAAQD,EAAAC,SAAAnD,2CARjBgH,GAAkB1D,QAAlB0D,GAAkBzD,uEAAlByD,GAAkB,CAAA,MAD9BxD,EAAAA,2DAScU,EAAAA,aAAO,kDCKpB,SAAAgD,EAAsCxD,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,gBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCsD,EAAA/R,UAAAQ,OAAA,SAAOsE,GACL,OAAO5H,KAAKsR,KAAKpB,KAAK,GAAGlQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO7FiN,EAAA/R,UAAAiP,OAAA,SAAOnK,GACL,OAAO5H,KAAKsR,KAAKnB,IAAI,GAAGnQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAS5FiN,EAAA/R,UAAAsN,OAAA,SAAOvK,GACL,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,IAAI1L,IAO7CgP,EAAA/R,UAAAgS,MAAA,SAAMjP,GACJ,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,UAAU1L,IAOnDgP,EAAA/R,UAAAiS,MAAA,SAAMlP,EAAawG,GACjB,OAAOrM,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,UAAU1L,EAAE,SAASwG,IAO9DwI,EAAA/R,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1CgP,EAAA/R,UAAAmP,KAAA,SAAKrJ,EAAiB1G,EAA0B2G,EAA8BP,EAAeQ,EAAeC,SACpGoF,EAAS,IAAIvL,MAQrB,OAPgB,MAAVgG,GAAkBuF,EAAOhK,KAAK,UAAUyE,GAChC,MAAR1G,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC1B,MAAV2G,GAAkBsF,EAAOhK,KAAK,UAAU0E,GAChC,MAARP,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,4CA5EhC0G,IAAkBhE,EAAAC,SAQT,UAAQD,EAAAC,SAAAnD,2CARjBkH,GAAkB5D,QAAlB4D,GAAkB3D,uEAAlB2D,GAAkB,CAAA,MAD9B1D,EAAAA,2DAScU,EAAAA,aAAO,kDCCpB,SAAAmD,EAAsC3D,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,aAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eASxCyD,EAAAlS,UAAAQ,OAAA,SAAOsE,GACL,OAAO5H,KAAKsR,KAAKpB,KAAK,GAAGlQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO7FoN,EAAAlS,UAAAiP,OAAA,SAAOlM,EAAa+B,GAClB,OAAO5H,KAAKsR,KAAKnB,IAAI,GAAGnQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO5FoN,EAAAlS,UAAAmS,WAAA,SAAWpP,EAAa+B,GACtB,OAAO5H,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,IAAI1L,EAAE,QAAyB,iBAAT+B,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOvGoN,EAAAlS,UAAAoS,aAAA,SAAarP,EAAa+B,GACxB,OAAO5H,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,IAAI1L,EAAE,UAA2B,iBAAT+B,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOzGoN,EAAAlS,UAAAqS,WAAA,SAAWtP,EAAa3D,GACtB,OAAOlC,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,IAAI1L,EAAE,SAAS3D,EAAQ,OAO7D8S,EAAAlS,UAAAsS,aAAA,SAAavP,EAAagD,GACxB,OAAO7I,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,IAAI1L,EAAE,WAAWgD,EAAU,OAOjEmM,EAAAlS,UAAAuS,qBAAA,SAAqBxP,EAAa5F,GAChC,OAAOD,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,IAAI1L,EAAE,mBAAmB5F,EAAa,OAO5E+U,EAAAlS,UAAA4P,cAAA,SAAc7M,GACZ,OAAO7F,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,IAAI1L,EAAE,kBAAmB,OAOhEmP,EAAAlS,UAAAsN,OAAA,SAAOvK,GACL,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,IAAI1L,IAO7CmP,EAAAlS,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1CmP,EAAAlS,UAAAmP,KAAA,SAAKhS,EAAoB2I,EAAiB1G,EAAuB2G,EAA2BP,EAAeQ,EAAeC,SAClHoF,EAAS,IAAIvL,MASrB,OARmB,MAAb3C,GAAqBkO,EAAOhK,KAAK,aAAalE,GACpC,MAAV2I,GAAkBuF,EAAOhK,KAAK,UAAUyE,GAChC,MAAR1G,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC1B,MAAV2G,GAAkBsF,EAAOhK,KAAK,UAAU0E,GAChC,MAARP,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,4CA5GhC6G,IAAenE,EAAAC,SAQN,UAAQD,EAAAC,SAAAnD,2CARjBqH,GAAe/D,QAAf+D,GAAe9D,uEAAf8D,GAAe,CAAA,MAD3B7D,EAAAA,2DAScU,EAAAA,aAAO,kDCHpB,SAAAyD,EAAsCjE,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,mBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxC+D,EAAAxS,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1CyP,EAAAxS,UAAAmP,KAAA,SAAKpQ,EAAeC,EAAa+F,EAAeC,EAAgBC,EAAcI,SACtEgG,EAAS,IAAIvL,MAQrB,OAPc,MAARf,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,GACxB,MAAR+F,GAAgBsG,EAAOhK,KAAK,QAAQ0D,GAC3B,MAATC,GAAiBqG,EAAOhK,KAAK,SAAS2D,GAC/B,MAAPC,GAAeoG,EAAOhK,KAAK,OAAO4D,GACzB,MAATI,GAAiBgG,EAAOhK,KAAK,SAASgE,IAErC+J,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,KAO3CmH,EAAAxS,UAAAqP,kBAAA,SAAkBtM,EAAamC,EAAkBC,EAAiBC,SAC1DiG,EAAS,IAAIvL,MAKrB,OAJiB,MAAXoF,GAAmBmG,EAAOhK,KAAK,WAAW6D,GAChC,MAAVC,GAAkBkG,EAAOhK,KAAK,UAAU8D,GAC5B,MAAZC,GAAoBiG,EAAOhK,KAAK,YAAY+D,IAE3CgK,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,IAAI1L,EAAE,cAAiBsI,KAO3DmH,EAAAxS,UAAAyS,iBAAA,SAAiB1P,GACf,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,EAAE,0DAvDjCyP,IAAoBzE,EAAAC,SAQX,UAAQD,EAAAC,SAAAnD,2CARjB2H,GAAoBrE,QAApBqE,GAAoBpE,uEAApBoE,GAAoB,CAAA,MADhCnE,EAAAA,2DAScU,EAAAA,aAAO,kDCCpB,SAAA2D,EAAsCnE,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,iBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCiE,EAAA1S,UAAAQ,OAAA,SAAOsE,GACL,OAAO5H,KAAKsR,KAAKpB,KAAK,GAAGlQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO7F4N,EAAA1S,UAAAiP,OAAA,SAAOnK,GACL,OAAO5H,KAAKsR,KAAKnB,IAAI,GAAGnQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO5F4N,EAAA1S,UAAA2S,UAAA,SAAU7N,GACR,OAAO5H,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,OAAwB,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOhG4N,EAAA1S,UAAAsN,OAAA,SAAOvK,GACL,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,IAAI1L,IAO7C2P,EAAA1S,UAAA4S,SAAA,SAAS7P,GACP,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,IAAI1L,EAAE,eAO/C2P,EAAA1S,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1C2P,EAAA1S,UAAA6S,OAAA,SAAO9P,GACL,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,EAAE,SAO5C2P,EAAA1S,UAAAmP,KAAA,SAAKxR,EAAiB4H,EAAqBxG,EAAeC,EAAawG,EAAeQ,EAAeC,SAC7FoF,EAAS,IAAIvL,MASrB,OARgB,MAAVnC,GAAkB0N,EAAOhK,KAAK,UAAU1D,GAC1B,MAAd4H,GAAsB8F,EAAOhK,KAAK,cAAckE,GACxC,MAARxG,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,GACxB,MAARwG,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,KAO3CqH,EAAA1S,UAAA8S,QAAA,SAAQvN,EAAqBR,EAAeC,EAAgBC,EAAcO,SAClE6F,EAAS,IAAIvL,MAOrB,OANoB,MAAdyF,GAAsB8F,EAAOhK,KAAK,cAAckE,GACxC,MAARR,GAAgBsG,EAAOhK,KAAK,QAAQ0D,GAC3B,MAATC,GAAiBqG,EAAOhK,KAAK,SAAS2D,GAC/B,MAAPC,GAAeoG,EAAOhK,KAAK,OAAO4D,GAC1B,MAARO,GAAgB6F,EAAOhK,KAAK,QAAQmE,IAEnC4J,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,YAAepD,KAOnDqH,EAAA1S,UAAA+S,OAAA,SAAOhU,EAAeC,EAAawK,SAC3B6B,EAAS,IAAIvL,MAKrB,OAJc,MAARf,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,GACrB,MAAXwK,GAAmB6B,EAAOhK,KAAK,WAAWmI,IAEzC4F,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,WAAcpD,KAOlDqH,EAAA1S,UAAAgT,WAAA,SAAWjU,EAAeC,EAAawK,SAC/B6B,EAAS,IAAIvL,MAKrB,OAJc,MAARf,GAAgBsM,EAAOhK,KAAK,QAAQtC,GAC9B,MAANC,GAAcqM,EAAOhK,KAAK,MAAMrC,GACrB,MAAXwK,GAAmB6B,EAAOhK,KAAK,WAAWmI,IAEzC4F,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,eAAkBpD,4CA5H3CqH,IAAmB3E,EAAAC,SAQV,UAAQD,EAAAC,SAAAnD,2CARjB6H,GAAmBvE,QAAnBuE,GAAmBtE,uEAAnBsE,GAAmB,CAAA,MAD/BrE,EAAAA,2DAScU,EAAAA,aAAO,kDCApB,SAAAkE,EAAsC1E,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,mBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCwE,EAAAjT,UAAAQ,OAAA,SAAOsE,GACL,OAAO5H,KAAKsR,KAAKpB,KAAK,GAAGlQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO7FmO,EAAAjT,UAAAiP,OAAA,SAAOnK,GACL,OAAO5H,KAAKsR,KAAKnB,IAAI,GAAGnQ,KAAKuR,QAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO5FmO,EAAAjT,UAAAsN,OAAA,SAAOvK,GACL,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,IAAI1L,IAO7CkQ,EAAAjT,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1CkQ,EAAAjT,UAAAmP,KAAA,SAAKxR,EAAiB4H,EAAqB+C,EAAoBvC,EAA4BP,EAAeQ,EAAeC,SACjHoF,EAAS,IAAIvL,MASrB,OARgB,MAAVnC,GAAkB0N,EAAOhK,KAAK,UAAU1D,GAC1B,MAAd4H,GAAsB8F,EAAOhK,KAAK,cAAckE,GACnC,MAAb+C,GAAqB+C,EAAOhK,KAAK,aAAaiH,GACpC,MAAVvC,GAAkBsF,EAAOhK,KAAK,UAAU0E,GAChC,MAARP,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,4CA3DhC4H,IAAqBlF,EAAAC,SAQZ,UAAQD,EAAAC,SAAAnD,2CARjBoI,GAAqB9E,QAArB8E,GAAqB7E,uEAArB6E,GAAqB,CAAA,MADjC5E,EAAAA,2DAScU,EAAAA,aAAO,kDCFpB,SAAAmE,EAAsC3E,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,iBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxCyE,EAAAlT,UAAAmP,KAAA,SAAKrJ,EAAiB1G,EAA0B2G,EAA8BP,EAAeQ,EAAeC,SACpGoF,EAAS,IAAIvL,MAQrB,OAPgB,MAAVgG,GAAkBuF,EAAOhK,KAAK,UAAUyE,GAChC,MAAR1G,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC1B,MAAV2G,GAAkBsF,EAAOhK,KAAK,UAAU0E,GAChC,MAARP,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,KAO3C6H,EAAAlT,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1CmQ,EAAAlT,UAAAmT,eAAA,WACE,OAAOjW,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,iBAOtCyE,EAAAlT,UAAAoT,kBAAA,SAAkBrQ,GAChB,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,gBAAgB1L,2CAlD9CmQ,IAAmBnF,EAAAC,SAQV,UAAQD,EAAAC,SAAAnD,2CARjBqI,GAAmB/E,QAAnB+E,GAAmB9E,uEAAnB8E,GAAmB,CAAA,MAD/B7E,EAAAA,2DAScU,EAAAA,aAAO,kDCApB,SAAAsE,EAAsC9E,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,gBAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eAQxC4E,EAAArT,UAAAgM,IAAA,SAAIjJ,GACF,OAAO7F,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,IAAI1L,IAO1CsQ,EAAArT,UAAAsT,MAAA,WACE,OAAOpW,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,QAQtC4E,EAAArT,UAAAmP,KAAA,SAAKrJ,EAAiB1I,EAA0B2I,EAA6BP,EAAeQ,EAAeC,SACnGoF,EAAS,IAAIvL,MAQrB,OAPgB,MAAVgG,GAAkBuF,EAAOhK,KAAK,UAAUyE,GAChC,MAAR1I,GAAgBiO,EAAOhK,KAAK,QAAQjE,GAC1B,MAAV2I,GAAkBsF,EAAOhK,KAAK,UAAU0E,GAChC,MAARP,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAC,GAAGrE,KAAKuR,SAAcpD,4CA3ChCgI,IAAiBtF,EAAAC,SAQR,UAAQD,EAAAC,SAAAnD,2CARjBwI,GAAiBlF,QAAjBkF,GAAiBjF,uEAAjBiF,GAAiB,CAAA,MAD7BhF,EAAAA,2DAScU,EAAAA,aAAO,kDCGpB,SAAAwE,EAAsChF,EAA4BC,GAA5BtR,KAAAqR,OAAAA,EAA4BrR,KAAAsR,KAAAA,EAL1DtR,KAAAuR,QAAU,aAMhBvR,KAAKuR,QAAUvR,KAAKqR,OAAOG,IAAMxR,KAAKuR,eASxC8E,EAAAvT,UAAAwT,MAAA,SAAM1O,GACJ,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,SAA0B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOnGyO,EAAAvT,UAAAyT,aAAA,WACE,OAAOvW,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,iBAAkB,OAOzD8E,EAAAvT,UAAA0T,eAAA,SAAe5U,SACPuM,EAAS,IAAIvL,MAGrB,OAFa,MAAPhB,GAAeuM,EAAOhK,KAAK,OAAOvC,IAEjCsQ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,iBAAoBpD,KAOxDkI,EAAAvT,UAAA2T,qBAAA,SAAqB7O,GACnB,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,UAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOpGyO,EAAAvT,UAAA4P,cAAA,SAAchL,GACZ,OAAO1H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,kBAAmC,iBAAT7J,EAAoBiK,KAAKC,UAAUlK,GAAQA,IAO5G2O,EAAAvT,UAAA9B,eAAA,SAAe4G,GACb,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,mBAAoC,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO7GyO,EAAAvT,UAAA4T,oBAAA,SAAoB9O,GAClB,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,kBAAmC,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO5GyO,EAAAvT,UAAAmS,WAAA,SAAWrN,GACT,OAAO5H,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,QAAyB,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOjGyO,EAAAvT,UAAAoS,aAAA,SAAatN,GACX,OAAO5H,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,UAA2B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOnGyO,EAAAvT,UAAA6T,YAAA,WACE,OAAO3W,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,cAOtC8E,EAAAvT,UAAA8T,cAAA,SAAchP,GACZ,OAAO5H,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,kBAAmC,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAO5GyO,EAAAvT,UAAA+T,WAAA,WACE,OAAO7W,KAAKsR,KAAKpB,KAAQlQ,KAAKuR,QAAO,eAAgB,OAOvD8E,EAAAvT,UAAAgU,WAAA,WACE,OAAO9W,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,aAOtC8E,EAAAvT,UAAAiU,WAAA,SAAWnP,GACT,OAAO5H,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,WAA4B,iBAAT3J,EAAoB+J,KAAKC,UAAUhK,GAAQA,IAOpGyO,EAAAvT,UAAAkU,WAAA,WACE,OAAOhX,KAAKsR,KAAKxC,IAAO9O,KAAKuR,QAAO,aAOtC8E,EAAAvT,UAAAmU,kBAAA,SAAkBrO,EAAiB1G,EAA6BoG,EAAeQ,EAAeC,SACtFoF,EAAS,IAAIvL,MAOrB,OANgB,MAAVgG,GAAkBuF,EAAOhK,KAAK,UAAUyE,GAChC,MAAR1G,GAAgBiM,EAAOhK,KAAK,QAAQjC,GAC5B,MAARoG,GAAgB6F,EAAOhK,KAAK,QAAQmE,GAC5B,MAARQ,GAAgBqF,EAAOhK,KAAK,QAAQ2E,GACxB,MAAZC,GAAoBoF,EAAOhK,KAAK,YAAY4E,IAE3CmJ,EAAAlS,KAAKsR,MAAKxC,IAAGP,MAAA2D,EAAA7N,EAAA,CAAIrE,KAAKuR,QAAO,kBAAqBpD,KAOzDkI,EAAAvT,UAAAoU,iBAAA,SAAiBrR,GACf,OAAO7F,KAAKsR,KAAKnB,IAAOnQ,KAAKuR,QAAO,kBAAkB1L,EAAM,OAO9DwQ,EAAAvT,UAAAqU,mBAAA,SAAmBtR,GACjB,OAAO7F,KAAKsR,KAAKlB,OAAUpQ,KAAKuR,QAAO,kBAAkB1L,2CArKhDwQ,IAAWxF,EAAAC,SAQF,UAAQD,EAAAC,SAAAnD,2CARjB0I,GAAWpF,QAAXoF,GAAWnF,uEAAXmF,GAAW,CAAA,MADvBlF,EAAAA,2DAScU,EAAAA,aAAO,oCCNTuF,GAAW,CACpBhG,GACAuD,GACAE,GACAG,GACAlD,GACAuB,GACAc,GACAK,GACAc,GACAE,GACAO,GACAxD,GACAQ,GACAiD,GACAG,GACAE,kBCvBJ,SAAAgB,YACSA,EAAAC,QAAP,SAAejG,GAEb,MAAO,CACLkG,SAAUF,EACVG,UAASnT,EAAA,CACP,CAAEoT,QAAS,SAAUC,SAAUrG,GAC/B1D,IACGyJ,4CAREC,mEAAAA,KAAaM,QAAA,CAFf,CAACC,EAAAA,aAAcC,EAAAA,sFAEbR,GAAa,CAAAM,QAAA,CAFdC,EAAAA,aAAcC,EAAAA,oFAEbR,GAAa,CAAA,MAHzBS,EAAAA,eAAS,CACRH,QAAS,CAACC,EAAAA,aAAcC,EAAAA,ymLpBHxB,OAAOtK,aAAawK,QAAQ3K","sourcesContent":["\n/* \n *  Schedule time frame\n *  Times are described in ISO 8601 format (See: https://www.w3.org/TR/NOTE-datetime).\n *  The format is: YYYY-MM-DDThh:mm:ssTZD where:\n *  <ul>\n *  <li>YYYY = four-digit year</li>\n *  <li>MM   = two-digit month (01=January, etc.)</li>\n *  <li>DD   = two-digit day of month (01 through 31)</li>\n *  <li>hh   = two digits of hour (00 through 23) (am/pm NOT allowed)</li>\n *  <li>mm   = two digits of minute (00 through 59)</li>\n *  <li>ss   = two digits of second (00 through 59)\n *  <li>TZD  = time zone designator (Z for UTC or +hh:mm or -hh:mm for Timezone offset)</li>\n *  </ul>\n*/\nexport class AbsoluteTimeFrame {\n \n    // Name of time frame \n    public name: string;\n \n    // Start time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    public startTime: string;\n \n    // End time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    public endTime: string;\n \n    // Specify if this time frame is active \n    public active: boolean;\n \n    constructor(name?: string, startTime?: string, endTime?: string, active?: boolean) { \n        this.name = name;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.active = active;\n    }\n\n}\n\n\n/*\n *  Interface of AbsoluteTimeFrame\n*/\nexport interface IAbsoluteTimeFrame {\n \n    // Name of time frame \n    name?: string;\n \n    // Start time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    startTime?: string;\n \n    // End time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    endTime?: string;\n \n    // Specify if this time frame is active \n    active?: boolean;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  Account role represents the role of the user in the account\n*/\nexport class AccountRole {\n \n    // Account Id \n    public accountId: string;\n \n    // User role in the account \n    public role: AccountRoleCode;\n \n    constructor(accountId?: string, role?: AccountRoleCode) { \n        this.accountId = accountId;\n        this.role = role;\n    }\n\n}\n\n\n/*\n *  Interface of AccountRole\n*/\nexport interface IAccountRole {\n \n    // Account Id \n    accountId?: string;\n \n    // User role in the account \n    role?: AccountRoleCode;\n \n}\n","import { RecurrentActivity } from '../common/RecurrentActivity';\n\n/* \n *  Account specific settings\n*/\nexport class AccountSettings {\n \n    // Default recurrent weekly activities \n    public defaultActivities: RecurrentActivity[];\n \n    // Operational (dynamic) data retention time in days (1 - 365) \n    public retentionDays: number;\n \n    constructor(defaultActivities?: RecurrentActivity[], retentionDays?: number) { \n        this.defaultActivities = defaultActivities;\n        this.retentionDays = retentionDays;\n    }\n\n}\n\n\n/*\n *  Interface of AccountSettings\n*/\nexport interface IAccountSettings {\n \n    // Default recurrent weekly activities \n    defaultActivities?: RecurrentActivity[];\n \n    // Operational (dynamic) data retention time in days (1 - 365) \n    retentionDays?: number;\n \n}\n","\n/* \n *  Count data point\n*/\nexport class CountDataPoint {\n \n    // Datapoint time [Epoch milliseconds Timestamp] \n    public timestamp: number;\n \n    // Data point label \n    public label: string;\n \n    // Data point value \n    public value: number;\n \n    constructor(timestamp?: number, label?: string, value?: number) { \n        this.timestamp = timestamp;\n        this.label = label;\n        this.value = value;\n    }\n\n}\n\n\n/*\n *  Interface of CountDataPoint\n*/\nexport interface ICountDataPoint {\n \n    // Datapoint time [Epoch milliseconds Timestamp] \n    timestamp?: number;\n \n    // Data point label \n    label?: string;\n \n    // Data point value \n    value?: number;\n \n}\n","import { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  Login data (returned by the API after successful login)\n*/\nexport class LoginData {\n \n    // Access token to use (for the default account) \n    public accessToken: string;\n \n    // User Id \n    public userId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // Current account id and role \n    public accountRole: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    public memberStatus: MemberStatusCode;\n \n    // User name \n    public userName: string;\n \n    // User email \n    public userEmail: string;\n \n    // User type \n    public userType: UserTypeCode;\n \n    // User status \n    public userStatus: UserStatusCode;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    // Messages to show to the user on login \n    public messages: string[];\n \n    constructor(accessToken?: string, userId?: string, accountId?: string, accountRole?: AccountRoleCode, memberStatus?: MemberStatusCode, userName?: string, userEmail?: string, userType?: UserTypeCode, userStatus?: UserStatusCode, changePassword?: boolean, messages?: string[]) { \n        this.accessToken = accessToken;\n        this.userId = userId;\n        this.accountId = accountId;\n        this.accountRole = accountRole;\n        this.memberStatus = memberStatus;\n        this.userName = userName;\n        this.userEmail = userEmail;\n        this.userType = userType;\n        this.userStatus = userStatus;\n        this.changePassword = changePassword;\n        this.messages = messages;\n    }\n\n}\n\n\n/*\n *  Interface of LoginData\n*/\nexport interface ILoginData {\n \n    // Access token to use (for the default account) \n    accessToken?: string;\n \n    // User Id \n    userId?: string;\n \n    // Account Id \n    accountId?: string;\n \n    // Current account id and role \n    accountRole?: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    memberStatus?: MemberStatusCode;\n \n    // User name \n    userName?: string;\n \n    // User email \n    userEmail?: string;\n \n    // User type \n    userType?: UserTypeCode;\n \n    // User status \n    userStatus?: UserStatusCode;\n \n    // User must change password on next login \n    changePassword?: boolean;\n \n    // Messages to show to the user on login \n    messages?: string[];\n \n}\n","\n/* \n *  Login parameters data model\n*/\nexport class LoginParams {\n \n    // User email \n    public email: string;\n \n    // User password \n    public password: string;\n \n    // Access token - in case of re-login with existing token \n    public accessToken: string;\n \n    constructor(email?: string, password?: string, accessToken?: string) { \n        this.email = email;\n        this.password = password;\n        this.accessToken = accessToken;\n    }\n\n}\n\n\n/*\n *  Interface of LoginParams\n*/\nexport interface ILoginParams {\n \n    // User email \n    email?: string;\n \n    // User password \n    password?: string;\n \n    // Access token - in case of re-login with existing token \n    accessToken?: string;\n \n}\n","import { UserGenderCode } from '../enums/UserGenderCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  Member registration data model\n*/\nexport class MemberRegistration {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // User gender \n    public gender: UserGenderCode;\n \n    // Default account Id \n    public accountId: string;\n \n    // List of accounts and roles the user has access to \n    public accountRole: AccountRoleCode;\n \n    // Temporary password (leave empty for system generated password) \n    public tempPassword: string;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    // Flag to send email verification to the user \n    public verifyByEmail: boolean;\n \n    constructor(name?: string, email?: string, mobile?: string, gender?: UserGenderCode, accountId?: string, accountRole?: AccountRoleCode, tempPassword?: string, changePassword?: boolean, verifyByEmail?: boolean) { \n        this.name = name;\n        this.email = email;\n        this.mobile = mobile;\n        this.gender = gender;\n        this.accountId = accountId;\n        this.accountRole = accountRole;\n        this.tempPassword = tempPassword;\n        this.changePassword = changePassword;\n        this.verifyByEmail = verifyByEmail;\n    }\n\n}\n\n\n/*\n *  Interface of MemberRegistration\n*/\nexport interface IMemberRegistration {\n \n    // User name \n    name?: string;\n \n    // User email \n    email?: string;\n \n    // User mobile phone number (for notification and validation) \n    mobile?: string;\n \n    // User gender \n    gender?: UserGenderCode;\n \n    // Default account Id \n    accountId?: string;\n \n    // List of accounts and roles the user has access to \n    accountRole?: AccountRoleCode;\n \n    // Temporary password (leave empty for system generated password) \n    tempPassword?: string;\n \n    // User must change password on next login \n    changePassword?: boolean;\n \n    // Flag to send email verification to the user \n    verifyByEmail?: boolean;\n \n}\n","import { DayOfWeekCode } from '../enums/DayOfWeekCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  Recurrent activity\n*/\nexport class RecurrentActivity {\n \n    // Day of week - based on ISO8601 \n    public dayOfWeek: DayOfWeekCode;\n \n    // Start time [00:00 Account Timezone] \n    public startTime: string;\n \n    // End time [00:00 Account Timezone] \n    public endTime: string;\n \n    // Name of the activity \n    public name: string;\n \n    // Activity is restricted to specific resource type \n    public resourceFilter: ResourceTypeMask[];\n \n    // Activity is restricted to specific role (members, para, team) \n    public roleFilter: AccountRoleCode[];\n \n    // Max participants in the activity \n    public limit: number;\n \n    constructor(dayOfWeek?: DayOfWeekCode, startTime?: string, endTime?: string, name?: string, resourceFilter?: ResourceTypeMask[], roleFilter?: AccountRoleCode[], limit?: number) { \n        this.dayOfWeek = dayOfWeek;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.name = name;\n        this.resourceFilter = resourceFilter;\n        this.roleFilter = roleFilter;\n        this.limit = limit;\n    }\n\n}\n\n\n/*\n *  Interface of RecurrentActivity\n*/\nexport interface IRecurrentActivity {\n \n    // Day of week - based on ISO8601 \n    dayOfWeek?: DayOfWeekCode;\n \n    // Start time [00:00 Account Timezone] \n    startTime?: string;\n \n    // End time [00:00 Account Timezone] \n    endTime?: string;\n \n    // Name of the activity \n    name?: string;\n \n    // Activity is restricted to specific resource type \n    resourceFilter?: ResourceTypeMask[];\n \n    // Activity is restricted to specific role (members, para, team) \n    roleFilter?: AccountRoleCode[];\n \n    // Max participants in the activity \n    limit?: number;\n \n}\n","import { DayOfWeekCode } from '../enums/DayOfWeekCode';\n\n/* \n *  Schedule recurrent time frame\n*/\nexport class RecurrentTimeFrame {\n \n    // Day of week - based on ISO8601 \n    public dayOfWeek: DayOfWeekCode;\n \n    // Start time [number of minutes start from 00:00] \n    public startTime: number;\n \n    // End time [number of minutes start from 00:00] \n    public endTime: number;\n \n    // Name of the time frame \n    public name: string;\n \n    constructor(dayOfWeek?: DayOfWeekCode, startTime?: number, endTime?: number, name?: string) { \n        this.dayOfWeek = dayOfWeek;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.name = name;\n    }\n\n}\n\n\n/*\n *  Interface of RecurrentTimeFrame\n*/\nexport interface IRecurrentTimeFrame {\n \n    // Day of week - based on ISO8601 \n    dayOfWeek?: DayOfWeekCode;\n \n    // Start time [number of minutes start from 00:00] \n    startTime?: number;\n \n    // End time [number of minutes start from 00:00] \n    endTime?: number;\n \n    // Name of the time frame \n    name?: string;\n \n}\n","\n/* \n *  Key Value string-int tuple\n*/\nexport class StringIntValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Int Value of tuple \n    public value: number;\n \n    constructor(key?: string, value?: number) { \n        this.key = key;\n        this.value = value;\n    }\n\n}\n\n\n/*\n *  Interface of StringIntValue\n*/\nexport interface IStringIntValue {\n \n    // Key of tuple \n    key?: string;\n \n    // Int Value of tuple \n    value?: number;\n \n}\n","\n/* \n *  Key Value string tuple\n*/\nexport class StringKeyValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: string;\n \n    constructor(key?: string, value?: string) { \n        this.key = key;\n        this.value = value;\n    }\n\n}\n\n\n/*\n *  Interface of StringKeyValue\n*/\nexport interface IStringKeyValue {\n \n    // Key of tuple \n    key?: string;\n \n    // Value of tuple \n    value?: string;\n \n}\n","\n/* \n *  Time frame (for search and reports)\n*/\nexport class TimeFrame {\n \n    // Start time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    constructor(from?: number, to?: number) { \n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n/*\n *  Interface of TimeFrame\n*/\nexport interface ITimeFrame {\n \n    // Start time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    to?: number;\n \n}\n","import { Account } from '../entities/Account';\nimport { LoginData } from '../common/LoginData';\nimport { FeatureCode } from '../enums/FeatureCode';\n\n/* \n *  User Account info (returned by switch-account method)\n*/\nexport class UserAccountInfo {\n \n    // Account data \n    public account: Account;\n \n    // Login data \n    public loginData: LoginData;\n \n    // List of features enabled for this account \n    public features: FeatureCode[];\n \n    constructor(account?: Account, loginData?: LoginData, features?: FeatureCode[]) { \n        this.account = account;\n        this.loginData = loginData;\n        this.features = features;\n    }\n\n}\n\n\n/*\n *  Interface of UserAccountInfo\n*/\nexport interface IUserAccountInfo {\n \n    // Account data \n    account?: Account;\n \n    // Login data \n    loginData?: LoginData;\n \n    // List of features enabled for this account \n    features?: FeatureCode[];\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  User invitation data model - used by account admin to invite user to the account\n*/\nexport class UserInvitation {\n \n    // User email \n    public email: string;\n \n    // User role in the account \n    public role: AccountRoleCode;\n \n    constructor(email?: string, role?: AccountRoleCode) { \n        this.email = email;\n        this.role = role;\n    }\n\n}\n\n\n/*\n *  Interface of UserInvitation\n*/\nexport interface IUserInvitation {\n \n    // User email \n    email?: string;\n \n    // User role in the account \n    role?: AccountRoleCode;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n/* \n *  User registration data model\n*/\nexport class UserRegistration {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // Default account Id \n    public accountId: string;\n \n    // List of accounts and roles the user has access to \n    public accountRole: AccountRoleCode;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // Temporary password (leave empty for system generated password) \n    public tempPassword: string;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    // Flag to send email verification to the user \n    public verifyByEmail: boolean;\n \n    // User description \n    public description: string;\n \n    constructor(name?: string, email?: string, mobile?: string, accountId?: string, accountRole?: AccountRoleCode, type?: UserTypeCode, tempPassword?: string, changePassword?: boolean, verifyByEmail?: boolean, description?: string) { \n        this.name = name;\n        this.email = email;\n        this.mobile = mobile;\n        this.accountId = accountId;\n        this.accountRole = accountRole;\n        this.type = type;\n        this.tempPassword = tempPassword;\n        this.changePassword = changePassword;\n        this.verifyByEmail = verifyByEmail;\n        this.description = description;\n    }\n\n}\n\n\n/*\n *  Interface of UserRegistration\n*/\nexport interface IUserRegistration {\n \n    // User name \n    name?: string;\n \n    // User email \n    email?: string;\n \n    // User mobile phone number (for notification and validation) \n    mobile?: string;\n \n    // Default account Id \n    accountId?: string;\n \n    // List of accounts and roles the user has access to \n    accountRole?: AccountRoleCode;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    type?: UserTypeCode;\n \n    // Temporary password (leave empty for system generated password) \n    tempPassword?: string;\n \n    // User must change password on next login \n    changePassword?: boolean;\n \n    // Flag to send email verification to the user \n    verifyByEmail?: boolean;\n \n    // User description \n    description?: string;\n \n}\n","\n/* \n *  Weight Range\n*/\nexport class WeightRange {\n \n    // Minimum weight [Kg] \n    public min: number;\n \n    // Maximum weight [Kg] \n    public max: number;\n \n    constructor(min?: number, max?: number) { \n        this.min = min;\n        this.max = max;\n    }\n\n}\n\n\n/*\n *  Interface of WeightRange\n*/\nexport interface IWeightRange {\n \n    // Minimum weight [Kg] \n    min?: number;\n \n    // Maximum weight [Kg] \n    max?: number;\n \n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","/* \n   Account role code (represent role of user in the account) \n*/\nexport enum AccountRoleCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account administrator can perform all operations [1] \n    ADMIN = 1,\n \n    // Part of a club staff [2] \n    STAFF = 2,\n \n    // Club Member [4] \n    MEMBER = 4,\n \n    // Olympic team [8] \n    TEAM = 8,\n \n    // Paralympic team [16] \n    PARA = 16,\n \n    // Club guest [32] \n    GUEST = 32,\n \n}","/* \n   Account status code \n*/\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account [1] \n    ACTIVE = 1,\n \n    // Suspended (non-active) account [2] \n    SUSPENDED = 2,\n \n    // Deleted account [3] \n    DELETED = 3,\n \n}","/* \n   Account type code \n*/\nexport enum AccountTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Demo account for Tests and Demos [1] \n    DEMO = 1,\n \n    // Trial account for pilots [2] \n    TRIAL = 2,\n \n    // Active account for customer [3] \n    CUSTOMER = 3,\n \n}","/* \n   Daily activity status code \n*/\nexport enum ActivityStatusCode {\n \n    // Undefined - No booking in this activity [0] \n    UNDEFINED = 0,\n \n    // Some booking requests approved, not all [1] \n    PARTIAL = 1,\n \n    // All booking requests approved [2] \n    FULL = 2,\n \n}","/* \n   Booking status code \n*/\nexport enum BookingStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Pending booking request [1] \n    PENDING = 1,\n \n    // Approved booking [2] \n    APPROVED = 2,\n \n    // Completed booking [3] \n    COMPLETED = 3,\n \n    // User absence from booking [4] \n    ABSENCE = 4,\n \n    // User was involved in an accident [5] \n    ACCIDENT = 5,\n \n}","/* \n   Day of week code \n*/\nexport enum DayOfWeekCode {\n \n    // Sunday [0] \n    SUN = 0,\n \n    // Monday [1] \n    MON = 1,\n \n    // Tuesday [2] \n    TUE = 2,\n \n    // Wednesday [3] \n    WED = 3,\n \n    // Thursday [4] \n    THU = 4,\n \n    // Friday [5] \n    FRI = 5,\n \n    // Saturday [6] \n    SAT = 6,\n \n}","/* \n   Entity type code (represent entity type in the system) \n*/\nexport enum EntityTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account [1] \n    ACCOUNT = 1,\n \n    // User [2] \n    USER = 2,\n \n    // API Key [3] \n    API_KEY = 3,\n \n    // Audit Log [4] \n    AUDIT_LOG = 4,\n \n    // Booking [5] \n    BOOKING = 5,\n \n    // Feature [6] \n    FEATURE = 6,\n \n    // Features Group [7] \n    FEATURES_GROUP = 7,\n \n    // Incident [8] \n    INCIDENT = 8,\n \n    // Booking Placement [9] \n    PLACEMENT = 9,\n \n    // Club Resource [10] \n    RESOURCE = 10,\n \n}","/* \n   Feature codes \n*/\nexport enum FeatureCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Admin module [1] \n    MODULE_ADMIN = 1,\n \n    // System admin module [2] \n    MODULE_SYSADMIN = 2,\n \n}","/* \n   Kayak type code \n*/\nexport enum KayakTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Ocean Kayak [2 + 1024] \n    OCEAN = 1026,\n \n    // Double Ocean Kayak [2 + 2048] \n    OCEAN_X2 = 2050,\n \n}","/* \n   Member status code \n*/\nexport enum MemberStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Member is registered and pending approval [1] \n    PENDING = 1,\n \n    // Active member in the account [2] \n    ACTIVE = 2,\n \n    // Frozen member (not active) [3] \n    FROZEN = 3,\n \n}","/* \n   Account type code \n*/\nexport enum NotificationTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Message (icon: email) [1] \n    MESSAGE = 1,\n \n    // Warning (icon: warning) [2] \n    WARNING = 2,\n \n    // Congrats (icon: local_florist) [3] \n    CONGRATS = 3,\n \n}","/* \n   Placement status code \n*/\nexport enum PlacementStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Partial [1] \n    PARTIAL = 1,\n \n    // Complete [2] \n    COMPLETE = 2,\n \n    // Approved [3] \n    APPROVED = 3,\n \n}","/* \n   Resource class code (represent resource in the system) \n*/\nexport enum ResourceClassCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Rowing Boat [1024] \n    RBOAT = 1024,\n \n    // Kayak [2048] \n    KAYAK = 2048,\n \n}","/* \n   Resource status code \n*/\nexport enum ResourceStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Available [1] \n    AVAILABLE = 1,\n \n    // Non-available [2] \n    NONAVAILABLE = 2,\n \n}","/* \n   General Resource Type (Attributes bit mask) \n*/\nexport enum ResourceTypeMask {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Rowing Boat [1] \n    RBOAT = 1,\n \n    // Kayak [2] \n    KAYAK = 2,\n \n    // Sculling (2 oars) [4] \n    SCULL = 4,\n \n    // Need Cox [8] \n    COX = 8,\n \n    // Wide [16] \n    WIDE = 16,\n \n    // For competition [32] \n    COMP = 32,\n \n    // For para-olympic [64] \n    PARA = 64,\n \n    // Coastal (use in sea) [128] \n    COASTAL = 128,\n \n    // Single [1024] \n    P1 = 1024,\n \n    // Double [2048] \n    P2 = 2048,\n \n    // Quad [4096] \n    P4 = 4096,\n \n    // Eight [8192] \n    P8 = 8192,\n \n}","/* \n   Rowing boat type code \n*/\nexport enum RowingBoatTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Sculling 1X [1 + 4 + 1024] \n    SCULL_1X = 1029,\n \n    // Sculling 1X Wide [1 + 4 + 1024 + 16] \n    SCULL_1X_WIDE = 1045,\n \n    // Sculling 1X Competition [1 + 4 + 1024 + 32] \n    SCULL_1X_COMP = 1061,\n \n    // Sculling 1X Para Olympic [1 + 4 + 1024 + 64] \n    SCULL_1X_PARA = 1093,\n \n    // Sculling 2X [1 + 4 + 2048] \n    SCULL_2X = 2053,\n \n    // Sculling 2X Wide [1 + 4 + 2048 + 16] \n    SCULL_2X_WIDE = 2069,\n \n    // Sculling 2X Competition [1 + 4 + 2048 + 16 + 32] \n    SCULL_2X_COMP = 2101,\n \n    // Sculling 2X Para Olympic [1 + 4 + 2048 + 16 + 64] \n    SCULL_2X_PARA = 2133,\n \n    // Sweeping 2- Coxless Pair [1 + 2048] \n    SWEEP_2_COXLESS = 2049,\n \n    // Coastal 2X [1 + 4 + 8 + 128 + 2048] \n    COASTAL_2X = 2189,\n \n    // Sculling 4X Quad [1 + 4 + 4096] \n    SCULL_4X = 4101,\n \n    // Sculling 4X Quad with cox [1 + 4 + 8 + 4096] \n    SCULL_4X_COX = 4109,\n \n    // Sweeping 4- Coxless Quad [1 + 4096] \n    SWEEP_4_COXLESS = 4097,\n \n    // Sculling 4X Competition [1 + 4 + 32 + 4096] \n    SCULL_4X_COMP = 4133,\n \n    // Sculling 4X Para Olympic [1 + 4 + 64 + 4096] \n    SCULL_4X_PARA = 4165,\n \n    // Coastal 4X with cox [1 + 4 + 8 + 128 + 4096] \n    COASTAL_4X_COX = 4237,\n \n    // Sweeping 8 - with cox [1 + 8192] \n    SWEEP_8_COX = 8193,\n \n    // Sculling 8 - with cox [1 + 8 + 8192] \n    SCULL_8X_COX = 8201,\n \n}","/* \n   Time unit interval \n*/\nexport enum TimeUnitCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Second interval [1] \n    SECOND = 1,\n \n    // Minute interval [2] \n    MINUTE = 2,\n \n    // Hour interval [3] \n    HOUR = 3,\n \n    // Day interval [4] \n    DAY = 4,\n \n    // Week interval [5] \n    WEEK = 5,\n \n    // Month interval [6] \n    MONTH = 6,\n \n}","/* \n   User gender code \n*/\nexport enum UserGenderCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Male [1] \n    MALE = 1,\n \n    // Female [2] \n    FEMALE = 2,\n \n}","/* \n   User status code \n*/\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [3] \n    BLOCKED = 3,\n \n    // Suspended user (about to be deleted) [4] \n    SUSPENDED = 4,\n \n}","/* \n   User type code \n*/\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // Account user - has access to specific accounts with role based access control [4] \n    USER = 4,\n \n    // Account service - to be used by other systems to perform actions using the API (can't login as a user to the portal)' [5]` \n    SERVICE = 5,\n \n}","\n/* \n *  Base entity includes common fields for all entities (persistence objects) in the system: id, create and update time\n*/\nexport class BaseEntity {\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n    constructor(id?: string, createdOn?: number, updatedOn?: number) { \n        this.id = id;\n        this.createdOn = createdOn;\n        this.updatedOn = updatedOn;\n    }\n\n}\n\n\n/*\n *  Interface of BaseEntity\n*/\nexport interface IBaseEntity {\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { AccountSettings } from '../common/AccountSettings';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Account entity in the system represents a club\n*/\nexport class Account extends BaseEntity {\n \n    // Account name \n    public name: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    public type: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    public status: AccountStatusCode;\n \n    // When the account was suspended [Epoch milliseconds Timestamp] second inline field documentation \n    public suspendedOn: number;\n \n    // List of associated account groups (for feature toggle) \n    public groups: string[];\n \n    // Account timezone (IANA format, default is UTC) \n    public timezone: string;\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    public expiredOn: number;\n \n    // Account description \n    public description: string;\n \n    // If true, no approval for resource allocation by the account admin is required \n    public autoApprove: boolean;\n \n    // Account specific settings \n    public settings: AccountSettings;\n \n    // Resource class managed in the account (boat, kayak...) \n    public resourceClass: ResourceClassCode;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Account\n*/\nexport interface IAccount extends IBaseEntity {\n \n    // Account name \n    name?: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    type?: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    status?: AccountStatusCode;\n \n    // When the account was suspended [Epoch milliseconds Timestamp] second inline field documentation \n    suspendedOn?: number;\n \n    // List of associated account groups (for feature toggle) \n    groups?: string[];\n \n    // Account timezone (IANA format, default is UTC) \n    timezone?: string;\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    expiredOn?: number;\n \n    // Account description \n    description?: string;\n \n    // If true, no approval for resource allocation by the account admin is required \n    autoApprove?: boolean;\n \n    // Account specific settings \n    settings?: AccountSettings;\n \n    // Resource class managed in the account (boat, kayak...) \n    resourceClass?: ResourceClassCode;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { ActivityStatusCode } from '../enums/ActivityStatusCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Daily account activities entity\n*/\nexport class Activity extends BaseEntity {\n \n    // Activity name \n    public name: string;\n \n    // Start time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Status of booking requests \n    public status: ActivityStatusCode;\n \n    // Activity is restricted to specific resource types \n    public resourceFilter: ResourceTypeMask[];\n \n    // Activity is restricted to specific roles (members, para, team) \n    public roleFilter: AccountRoleCode[];\n \n    // Message for the activity \n    public message: string;\n \n    // Max participants in the activity \n    public limit: number;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Activity\n*/\nexport interface IActivity extends IBaseEntity {\n \n    // Activity name \n    name?: string;\n \n    // Start time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Status of booking requests \n    status?: ActivityStatusCode;\n \n    // Activity is restricted to specific resource types \n    resourceFilter?: ResourceTypeMask[];\n \n    // Activity is restricted to specific roles (members, para, team) \n    roleFilter?: AccountRoleCode[];\n \n    // Message for the activity \n    message?: string;\n \n    // Max participants in the activity \n    limit?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { Activity } from '../entities/Activity';\nimport { Booking } from '../entities/Booking';\n\n/* \n *  Activity Booking Group\n *  Group list of bookings by activity\n*/\nexport class ActivityBookingGroup {\n \n    // Activity \n    public activity: Activity;\n \n    // List of bookings in the activity \n    public bookings: Booking[];\n \n    constructor(activity?: Activity, bookings?: Booking[]) { \n        this.activity = activity;\n        this.bookings = bookings;\n    }\n\n}\n\n\n/*\n *  Interface of ActivityBookingGroup\n*/\nexport interface IActivityBookingGroup {\n \n    // Activity \n    activity?: Activity;\n \n    // List of bookings in the activity \n    bookings?: Booking[];\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Actual activity for booking\n*/\nexport class Actual extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Booking Id \n    public bookingId: string;\n \n    // User Id who registered for booking \n    public userId: string;\n \n    // User name (for display only) \n    public userName: string;\n \n    // Resource Id \n    public resourceId: string;\n \n    // Resource name (for display only) \n    public resourceName: string;\n \n    // Actual Duration (in minutes) \n    public duration: number;\n \n    // Actual Distance (in meters) \n    public distance: number;\n \n    // User missed the booking \n    public isMissing: boolean;\n \n    // Why the user missed the booking \n    public reason: string;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Actual\n*/\nexport interface IActual extends IBaseEntity {\n \n    // Account Id \n    accountId?: string;\n \n    // Booking Id \n    bookingId?: string;\n \n    // User Id who registered for booking \n    userId?: string;\n \n    // User name (for display only) \n    userName?: string;\n \n    // Resource Id \n    resourceId?: string;\n \n    // Resource name (for display only) \n    resourceName?: string;\n \n    // Actual Duration (in minutes) \n    duration?: number;\n \n    // Actual Distance (in meters) \n    distance?: number;\n \n    // User missed the booking \n    isMissing?: boolean;\n \n    // Why the user missed the booking \n    reason?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { StringKeyValue } from '../common/StringKeyValue';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  API Key is used per application (e.g. Portal, Mobile App) or service to identify the consumer.\n *  The access to sets of REST endpoints is restricted according the API key.\n *  API key also dictates the default session TTL per application (e.g. 20 minutes for Portal or Console, 30 days for Mobile app)\n *  The application/system name is the Entity Id, the API key itself is not stored in the DB but generated on the fly.\n*/\nexport class ApiKey extends BaseEntity {\n \n    // The API Key (this value is auto generated and not stored in the DB) \n    public key: string;\n \n    // Default session token TTL (in minutes), 0 means no TTL \n    public ttl: number;\n \n    // Access Control List key value pair - the key is the REST resource name, the value is subset of CRUD (Create | Read |Update |Delete) \n    public acl: StringKeyValue[];\n \n    // Key version (for key rotation) \n    public version: number;\n \n    // Flag to indicate if this a system key or user defined key \n    public isSystemKey: boolean;\n \n    // Flag to indicate if the key is enabled \n    public isEnabled: boolean;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of ApiKey\n*/\nexport interface IApiKey extends IBaseEntity {\n \n    // The API Key (this value is auto generated and not stored in the DB) \n    key?: string;\n \n    // Default session token TTL (in minutes), 0 means no TTL \n    ttl?: number;\n \n    // Access Control List key value pair - the key is the REST resource name, the value is subset of CRUD (Create | Read |Update |Delete) \n    acl?: StringKeyValue[];\n \n    // Key version (for key rotation) \n    version?: number;\n \n    // Flag to indicate if this a system key or user defined key \n    isSystemKey?: boolean;\n \n    // Flag to indicate if the key is enabled \n    isEnabled?: boolean;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { EntityTypeCode } from '../enums/EntityTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Audit Log entry - represents a single action done by user\n*/\nexport class AuditLog extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // User Id \n    public userId: string;\n \n    // User role in the account when the action was performed \n    public userRole: AccountRoleCode;\n \n    // User name when the action was performed \n    public userName: string;\n \n    // Action that was performed \n    public action: string;\n \n    // Changed item type \n    public itemType: EntityTypeCode;\n \n    // Changed item Id \n    public itemId: string;\n \n    // Item Name \n    public itemName: string;\n \n    // Item value before change [Json] \n    public beforeChange: string;\n \n    // Item delta after change [Json] \n    public afterChange: string;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of AuditLog\n*/\nexport interface IAuditLog extends IBaseEntity {\n \n    // Account Id \n    accountId?: string;\n \n    // User Id \n    userId?: string;\n \n    // User role in the account when the action was performed \n    userRole?: AccountRoleCode;\n \n    // User name when the action was performed \n    userName?: string;\n \n    // Action that was performed \n    action?: string;\n \n    // Changed item type \n    itemType?: EntityTypeCode;\n \n    // Changed item Id \n    itemId?: string;\n \n    // Item Name \n    itemName?: string;\n \n    // Item value before change [Json] \n    beforeChange?: string;\n \n    // Item delta after change [Json] \n    afterChange?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { BookingStatusCode } from '../enums/BookingStatusCode';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Booking\n *  A booking is a pending request to book a resource for specific time for user(s), once it is approved, it becomes a placement\n*/\nexport class Booking extends BaseEntity {\n \n    // Activity id associated with this booking request \n    public activityId: string;\n \n    // Activity name associated with this booking request \n    public activityName: string;\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    public placementOn: number;\n \n    // Activity end time [Epoch milliseconds Timestamp] \n    public placementTo: number;\n \n    // Booking for specific resource \n    public resourceId: string;\n \n    // Resource name (for display only) \n    public resourceName: string;\n \n    // User Id who requested the booking \n    public requestedBy: string;\n \n    // User name (for display only) \n    public requestedByName: string;\n \n    // User Ids registered for the placement \n    public requestedFor: string[];\n \n    // Users name (for display only) \n    public requestedForNames: string[];\n \n    // User Ids who actually participated the placement \n    public participants: string[];\n \n    // Resource type \n    public resourceType: ResourceTypeMask;\n \n    // When the placement was approved [Epoch milliseconds Timestamp] \n    public approvedOn: number;\n \n    // Booking status \n    public status: BookingStatusCode;\n \n    // Booking for a private resource \n    public private: boolean;\n \n    // Actual Duration (in minutes) \n    public duration: number;\n \n    // Actual Distance (in meters) \n    public distance: number;\n \n    // General notes (mainly for accident) \n    public notes: string;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Booking\n*/\nexport interface IBooking extends IBaseEntity {\n \n    // Activity id associated with this booking request \n    activityId?: string;\n \n    // Activity name associated with this booking request \n    activityName?: string;\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    placementOn?: number;\n \n    // Activity end time [Epoch milliseconds Timestamp] \n    placementTo?: number;\n \n    // Booking for specific resource \n    resourceId?: string;\n \n    // Resource name (for display only) \n    resourceName?: string;\n \n    // User Id who requested the booking \n    requestedBy?: string;\n \n    // User name (for display only) \n    requestedByName?: string;\n \n    // User Ids registered for the placement \n    requestedFor?: string[];\n \n    // Users name (for display only) \n    requestedForNames?: string[];\n \n    // User Ids who actually participated the placement \n    participants?: string[];\n \n    // Resource type \n    resourceType?: ResourceTypeMask;\n \n    // When the placement was approved [Epoch milliseconds Timestamp] \n    approvedOn?: number;\n \n    // Booking status \n    status?: BookingStatusCode;\n \n    // Booking for a private resource \n    private?: boolean;\n \n    // Actual Duration (in minutes) \n    duration?: number;\n \n    // Actual Distance (in meters) \n    distance?: number;\n \n    // General notes (mainly for accident) \n    notes?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { Booking } from '../entities/Booking';\n\n/* \n *  Booking Group\n *  Group list of bookings by time\n*/\nexport class BookingGroup {\n \n    // Time for grouping [Epoch milliseconds Timestamp] \n    public timeGroup: number;\n \n    // List of bookings in the group \n    public bookings: Booking[];\n \n    constructor(timeGroup?: number, bookings?: Booking[]) { \n        this.timeGroup = timeGroup;\n        this.bookings = bookings;\n    }\n\n}\n\n\n/*\n *  Interface of BookingGroup\n*/\nexport interface IBookingGroup {\n \n    // Time for grouping [Epoch milliseconds Timestamp] \n    timeGroup?: number;\n \n    // List of bookings in the group \n    bookings?: Booking[];\n \n}\n","import { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Booking request\n *  A booking is a pending request to book a resource for specific time for user(s), once it is approved, it becomes a placement\n*/\nexport class BookingRequest extends BaseEntity {\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    public placementOn: number;\n \n    // Duration (in minutes) \n    public duration: number;\n \n    // User Id who requested the booking \n    public requestedBy: string;\n \n    // List of User Ids for the placement \n    public requestedFor: string[];\n \n    // Booking for specific resource \n    public resourceId: string;\n \n    // Resource type \n    public resourceType: ResourceTypeMask;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of BookingRequest\n*/\nexport interface IBookingRequest extends IBaseEntity {\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    placementOn?: number;\n \n    // Duration (in minutes) \n    duration?: number;\n \n    // User Id who requested the booking \n    requestedBy?: string;\n \n    // List of User Ids for the placement \n    requestedFor?: string[];\n \n    // Booking for specific resource \n    resourceId?: string;\n \n    // Resource type \n    resourceType?: ResourceTypeMask;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { FeatureCode } from '../enums/FeatureCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  System functionality (feature) description\n*/\nexport class Feature extends BaseEntity {\n \n    // Feature code \n    public code: FeatureCode;\n \n    // Feature name \n    public name: string;\n \n    // Feature description \n    public description: string;\n \n    // Feature category \n    public category: string;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Feature\n*/\nexport interface IFeature extends IBaseEntity {\n \n    // Feature code \n    code?: FeatureCode;\n \n    // Feature name \n    name?: string;\n \n    // Feature description \n    description?: string;\n \n    // Feature category \n    category?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { FeatureCode } from '../enums/FeatureCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Group of features\n*/\nexport class FeaturesGroup extends BaseEntity {\n \n    // Features group name \n    public name: string;\n \n    // List of associated features \n    public features: FeatureCode[];\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of FeaturesGroup\n*/\nexport interface IFeaturesGroup extends IBaseEntity {\n \n    // Features group name \n    name?: string;\n \n    // List of associated features \n    features?: FeatureCode[];\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Incident\n*/\nexport class Incident extends BaseEntity {\n \n    // Resource Id (in the club) \n    public resourceId: string;\n \n    // List of involved users \n    public involved: string[];\n \n    // When the incident occurred [Epoch milliseconds Timestamp] \n    public occurredOn: number;\n \n    // Incident description \n    public description: string;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Incident\n*/\nexport interface IIncident extends IBaseEntity {\n \n    // Resource Id (in the club) \n    resourceId?: string;\n \n    // List of involved users \n    involved?: string[];\n \n    // When the incident occurred [Epoch milliseconds Timestamp] \n    occurredOn?: number;\n \n    // Incident description \n    description?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  User membership in an account\n*/\nexport class Member extends BaseEntity {\n \n    // User Id \n    public userId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public accountRole: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    public status: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    public memberSince: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    public expiration: number;\n \n    // Member level [1,2,3] \n    public level: number;\n \n    // Member can be cox ? \n    public isCox: boolean;\n \n    // Member can be mentor ? \n    public isMentor: boolean;\n \n    // Training time [minutes] \n    public trainingTime: number;\n \n    // Restrictions \n    public restrictions: string;\n \n    // Preferred resources for booking [ordered list] \n    public preferred: string[];\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Member\n*/\nexport interface IMember extends IBaseEntity {\n \n    // User Id \n    userId?: string;\n \n    // Account Id \n    accountId?: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    accountRole?: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    status?: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    memberSince?: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    expiration?: number;\n \n    // Member level [1,2,3] \n    level?: number;\n \n    // Member can be cox ? \n    isCox?: boolean;\n \n    // Member can be mentor ? \n    isMentor?: boolean;\n \n    // Training time [minutes] \n    trainingTime?: number;\n \n    // Restrictions \n    restrictions?: string;\n \n    // Preferred resources for booking [ordered list] \n    preferred?: string[];\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { User } from '../entities/User';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Member in an account with extended user info (for display only)\n*/\nexport class MemberUser extends BaseEntity {\n \n    // User Id \n    public userId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public accountRole: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    public status: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    public memberSince: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    public expiration: number;\n \n    // Member level [1,2,3] \n    public level: number;\n \n    // Member can be cox ? \n    public isCox: boolean;\n \n    // Member can be mentor ? \n    public isMentor: boolean;\n \n    // Training time [minutes] \n    public trainingTime: number;\n \n    // Restrictions \n    public restrictions: string;\n \n    // Preferred resources for booking [ordered list] \n    public preferred: string[];\n \n    // User Info \n    public user: User;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of MemberUser\n*/\nexport interface IMemberUser extends IBaseEntity {\n \n    // User Id \n    userId?: string;\n \n    // Account Id \n    accountId?: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    accountRole?: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    status?: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    memberSince?: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    expiration?: number;\n \n    // Member level [1,2,3] \n    level?: number;\n \n    // Member can be cox ? \n    isCox?: boolean;\n \n    // Member can be mentor ? \n    isMentor?: boolean;\n \n    // Training time [minutes] \n    trainingTime?: number;\n \n    // Restrictions \n    restrictions?: string;\n \n    // Preferred resources for booking [ordered list] \n    preferred?: string[];\n \n    // User Info \n    user?: User;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Member in an account with extended account info (for display only)\n*/\nexport class Membership extends BaseEntity {\n \n    // User Id \n    public userId: string;\n \n    // Account Id \n    public accountId: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public accountRole: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    public status: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    public memberSince: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    public expiration: number;\n \n    // Member level [1,2,3] \n    public level: number;\n \n    // Member can be cox ? \n    public isCox: boolean;\n \n    // Member can be mentor ? \n    public isMentor: boolean;\n \n    // Training time [minutes] \n    public trainingTime: number;\n \n    // Restrictions \n    public restrictions: string;\n \n    // Account Name \n    public accountName: string;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Membership\n*/\nexport interface IMembership extends IBaseEntity {\n \n    // User Id \n    userId?: string;\n \n    // Account Id \n    accountId?: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    accountRole?: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    status?: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    memberSince?: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    expiration?: number;\n \n    // Member level [1,2,3] \n    level?: number;\n \n    // Member can be cox ? \n    isCox?: boolean;\n \n    // Member can be mentor ? \n    isMentor?: boolean;\n \n    // Training time [minutes] \n    trainingTime?: number;\n \n    // Restrictions \n    restrictions?: string;\n \n    // Account Name \n    accountName?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { TimeFrame } from '../common/TimeFrame';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Notification\n*/\nexport class Notification extends BaseEntity {\n \n    // User Id \n    public userId: string;\n \n    // Timeframe for the notification to be visible [Epoch milliseconds Timestamp] \n    public notifyOn: TimeFrame;\n \n    // Message to show \n    public message: string;\n \n    // Notification type \n    public type: NotificationTypeCode;\n \n    // When the message has been seen by the user [Epoch milliseconds Timestamp] \n    public acceptedOn: number;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Notification\n*/\nexport interface INotification extends IBaseEntity {\n \n    // User Id \n    userId?: string;\n \n    // Timeframe for the notification to be visible [Epoch milliseconds Timestamp] \n    notifyOn?: TimeFrame;\n \n    // Message to show \n    message?: string;\n \n    // Notification type \n    type?: NotificationTypeCode;\n \n    // When the message has been seen by the user [Epoch milliseconds Timestamp] \n    acceptedOn?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { Resource } from '../entities/Resource';\nimport { Booking } from '../entities/Booking';\nimport { PlacementStatusCode } from '../enums/PlacementStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Placement is a structure to ap booking requests to a resource\n*/\nexport class Placement extends BaseEntity {\n \n    // Placement resource \n    public resource: Resource;\n \n    // List of bookings \n    public bookings: Booking[];\n \n    // Placement status \n    public status: PlacementStatusCode;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Placement\n*/\nexport interface IPlacement extends IBaseEntity {\n \n    // Placement resource \n    resource?: Resource;\n \n    // List of bookings \n    bookings?: Booking[];\n \n    // Placement status \n    status?: PlacementStatusCode;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { Placement } from '../entities/Placement';\nimport { Booking } from '../entities/Booking';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Planing is a set of booking request and placements\n*/\nexport class Planing extends BaseEntity {\n \n    // Activity Id \n    public activityId: string;\n \n    // Start time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // List of placements \n    public placements: Placement[];\n \n    // List of bookings \n    public bookings: Booking[];\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Planing\n*/\nexport interface IPlaning extends IBaseEntity {\n \n    // Activity Id \n    activityId?: string;\n \n    // Start time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // List of placements \n    placements?: Placement[];\n \n    // List of bookings \n    bookings?: Booking[];\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Registration\n *  A record for a user indicating if he showed up or missed the booking\n*/\nexport class Registration extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // Referenced booking Id \n    public bookingId: string;\n \n    // User Id who registered for booking \n    public userId: string;\n \n    // User name (for display only) \n    public userName: string;\n \n    // User missed the booking \n    public isMissing: boolean;\n \n    // Why the user missed the booking \n    public reason: string;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Registration\n*/\nexport interface IRegistration extends IBaseEntity {\n \n    // Account Id \n    accountId?: string;\n \n    // Referenced booking Id \n    bookingId?: string;\n \n    // User Id who registered for booking \n    userId?: string;\n \n    // User name (for display only) \n    userName?: string;\n \n    // User missed the booking \n    isMissing?: boolean;\n \n    // Why the user missed the booking \n    reason?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { WeightRange } from '../common/WeightRange';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Resource type\n*/\nexport class Resource extends BaseEntity {\n \n    // Resource Identity in the club \n    public name: string;\n \n    // Resource class \n    public resourceClass: ResourceClassCode;\n \n    // Resource type \n    public resourceType: ResourceTypeMask;\n \n    // Resource status (Available | non-available ...) \n    public status: ResourceStatusCode;\n \n    // Resource used by \n    public forUseBy: AccountRoleCode;\n \n    // Manufacturer brand \n    public brand: string;\n \n    // Minimum Maximum weight [Kg] \n    public weightRange: WeightRange;\n \n    // Description \n    public description: string;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Resource\n*/\nexport interface IResource extends IBaseEntity {\n \n    // Resource Identity in the club \n    name?: string;\n \n    // Resource class \n    resourceClass?: ResourceClassCode;\n \n    // Resource type \n    resourceType?: ResourceTypeMask;\n \n    // Resource status (Available | non-available ...) \n    status?: ResourceStatusCode;\n \n    // Resource used by \n    forUseBy?: AccountRoleCode;\n \n    // Manufacturer brand \n    brand?: string;\n \n    // Minimum Maximum weight [Kg] \n    weightRange?: WeightRange;\n \n    // Description \n    description?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { DayOfWeekCode } from '../enums/DayOfWeekCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Usage is a daily statistics about the number of participants and resource usage\n *  Id is the day Id (in the form of: YYYYMMDD000000)\n*/\nexport class Usage extends BaseEntity {\n \n    // Day of week (for distribution) \n    public weekday: DayOfWeekCode;\n \n    // Total number of participants \n    public count: number;\n \n    // Number of singles \n    public single: number;\n \n    // Number of doubles \n    public double: number;\n \n    // Number of quads \n    public quad: number;\n \n    // Number of eights \n    public eight: number;\n \n    // Number of private single boats \n    public singlePrivate: number;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Usage\n*/\nexport interface IUsage extends IBaseEntity {\n \n    // Day of week (for distribution) \n    weekday?: DayOfWeekCode;\n \n    // Total number of participants \n    count?: number;\n \n    // Number of singles \n    single?: number;\n \n    // Number of doubles \n    double?: number;\n \n    // Number of quads \n    quad?: number;\n \n    // Number of eights \n    eight?: number;\n \n    // Number of private single boats \n    singlePrivate?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { UserStatusCode } from '../enums/UserStatusCode';\nimport { UserGenderCode } from '../enums/UserGenderCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  User type\n*/\nexport class User extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // Password salt \n    public salt: string;\n \n    // Password hash \n    public hash: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // When user was last suspended [Epoch milliseconds Timestamp] \n    public suspendedOn: number;\n \n    // When user last signed in to the app [Epoch milliseconds Timestamp] \n    public lastSignIn: number;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    // When user created his password [Epoch milliseconds Timestamp] \n    public passwordChangedOn: number;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // User description \n    public description: string;\n \n    // User birthday (to determine age) [Epoch milliseconds Timestamp] \n    public birthday: number;\n \n    // User gender \n    public gender: UserGenderCode;\n \n    // User weight [Kg] \n    public weight: number;\n \n    // User Height [Cm] \n    public height: number;\n \n    // User Shoe Size [European size] \n    public shoeSize: number;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of User\n*/\nexport interface IUser extends IBaseEntity {\n \n    // User name \n    name?: string;\n \n    // User email \n    email?: string;\n \n    // User mobile phone number (for notification and validation) \n    mobile?: string;\n \n    // Password salt \n    salt?: string;\n \n    // Password hash \n    hash?: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    type?: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    status?: UserStatusCode;\n \n    // When user was last suspended [Epoch milliseconds Timestamp] \n    suspendedOn?: number;\n \n    // When user last signed in to the app [Epoch milliseconds Timestamp] \n    lastSignIn?: number;\n \n    // User must change password on next login \n    changePassword?: boolean;\n \n    // When user created his password [Epoch milliseconds Timestamp] \n    passwordChangedOn?: number;\n \n    // Default account Id \n    defaultAccount?: string;\n \n    // User description \n    description?: string;\n \n    // User birthday (to determine age) [Epoch milliseconds Timestamp] \n    birthday?: number;\n \n    // User gender \n    gender?: UserGenderCode;\n \n    // User weight [Kg] \n    weight?: number;\n \n    // User Height [Cm] \n    height?: number;\n \n    // User Shoe Size [European size] \n    shoeSize?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Verification type used to verify user with a temporary code\n*/\nexport class Verification extends BaseEntity {\n \n    // Verification code \n    public code: string;\n \n    // Verification for user id \n    public userId: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // When the verification code was sent [Epoch milliseconds Timestamp] \n    public sent: number;\n \n    // Entity Id \n    public id: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n/*\n *  Interface of Verification\n*/\nexport interface IVerification extends IBaseEntity {\n \n    // Verification code \n    code?: string;\n \n    // Verification for user id \n    userId?: string;\n \n    // User email \n    email?: string;\n \n    // User mobile phone number (for notification and validation) \n    mobile?: string;\n \n    // When the verification code was sent [Epoch milliseconds Timestamp] \n    sent?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","\n/* \n*/\nexport class AccountIdRequest {\n \n    // Account Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of AccountIdRequest\n*/\nexport interface IAccountIdRequest {\n \n    // Account Id \n    id?: string;\n \n}\n","\n/* \n *  Entity action response message returned for any create/update action on entity\n*/\nexport class ActionResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Entity key \n    public key: string;\n \n    // Additional data \n    public data: string;\n \n    constructor(code?: number, error?: string, key?: string, data?: string) { \n        this.code = code;\n        this.error = error;\n        this.key = key;\n        this.data = data;\n    }\n\n}\n\n\n/*\n *  Interface of ActionResponse\n*/\nexport interface IActionResponse {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Entity key \n    key?: string;\n \n    // Additional data \n    data?: string;\n \n}\n","\n/* \n*/\nexport class ActivityIdRequest {\n \n    // Activity Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of ActivityIdRequest\n*/\nexport interface IActivityIdRequest {\n \n    // Activity Id \n    id?: string;\n \n}\n","import { AccountSettings } from '../common/AccountSettings';\n\n/* \n*/\nexport class AdminAccountSettingsUpdateRequest {\n \n    // Account settings data \n    public body: AccountSettings;\n \n    constructor(body?: AccountSettings) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminAccountSettingsUpdateRequest\n*/\nexport interface IAdminAccountSettingsUpdateRequest {\n \n    // Account settings data \n    body?: AccountSettings;\n \n}\n","import { Activity } from '../entities/Activity';\n\n/* \n*/\nexport class AdminActivityBulkCreateRequest {\n \n    // Array of Resource data \n    public body: Activity[];\n \n    constructor(body?: Activity[]) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityBulkCreateRequest\n*/\nexport interface IAdminActivityBulkCreateRequest {\n \n    // Array of Resource data \n    body?: Activity[];\n \n}\n","\n/* \n*/\nexport class AdminActivityDefaultCreateRequest {\n \n    // Year (4 digits) \n    public year: number;\n \n    // Month (1-12) \n    public month: number;\n \n    // Day (1-31), 0 means create month activities \n    public day: number;\n \n    constructor(year?: number, month?: number, day?: number) { \n        this.year = year;\n        this.month = month;\n        this.day = day;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityDefaultCreateRequest\n*/\nexport interface IAdminActivityDefaultCreateRequest {\n \n    // Year (4 digits) \n    year?: number;\n \n    // Month (1-12) \n    month?: number;\n \n    // Day (1-31), 0 means create month activities \n    day?: number;\n \n}\n","\n/* \n*/\nexport class AdminActivityDefaultDeleteRequest {\n \n    // Year (4 digits) \n    public year: number;\n \n    // Month (1-12) \n    public month: number;\n \n    // Day (1-31), 0 means delete day activities \n    public day: number;\n \n    constructor(year?: number, month?: number, day?: number) { \n        this.year = year;\n        this.month = month;\n        this.day = day;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityDefaultDeleteRequest\n*/\nexport interface IAdminActivityDefaultDeleteRequest {\n \n    // Year (4 digits) \n    year?: number;\n \n    // Month (1-12) \n    month?: number;\n \n    // Day (1-31), 0 means delete day activities \n    day?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class AdminActivityFindFreeResourcesRequest {\n \n    // Activity Id \n    public id: string;\n \n    // Filter by resource type \n    public resType: number;\n \n    // Filter by weight \n    public weight: number;\n \n    // Filter by usage \n    public forUseBy: AccountRoleCode;\n \n    constructor(id?: string, resType?: number, weight?: number, forUseBy?: AccountRoleCode) { \n        this.id = id;\n        this.resType = resType;\n        this.weight = weight;\n        this.forUseBy = forUseBy;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityFindFreeResourcesRequest\n*/\nexport interface IAdminActivityFindFreeResourcesRequest {\n \n    // Activity Id \n    id?: string;\n \n    // Filter by resource type \n    resType?: number;\n \n    // Filter by weight \n    weight?: number;\n \n    // Filter by usage \n    forUseBy?: AccountRoleCode;\n \n}\n","\n/* \n*/\nexport class AdminActivityFindRequest {\n \n    // From time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Year \n    public year: number;\n \n    // Month \n    public month: number;\n \n    // Day \n    public day: number;\n \n    // Include total bookings per activity? \n    public total: boolean;\n \n    constructor(from?: number, to?: number, year?: number, month?: number, day?: number, total?: boolean) { \n        this.from = from;\n        this.to = to;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.total = total;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityFindRequest\n*/\nexport interface IAdminActivityFindRequest {\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Year \n    year?: number;\n \n    // Month \n    month?: number;\n \n    // Day \n    day?: number;\n \n    // Include total bookings per activity? \n    total?: boolean;\n \n}\n","import { ResourceTypeMask } from '../enums/ResourceTypeMask';\n\n/* \n*/\nexport class AdminActivityPlaningRequest {\n \n    // Activity Id \n    public id: string;\n \n    // Filter by resource type mask \n    public resourceType: ResourceTypeMask;\n \n    constructor(id?: string, resourceType?: ResourceTypeMask) { \n        this.id = id;\n        this.resourceType = resourceType;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityPlaningRequest\n*/\nexport interface IAdminActivityPlaningRequest {\n \n    // Activity Id \n    id?: string;\n \n    // Filter by resource type mask \n    resourceType?: ResourceTypeMask;\n \n}\n","\n/* \n*/\nexport class AdminBookingHistoryRequest {\n \n    // Membership Id \n    public id: string;\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // Get related year \n    public year: number;\n \n    // Get related month \n    public month: number;\n \n    // Get related day \n    public day: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    constructor(id?: string, resourceId?: string, year?: number, month?: number, day?: number, sort?: string) { \n        this.id = id;\n        this.resourceId = resourceId;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.sort = sort;\n    }\n\n}\n\n\n/*\n *  Interface of AdminBookingHistoryRequest\n*/\nexport interface IAdminBookingHistoryRequest {\n \n    // Membership Id \n    id?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // Get related year \n    year?: number;\n \n    // Get related month \n    month?: number;\n \n    // Get related day \n    day?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","import { Activity } from '../entities/Activity';\n\n/* \n*/\nexport class AdminCreateActivityRequest {\n \n    // Activity data \n    public body: Activity;\n \n    constructor(body?: Activity) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminCreateActivityRequest\n*/\nexport interface IAdminCreateActivityRequest {\n \n    // Activity data \n    body?: Activity;\n \n}\n","import { Resource } from '../entities/Resource';\n\n/* \n*/\nexport class AdminCreateResourceRequest {\n \n    // Resource data \n    public body: Resource;\n \n    constructor(body?: Resource) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminCreateResourceRequest\n*/\nexport interface IAdminCreateResourceRequest {\n \n    // Resource data \n    body?: Resource;\n \n}\n","\n/* \n*/\nexport class AdminDailyPlaningExportRequest {\n \n    // Planing day \n    public day: number;\n \n    // Report language \n    public lang: string;\n \n    constructor(day?: number, lang?: string) { \n        this.day = day;\n        this.lang = lang;\n    }\n\n}\n\n\n/*\n *  Interface of AdminDailyPlaningExportRequest\n*/\nexport interface IAdminDailyPlaningExportRequest {\n \n    // Planing day \n    day?: number;\n \n    // Report language \n    lang?: string;\n \n}\n","\n/* \n*/\nexport class AdminDailyPlaningRequest {\n \n    // Planing day \n    public day: number;\n \n    // Resource filter \n    public resFilter: string;\n \n    // User filter \n    public userFilter: string;\n \n    constructor(day?: number, resFilter?: string, userFilter?: string) { \n        this.day = day;\n        this.resFilter = resFilter;\n        this.userFilter = userFilter;\n    }\n\n}\n\n\n/*\n *  Interface of AdminDailyPlaningRequest\n*/\nexport interface IAdminDailyPlaningRequest {\n \n    // Planing day \n    day?: number;\n \n    // Resource filter \n    resFilter?: string;\n \n    // User filter \n    userFilter?: string;\n \n}\n","\n/* \n*/\nexport class AdminDailyRegistrationRequest {\n \n    // Activity day \n    public day: number;\n \n    // Filter results by user name \n    public filter: string;\n \n    // Filter results by missing only users \n    public missingOnly: boolean;\n \n    constructor(day?: number, filter?: string, missingOnly?: boolean) { \n        this.day = day;\n        this.filter = filter;\n        this.missingOnly = missingOnly;\n    }\n\n}\n\n\n/*\n *  Interface of AdminDailyRegistrationRequest\n*/\nexport interface IAdminDailyRegistrationRequest {\n \n    // Activity day \n    day?: number;\n \n    // Filter results by user name \n    filter?: string;\n \n    // Filter results by missing only users \n    missingOnly?: boolean;\n \n}\n","\n/* \n*/\nexport class AdminDailyResourcesRequest {\n \n    // Planing day \n    public day: number;\n \n    constructor(day?: number) { \n        this.day = day;\n    }\n\n}\n\n\n/*\n *  Interface of AdminDailyResourcesRequest\n*/\nexport interface IAdminDailyResourcesRequest {\n \n    // Planing day \n    day?: number;\n \n}\n","\n/* \n*/\nexport class AdminFindFreeResourcesRequest {\n \n    // Booking Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of AdminFindFreeResourcesRequest\n*/\nexport interface IAdminFindFreeResourcesRequest {\n \n    // Booking Id \n    id?: string;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\n\n/* \n*/\nexport class AdminMembersFindRequest {\n \n    // Filter by account id \n    public accountId: string;\n \n    // Filter by partial user name or email \n    public search: string;\n \n    // Filter by account role(s) \n    public role: AccountRoleCode[];\n \n    // Filter by member status(es) \n    public status: MemberStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(accountId?: string, search?: string, role?: AccountRoleCode[], status?: MemberStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId;\n        this.search = search;\n        this.role = role;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of AdminMembersFindRequest\n*/\nexport interface IAdminMembersFindRequest {\n \n    // Filter by account id \n    accountId?: string;\n \n    // Filter by partial user name or email \n    search?: string;\n \n    // Filter by account role(s) \n    role?: AccountRoleCode[];\n \n    // Filter by member status(es) \n    status?: MemberStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class AdminPlaningAssignResourceRequest {\n \n    // Booking Id \n    public id: string;\n \n    // Resource Id \n    public resourceId: string;\n \n    constructor(id?: string, resourceId?: string) { \n        this.id = id;\n        this.resourceId = resourceId;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningAssignResourceRequest\n*/\nexport interface IAdminPlaningAssignResourceRequest {\n \n    // Booking Id \n    id?: string;\n \n    // Resource Id \n    resourceId?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningDeleteActivityRequest {\n \n    // Planing day \n    public day: number;\n \n    // Activity Id to delete \n    public id: string;\n \n    constructor(day?: number, id?: string) { \n        this.day = day;\n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningDeleteActivityRequest\n*/\nexport interface IAdminPlaningDeleteActivityRequest {\n \n    // Planing day \n    day?: number;\n \n    // Activity Id to delete \n    id?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningDeleteBookingRequest {\n \n    // Planing day \n    public day: number;\n \n    // Booking Id to delete \n    public id: string;\n \n    constructor(day?: number, id?: string) { \n        this.day = day;\n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningDeleteBookingRequest\n*/\nexport interface IAdminPlaningDeleteBookingRequest {\n \n    // Planing day \n    day?: number;\n \n    // Booking Id to delete \n    id?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningMergeBookingsRequest {\n \n    // Planing day \n    public day: number;\n \n    // Source Booking Id \n    public source: string;\n \n    // Target Booking Id \n    public target: string;\n \n    constructor(day?: number, source?: string, target?: string) { \n        this.day = day;\n        this.source = source;\n        this.target = target;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningMergeBookingsRequest\n*/\nexport interface IAdminPlaningMergeBookingsRequest {\n \n    // Planing day \n    day?: number;\n \n    // Source Booking Id \n    source?: string;\n \n    // Target Booking Id \n    target?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningSplitBookingRequest {\n \n    // Planing day \n    public day: number;\n \n    // Booking Id to split \n    public id: string;\n \n    constructor(day?: number, id?: string) { \n        this.day = day;\n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningSplitBookingRequest\n*/\nexport interface IAdminPlaningSplitBookingRequest {\n \n    // Planing day \n    day?: number;\n \n    // Booking Id to split \n    id?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningUnAssignResourceRequest {\n \n    // Booking Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningUnAssignResourceRequest\n*/\nexport interface IAdminPlaningUnAssignResourceRequest {\n \n    // Booking Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class AdminReportAbsenceRequest {\n \n    // Booking Id \n    public id: string;\n \n    // List of absence user Ids \n    public userId: string[];\n \n    constructor(id?: string, userId?: string[]) { \n        this.id = id;\n        this.userId = userId;\n    }\n\n}\n\n\n/*\n *  Interface of AdminReportAbsenceRequest\n*/\nexport interface IAdminReportAbsenceRequest {\n \n    // Booking Id \n    id?: string;\n \n    // List of absence user Ids \n    userId?: string[];\n \n}\n","\n/* \n*/\nexport class AdminReportIncidentRequest {\n \n    // Booking Id \n    public id: string;\n \n    // List of involved user Ids \n    public userId: string[];\n \n    // Incident description \n    public body: string;\n \n    constructor(id?: string, userId?: string[], body?: string) { \n        this.id = id;\n        this.userId = userId;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminReportIncidentRequest\n*/\nexport interface IAdminReportIncidentRequest {\n \n    // Booking Id \n    id?: string;\n \n    // List of involved user Ids \n    userId?: string[];\n \n    // Incident description \n    body?: string;\n \n}\n","import { Resource } from '../entities/Resource';\n\n/* \n*/\nexport class AdminResourceBulkCreateRequest {\n \n    // Array of Resource data \n    public body: Resource[];\n \n    constructor(body?: Resource[]) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceBulkCreateRequest\n*/\nexport interface IAdminResourceBulkCreateRequest {\n \n    // Array of Resource data \n    body?: Resource[];\n \n}\n","import { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class AdminResourceFindRequest {\n \n    // Free text search on resource Id, Brand or description \n    public search: string;\n \n    // Filter by Resource class (UNDEFINED means no filter) \n    public resourceClass: ResourceClassCode;\n \n    // Filter by Resource type (UNDEFINED means no filter) \n    public resourceType: ResourceTypeMask;\n \n    // Filter by Resource status (UNDEFINED means no filter) \n    public status: ResourceStatusCode;\n \n    // Filter by usage (UNDEFINED means no filter) \n    public forUseBy: AccountRoleCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, resourceClass?: ResourceClassCode, resourceType?: ResourceTypeMask, status?: ResourceStatusCode, forUseBy?: AccountRoleCode, sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.resourceClass = resourceClass;\n        this.resourceType = resourceType;\n        this.status = status;\n        this.forUseBy = forUseBy;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceFindRequest\n*/\nexport interface IAdminResourceFindRequest {\n \n    // Free text search on resource Id, Brand or description \n    search?: string;\n \n    // Filter by Resource class (UNDEFINED means no filter) \n    resourceClass?: ResourceClassCode;\n \n    // Filter by Resource type (UNDEFINED means no filter) \n    resourceType?: ResourceTypeMask;\n \n    // Filter by Resource status (UNDEFINED means no filter) \n    status?: ResourceStatusCode;\n \n    // Filter by usage (UNDEFINED means no filter) \n    forUseBy?: AccountRoleCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class AdminResourceHistoryRequest {\n \n    // Resource Id \n    public id: string;\n \n    // Get related year \n    public year: number;\n \n    // Get related month \n    public month: number;\n \n    // Get related day \n    public day: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    constructor(id?: string, year?: number, month?: number, day?: number, sort?: string) { \n        this.id = id;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.sort = sort;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceHistoryRequest\n*/\nexport interface IAdminResourceHistoryRequest {\n \n    // Resource Id \n    id?: string;\n \n    // Get related year \n    year?: number;\n \n    // Get related month \n    month?: number;\n \n    // Get related day \n    day?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","import { Activity } from '../entities/Activity';\n\n/* \n*/\nexport class AdminUpdateActivityRequest {\n \n    // Activity data \n    public body: Activity;\n \n    constructor(body?: Activity) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminUpdateActivityRequest\n*/\nexport interface IAdminUpdateActivityRequest {\n \n    // Activity data \n    body?: Activity;\n \n}\n","import { Actual } from '../entities/Actual';\n\n/* \n*/\nexport class AdminUpdateRegistrationRequest {\n \n    // Actual data to update \n    public body: Actual;\n \n    constructor(body?: Actual) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminUpdateRegistrationRequest\n*/\nexport interface IAdminUpdateRegistrationRequest {\n \n    // Actual data to update \n    body?: Actual;\n \n}\n","import { Resource } from '../entities/Resource';\n\n/* \n*/\nexport class AdminUpdateResourceRequest {\n \n    // Resource data \n    public body: Resource;\n \n    constructor(body?: Resource) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of AdminUpdateResourceRequest\n*/\nexport interface IAdminUpdateResourceRequest {\n \n    // Resource data \n    body?: Resource;\n \n}\n","\n/* \n*/\nexport class BookingIdRequest {\n \n    // Booking Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of BookingIdRequest\n*/\nexport interface IBookingIdRequest {\n \n    // Booking Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class BookingRequestIdRequest {\n \n    // Booking request Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of BookingRequestIdRequest\n*/\nexport interface IBookingRequestIdRequest {\n \n    // Booking request Id \n    id?: string;\n \n}\n","\n/* \n *  Change Password request message\n*/\nexport class ChangePasswordRequest {\n \n    // User Email \n    public userEmail: string;\n \n    // Old Password \n    public oldPassword: string;\n \n    // New Password \n    public newPassword: string;\n \n    constructor(userEmail?: string, oldPassword?: string, newPassword?: string) { \n        this.userEmail = userEmail;\n        this.oldPassword = oldPassword;\n        this.newPassword = newPassword;\n    }\n\n}\n\n\n/*\n *  Interface of ChangePasswordRequest\n*/\nexport interface IChangePasswordRequest {\n \n    // User Email \n    userEmail?: string;\n \n    // Old Password \n    oldPassword?: string;\n \n    // New Password \n    newPassword?: string;\n \n}\n","\n/* \n*/\nexport class DistributionRequest {\n \n    // \n    public from: number;\n \n    // \n    public to: number;\n \n    constructor(from?: number, to?: number) { \n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n/*\n *  Interface of DistributionRequest\n*/\nexport interface IDistributionRequest {\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n}\n","\n/* \n*/\nexport class EmptyRequest {\n \n    constructor() { \n    }\n\n}\n\n\n/*\n *  Interface of EmptyRequest\n*/\nexport interface IEmptyRequest {\n \n}\n","\n/* \n*/\nexport class EmptyResponse {\n \n    constructor() { \n    }\n\n}\n\n\n/*\n *  Interface of EmptyResponse\n*/\nexport interface IEmptyResponse {\n \n}\n","\n/* \n *  Entities response message returned for read operation on multiple entities\n*/\nexport class EntitiesResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    constructor(code?: number, error?: string) { \n        this.code = code;\n        this.error = error;\n    }\n\n}\n\n\n/*\n *  Interface of EntitiesResponse\n*/\nexport interface IEntitiesResponse {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Account } from '../entities/Account';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfAccount extends EntitiesResponse {\n \n    // Account list \n    public list: Account[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfAccount\n*/\nexport interface IEntitiesResponseOfAccount extends IEntitiesResponse {\n \n    // Account list \n    list?: Account[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Activity } from '../entities/Activity';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfActivity extends EntitiesResponse {\n \n    // Activity list \n    public list: Activity[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfActivity\n*/\nexport interface IEntitiesResponseOfActivity extends IEntitiesResponse {\n \n    // Activity list \n    list?: Activity[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { ActivityBookingGroup } from '../entities/ActivityBookingGroup';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n *  EntitiesResponse<ActivityBookingGroup>\n*/\nexport class EntitiesResponseOfActivityBookingGroup extends EntitiesResponse {\n \n    // Activity booking group list \n    public list: ActivityBookingGroup[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfActivityBookingGroup\n*/\nexport interface IEntitiesResponseOfActivityBookingGroup extends IEntitiesResponse {\n \n    // Activity booking group list \n    list?: ActivityBookingGroup[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Actual } from '../entities/Actual';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n *  EntitiesResponse<Actual>\n*/\nexport class EntitiesResponseOfActual extends EntitiesResponse {\n \n    // Actual list \n    public list: Actual[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfActual\n*/\nexport interface IEntitiesResponseOfActual extends IEntitiesResponse {\n \n    // Actual list \n    list?: Actual[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Booking } from '../entities/Booking';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfBooking extends EntitiesResponse {\n \n    // Booking list \n    public list: Booking[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfBooking\n*/\nexport interface IEntitiesResponseOfBooking extends IEntitiesResponse {\n \n    // Booking list \n    list?: Booking[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { BookingGroup } from '../entities/BookingGroup';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfBookingGroup extends EntitiesResponse {\n \n    // Booking list \n    public list: BookingGroup[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfBookingGroup\n*/\nexport interface IEntitiesResponseOfBookingGroup extends IEntitiesResponse {\n \n    // Booking list \n    list?: BookingGroup[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { BookingRequest } from '../entities/BookingRequest';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfBookingRequest extends EntitiesResponse {\n \n    // Booking request list \n    public list: BookingRequest[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfBookingRequest\n*/\nexport interface IEntitiesResponseOfBookingRequest extends IEntitiesResponse {\n \n    // Booking request list \n    list?: BookingRequest[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","\n/* \n *  Entity response message returned for read operation on a single entity\n*/\nexport class EntityResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    constructor(code?: number, error?: string) { \n        this.code = code;\n        this.error = error;\n    }\n\n}\n\n\n/*\n *  Interface of EntityResponse\n*/\nexport interface IEntityResponse {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { CountDataPoint } from '../common/CountDataPoint';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntitiesResponseOfCountDataPoint extends EntityResponse {\n \n    // Resource \n    public list: CountDataPoint[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfCountDataPoint\n*/\nexport interface IEntitiesResponseOfCountDataPoint extends IEntityResponse {\n \n    // Resource \n    list?: CountDataPoint[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Membership } from '../entities/Membership';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfMembership extends EntitiesResponse {\n \n    // List of extended Membership data \n    public list: Membership[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfMembership\n*/\nexport interface IEntitiesResponseOfMembership extends IEntitiesResponse {\n \n    // List of extended Membership data \n    list?: Membership[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Notification } from '../entities/Notification';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfNotification extends EntitiesResponse {\n \n    // List of Notifications \n    public list: Notification[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfNotification\n*/\nexport interface IEntitiesResponseOfNotification extends IEntitiesResponse {\n \n    // List of Notifications \n    list?: Notification[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Placement } from '../entities/Placement';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfPlacement extends EntitiesResponse {\n \n    // Placement list \n    public list: Placement[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfPlacement\n*/\nexport interface IEntitiesResponseOfPlacement extends IEntitiesResponse {\n \n    // Placement list \n    list?: Placement[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Resource } from '../entities/Resource';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfResource extends EntitiesResponse {\n \n    // Resource list \n    public list: Resource[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfResource\n*/\nexport interface IEntitiesResponseOfResource extends IEntitiesResponse {\n \n    // Resource list \n    list?: Resource[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { StringIntValue } from '../common/StringIntValue';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfStringIntValue extends EntitiesResponse {\n \n    // Resource list \n    public list: StringIntValue[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfStringIntValue\n*/\nexport interface IEntitiesResponseOfStringIntValue extends IEntitiesResponse {\n \n    // Resource list \n    list?: StringIntValue[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { StringKeyValue } from '../common/StringKeyValue';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n *  EntitiesResponse<StringKeyValue>\n*/\nexport class EntitiesResponseOfStringKeyValue extends EntitiesResponse {\n \n    // Resources id->name list \n    public list: StringKeyValue[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfStringKeyValue\n*/\nexport interface IEntitiesResponseOfStringKeyValue extends IEntitiesResponse {\n \n    // Resources id->name list \n    list?: StringKeyValue[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Usage } from '../entities/Usage';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntitiesResponseOfUsage extends EntityResponse {\n \n    // Usage entries \n    public list: Usage[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfUsage\n*/\nexport interface IEntitiesResponseOfUsage extends IEntityResponse {\n \n    // Usage entries \n    list?: Usage[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Account } from '../entities/Account';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfAccount extends EntityResponse {\n \n    // Account \n    public entity: Account;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfAccount\n*/\nexport interface IEntityResponseOfAccount extends IEntityResponse {\n \n    // Account \n    entity?: Account;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { EntityResponse } from '../messages/EntityResponse';\nimport { AccountSettings } from '../common/AccountSettings';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfAccountSettings extends EntityResponse {\n \n    // Account settings \n    public entity: AccountSettings;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfAccountSettings\n*/\nexport interface IEntityResponseOfAccountSettings extends IEntityResponse {\n \n    // Account settings \n    entity?: AccountSettings;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Activity } from '../entities/Activity';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfActivity extends EntityResponse {\n \n    // Activity \n    public entity: Activity;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfActivity\n*/\nexport interface IEntityResponseOfActivity extends IEntityResponse {\n \n    // Activity \n    entity?: Activity;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Booking } from '../entities/Booking';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfBooking extends EntityResponse {\n \n    // Booking \n    public entity: Booking;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfBooking\n*/\nexport interface IEntityResponseOfBooking extends IEntityResponse {\n \n    // Booking \n    entity?: Booking;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfBookingRequest extends EntityResponse {\n \n    // Booking request \n    public entity: BookingRequest;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfBookingRequest\n*/\nexport interface IEntityResponseOfBookingRequest extends IEntityResponse {\n \n    // Booking request \n    entity?: BookingRequest;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { LoginData } from '../common/LoginData';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfLoginData extends EntityResponse {\n \n    // Login data \n    public entity: LoginData;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfLoginData\n*/\nexport interface IEntityResponseOfLoginData extends IEntityResponse {\n \n    // Login data \n    entity?: LoginData;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Notification } from '../entities/Notification';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfMember extends EntityResponse {\n \n    // Notification data \n    public entity: Notification;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfMember\n*/\nexport interface IEntityResponseOfMember extends IEntityResponse {\n \n    // Notification data \n    entity?: Notification;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { MemberUser } from '../entities/MemberUser';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfMemberUser extends EntityResponse {\n \n    // Extended Member data (with user info) \n    public entity: MemberUser;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfMemberUser\n*/\nexport interface IEntityResponseOfMemberUser extends IEntityResponse {\n \n    // Extended Member data (with user info) \n    entity?: MemberUser;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Placement } from '../entities/Placement';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfPlacement extends EntityResponse {\n \n    // Placement \n    public entity: Placement;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfPlacement\n*/\nexport interface IEntityResponseOfPlacement extends IEntityResponse {\n \n    // Placement \n    entity?: Placement;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { EntityResponse } from '../messages/EntityResponse';\nimport { Planing } from '../entities/Planing';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfPlaning extends EntityResponse {\n \n    // Planing \n    public entity: Planing;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfPlaning\n*/\nexport interface IEntityResponseOfPlaning extends IEntityResponse {\n \n    // Planing \n    entity?: Planing;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Resource } from '../entities/Resource';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfResource extends EntityResponse {\n \n    // Resource \n    public entity: Resource;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfResource\n*/\nexport interface IEntityResponseOfResource extends IEntityResponse {\n \n    // Resource \n    entity?: Resource;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { User } from '../entities/User';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfUser extends EntityResponse {\n \n    // User data \n    public entity: User;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfUser\n*/\nexport interface IEntityResponseOfUser extends IEntityResponse {\n \n    // User data \n    entity?: User;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { UserAccountInfo } from '../common/UserAccountInfo';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfUserAccountInfo extends EntityResponse {\n \n    // User account info \n    public entity: UserAccountInfo;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfUserAccountInfo\n*/\nexport interface IEntityResponseOfUserAccountInfo extends IEntityResponse {\n \n    // User account info \n    entity?: UserAccountInfo;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class FindNotificationsRequest {\n \n    // Free text search on message \n    public search: string;\n \n    // Filter by notification type (UNDEFINED means no filter) \n    public type: NotificationTypeCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, type?: NotificationTypeCode, sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.type = type;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of FindNotificationsRequest\n*/\nexport interface IFindNotificationsRequest {\n \n    // Free text search on message \n    search?: string;\n \n    // Filter by notification type (UNDEFINED means no filter) \n    type?: NotificationTypeCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class MemberIdRequest {\n \n    // Member Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of MemberIdRequest\n*/\nexport interface IMemberIdRequest {\n \n    // Member Id \n    id?: string;\n \n}\n","import { MemberUser } from '../entities/MemberUser';\n\n/* \n*/\nexport class MembersBulkImportRequest {\n \n    // Array of MemberUser data to import \n    public body: MemberUser[];\n \n    constructor(body?: MemberUser[]) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of MembersBulkImportRequest\n*/\nexport interface IMembersBulkImportRequest {\n \n    // Array of MemberUser data to import \n    body?: MemberUser[];\n \n}\n","\n/* \n*/\nexport class MembersCountOvertimeRequest {\n \n    // \n    public from: number;\n \n    // \n    public to: number;\n \n    constructor(from?: number, to?: number) { \n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n/*\n *  Interface of MembersCountOvertimeRequest\n*/\nexport interface IMembersCountOvertimeRequest {\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\n\n/* \n*/\nexport class MembersFindRequest {\n \n    // Filter by partial user name or email \n    public search: string;\n \n    // Filter by account role(s) \n    public role: AccountRoleCode[];\n \n    // Filter by member status(es) \n    public status: MemberStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, role?: AccountRoleCode[], status?: MemberStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.role = role;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of MembersFindRequest\n*/\nexport interface IMembersFindRequest {\n \n    // Filter by partial user name or email \n    search?: string;\n \n    // Filter by account role(s) \n    role?: AccountRoleCode[];\n \n    // Filter by member status(es) \n    status?: MemberStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","import { MemberRegistration } from '../common/MemberRegistration';\n\n/* \n*/\nexport class MembersServiceInviteRequest {\n \n    // \n    public body: MemberRegistration;\n \n    constructor(body?: MemberRegistration) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of MembersServiceInviteRequest\n*/\nexport interface IMembersServiceInviteRequest {\n \n    // \n    body?: MemberRegistration;\n \n}\n","import { Member } from '../entities/Member';\n\n/* \n*/\nexport class MembersServiceUpdateRequest {\n \n    // Member data to update \n    public body: Member;\n \n    constructor(body?: Member) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of MembersServiceUpdateRequest\n*/\nexport interface IMembersServiceUpdateRequest {\n \n    // Member data to update \n    body?: Member;\n \n}\n","\n/* \n*/\nexport class MembershipIdRequest {\n \n    // Membership Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of MembershipIdRequest\n*/\nexport interface IMembershipIdRequest {\n \n    // Membership Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class MembershipsRequest {\n \n    // User Id \n    public userId: string;\n \n    constructor(userId?: string) { \n        this.userId = userId;\n    }\n\n}\n\n\n/*\n *  Interface of MembershipsRequest\n*/\nexport interface IMembershipsRequest {\n \n    // User Id \n    userId?: string;\n \n}\n","\n/* \n*/\nexport class MonthlyCountRequest {\n \n    // Year \n    public year: number;\n \n    // Month \n    public month: number;\n \n    constructor(year?: number, month?: number) { \n        this.year = year;\n        this.month = month;\n    }\n\n}\n\n\n/*\n *  Interface of MonthlyCountRequest\n*/\nexport interface IMonthlyCountRequest {\n \n    // Year \n    year?: number;\n \n    // Month \n    month?: number;\n \n}\n","\n/* \n*/\nexport class NotificationIdRequest {\n \n    // Notification Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of NotificationIdRequest\n*/\nexport interface INotificationIdRequest {\n \n    // Notification Id \n    id?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyActivityUsersRequest {\n \n    // Activity Id \n    public activityId: string;\n \n    // Notification Type \n    public type: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Notification Message \n    public body: string;\n \n    constructor(activityId?: string, type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.activityId = activityId;\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyActivityUsersRequest\n*/\nexport interface INotifyActivityUsersRequest {\n \n    // Activity Id \n    activityId?: string;\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyAllMembersRequest {\n \n    // Notification Type \n    public type: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Notification Message \n    public body: string;\n \n    constructor(type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyAllMembersRequest\n*/\nexport interface INotifyAllMembersRequest {\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyBookingUsersRequest {\n \n    // Booking Id \n    public bookingId: string;\n \n    // Notification Type \n    public type: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Notification Message \n    public body: string;\n \n    constructor(bookingId?: string, type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.bookingId = bookingId;\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyBookingUsersRequest\n*/\nexport interface INotifyBookingUsersRequest {\n \n    // Booking Id \n    bookingId?: string;\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyDailyUsersRequest {\n \n    // Day Id \n    public dayId: number;\n \n    // Notification Type \n    public type: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Notification Message \n    public body: string;\n \n    constructor(dayId?: number, type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.dayId = dayId;\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyDailyUsersRequest\n*/\nexport interface INotifyDailyUsersRequest {\n \n    // Day Id \n    dayId?: number;\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyUserRequest {\n \n    // List of user Ids \n    public userId: string[];\n \n    // Notification Type \n    public type: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Notification Message \n    public body: string;\n \n    constructor(userId?: string[], type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.userId = userId;\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyUserRequest\n*/\nexport interface INotifyUserRequest {\n \n    // List of user Ids \n    userId?: string[];\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","\n/* \n*/\nexport class PeriodCountRequest {\n \n    // \n    public from: number;\n \n    // \n    public to: number;\n \n    constructor(from?: number, to?: number) { \n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n/*\n *  Interface of PeriodCountRequest\n*/\nexport interface IPeriodCountRequest {\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n}\n","\n/* \n*/\nexport class PlacementIdRequest {\n \n    // Placement Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of PlacementIdRequest\n*/\nexport interface IPlacementIdRequest {\n \n    // Placement Id \n    id?: string;\n \n}\n","\n/* \n *  Query response message returned for find operation (with pagination) on multiple entities\n*/\nexport class QueryResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n    constructor(code?: number, error?: string, page?: number, pageSize?: number, pages?: number, total?: number, queryDef?: string, docType?: string) { \n        this.code = code;\n        this.error = error;\n        this.page = page;\n        this.pageSize = pageSize;\n        this.pages = pages;\n        this.total = total;\n        this.queryDef = queryDef;\n        this.docType = docType;\n    }\n\n}\n\n\n/*\n *  Interface of QueryResponse\n*/\nexport interface IQueryResponse {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Account } from '../entities/Account';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfAccount extends QueryResponse {\n \n    // Account list \n    public list: Account[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfAccount\n*/\nexport interface IQueryResponseOfAccount extends IQueryResponse {\n \n    // Account list \n    list?: Account[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Activity } from '../entities/Activity';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfActivity extends QueryResponse {\n \n    // Activity list \n    public list: Activity[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfActivity\n*/\nexport interface IQueryResponseOfActivity extends IQueryResponse {\n \n    // Activity list \n    list?: Activity[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Booking } from '../entities/Booking';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfBooking extends QueryResponse {\n \n    // Booking list \n    public list: Booking[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfBooking\n*/\nexport interface IQueryResponseOfBooking extends IQueryResponse {\n \n    // Booking list \n    list?: Booking[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfBookingRequest extends QueryResponse {\n \n    // Booking request list \n    public list: BookingRequest[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfBookingRequest\n*/\nexport interface IQueryResponseOfBookingRequest extends IQueryResponse {\n \n    // Booking request list \n    list?: BookingRequest[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { MemberUser } from '../entities/MemberUser';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfMemberUser extends QueryResponse {\n \n    // Extended Member list (with user info) \n    public list: MemberUser[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfMemberUser\n*/\nexport interface IQueryResponseOfMemberUser extends IQueryResponse {\n \n    // Extended Member list (with user info) \n    list?: MemberUser[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Membership } from '../entities/Membership';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfMembership extends QueryResponse {\n \n    // Membership list \n    public list: Membership[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfMembership\n*/\nexport interface IQueryResponseOfMembership extends IQueryResponse {\n \n    // Membership list \n    list?: Membership[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Notification } from '../entities/Notification';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfNotification extends QueryResponse {\n \n    // Notifications list \n    public list: Notification[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfNotification\n*/\nexport interface IQueryResponseOfNotification extends IQueryResponse {\n \n    // Notifications list \n    list?: Notification[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Placement } from '../entities/Placement';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfPlacement extends QueryResponse {\n \n    // Placement list \n    public list: Placement[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfPlacement\n*/\nexport interface IQueryResponseOfPlacement extends IQueryResponse {\n \n    // Placement list \n    list?: Placement[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Resource } from '../entities/Resource';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfResource extends QueryResponse {\n \n    // Resource list \n    public list: Resource[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfResource\n*/\nexport interface IQueryResponseOfResource extends IQueryResponse {\n \n    // Resource list \n    list?: Resource[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { User } from '../entities/User';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfUser extends QueryResponse {\n \n    // User list \n    public list: User[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfUser\n*/\nexport interface IQueryResponseOfUser extends IQueryResponse {\n \n    // User list \n    list?: User[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","\n/* \n*/\nexport class ResourceIdRequest {\n \n    // Resource Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of ResourceIdRequest\n*/\nexport interface IResourceIdRequest {\n \n    // Resource Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class ResourcesCountOvertimeRequest {\n \n    // \n    public from: number;\n \n    // \n    public to: number;\n \n    constructor(from?: number, to?: number) { \n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n/*\n *  Interface of ResourcesCountOvertimeRequest\n*/\nexport interface IResourcesCountOvertimeRequest {\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n}\n","\n/* \n *  Response of byte array\n*/\nexport class StreamResponse {\n \n    // \n    public content: string;\n \n    constructor(content?: string) { \n        this.content = content;\n    }\n\n}\n\n\n/*\n *  Interface of StreamResponse\n*/\nexport interface IStreamResponse {\n \n    // \n    content?: string;\n \n}\n","import { Account } from '../entities/Account';\n\n/* \n*/\nexport class SysAdminAccountCreateRequest {\n \n    // Account data \n    public body: Account;\n \n    constructor(body?: Account) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of SysAdminAccountCreateRequest\n*/\nexport interface ISysAdminAccountCreateRequest {\n \n    // Account data \n    body?: Account;\n \n}\n","\n/* \n*/\nexport class SysAdminAccountResetRequest {\n \n    // Account Id \n    public id: string;\n \n    // Retention time in days \n    public days: number;\n \n    constructor(id?: string, days?: number) { \n        this.id = id;\n        this.days = days;\n    }\n\n}\n\n\n/*\n *  Interface of SysAdminAccountResetRequest\n*/\nexport interface ISysAdminAccountResetRequest {\n \n    // Account Id \n    id?: string;\n \n    // Retention time in days \n    days?: number;\n \n}\n","import { Account } from '../entities/Account';\n\n/* \n*/\nexport class SysAdminAccountUpdateRequest {\n \n    // Account data \n    public body: Account;\n \n    constructor(body?: Account) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of SysAdminAccountUpdateRequest\n*/\nexport interface ISysAdminAccountUpdateRequest {\n \n    // Account data \n    body?: Account;\n \n}\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n/* \n*/\nexport class SysAdminAccountsFindRequest {\n \n    // Filter by name or partial name \n    public search: string;\n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    public type: AccountTypeCode[];\n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    public status: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of SysAdminAccountsFindRequest\n*/\nexport interface ISysAdminAccountsFindRequest {\n \n    // Filter by name or partial name \n    search?: string;\n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    type?: AccountTypeCode[];\n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    status?: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n *  Token request message\n*/\nexport class TokenRequest {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Account Id \n    public accountId: string;\n \n    constructor(code?: number, error?: string, accountId?: string) { \n        this.code = code;\n        this.error = error;\n        this.accountId = accountId;\n    }\n\n}\n\n\n/*\n *  Interface of TokenRequest\n*/\nexport interface ITokenRequest {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Account Id \n    accountId?: string;\n \n}\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n/* \n*/\nexport class UserAccountsFindRequest {\n \n    // Filter by name or partial name \n    public search: string;\n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    public type: AccountTypeCode[];\n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    public status: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of UserAccountsFindRequest\n*/\nexport interface IUserAccountsFindRequest {\n \n    // Filter by name or partial name \n    search?: string;\n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    type?: AccountTypeCode[];\n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    status?: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class UserBookingFindRequest {\n \n    // Filter by user who placed the booking \n    public userId: string;\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(userId?: string, resourceId?: string, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId;\n        this.resourceId = resourceId;\n        this.from = from;\n        this.to = to;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of UserBookingFindRequest\n*/\nexport interface IUserBookingFindRequest {\n \n    // Filter by user who placed the booking \n    userId?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","import { TimeUnitCode } from '../enums/TimeUnitCode';\n\n/* \n*/\nexport class UserBookingGroupRequest {\n \n    // From booking time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Group by time period \n    public groupBy: TimeUnitCode;\n \n    constructor(from?: number, to?: number, groupBy?: TimeUnitCode) { \n        this.from = from;\n        this.to = to;\n        this.groupBy = groupBy;\n    }\n\n}\n\n\n/*\n *  Interface of UserBookingGroupRequest\n*/\nexport interface IUserBookingGroupRequest {\n \n    // From booking time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Group by time period \n    groupBy?: TimeUnitCode;\n \n}\n","\n/* \n*/\nexport class UserBookingHistoryRequest {\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // Get related year \n    public year: number;\n \n    // Get related month \n    public month: number;\n \n    // Get related day \n    public day: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    constructor(resourceId?: string, year?: number, month?: number, day?: number, sort?: string) { \n        this.resourceId = resourceId;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.sort = sort;\n    }\n\n}\n\n\n/*\n *  Interface of UserBookingHistoryRequest\n*/\nexport interface IUserBookingHistoryRequest {\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // Get related year \n    year?: number;\n \n    // Get related month \n    month?: number;\n \n    // Get related day \n    day?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","\n/* \n*/\nexport class UserBookingRequestFindRequest {\n \n    // Filter by user who placed the booking \n    public userId: string;\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(userId?: string, resourceId?: string, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId;\n        this.resourceId = resourceId;\n        this.from = from;\n        this.to = to;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of UserBookingRequestFindRequest\n*/\nexport interface IUserBookingRequestFindRequest {\n \n    // Filter by user who placed the booking \n    userId?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class UserByEmailRequest {\n \n    // User email \n    public email: string;\n \n    constructor(email?: string) { \n        this.email = email;\n    }\n\n}\n\n\n/*\n *  Interface of UserByEmailRequest\n*/\nexport interface IUserByEmailRequest {\n \n    // User email \n    email?: string;\n \n}\n","import { Booking } from '../entities/Booking';\n\n/* \n*/\nexport class UserCreateBookingRequest {\n \n    // Booking data \n    public body: Booking;\n \n    constructor(body?: Booking) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserCreateBookingRequest\n*/\nexport interface IUserCreateBookingRequest {\n \n    // Booking data \n    body?: Booking;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\n\n/* \n*/\nexport class UserCreateBookingRequestRequest {\n \n    // Booking request data \n    public body: BookingRequest;\n \n    constructor(body?: BookingRequest) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserCreateBookingRequestRequest\n*/\nexport interface IUserCreateBookingRequestRequest {\n \n    // Booking request data \n    body?: BookingRequest;\n \n}\n","import { Placement } from '../entities/Placement';\n\n/* \n*/\nexport class UserCreatePlacementRequest {\n \n    // Placement data \n    public body: Placement;\n \n    constructor(body?: Placement) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserCreatePlacementRequest\n*/\nexport interface IUserCreatePlacementRequest {\n \n    // Placement data \n    body?: Placement;\n \n}\n","\n/* \n*/\nexport class UserIdRequest {\n \n    // User Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of UserIdRequest\n*/\nexport interface IUserIdRequest {\n \n    // User Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class UserIdsRequest {\n \n    // User Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of UserIdsRequest\n*/\nexport interface IUserIdsRequest {\n \n    // User Id list \n    id?: string[];\n \n}\n","import { BookingStatusCode } from '../enums/BookingStatusCode';\n\n/* \n*/\nexport class UserPlacementFindRequest {\n \n    // Filter by user who placed the booking \n    public userId: string;\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Filter by referenced booking Id \n    public bookingId: string;\n \n    // Filter by booking status \n    public status: BookingStatusCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(userId?: string, resourceId?: string, from?: number, to?: number, bookingId?: string, status?: BookingStatusCode, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId;\n        this.resourceId = resourceId;\n        this.from = from;\n        this.to = to;\n        this.bookingId = bookingId;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of UserPlacementFindRequest\n*/\nexport interface IUserPlacementFindRequest {\n \n    // Filter by user who placed the booking \n    userId?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Filter by referenced booking Id \n    bookingId?: string;\n \n    // Filter by booking status \n    status?: BookingStatusCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class UserServiceChangeMobileRequest {\n \n    // User mobile to update \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceChangeMobileRequest\n*/\nexport interface IUserServiceChangeMobileRequest {\n \n    // User mobile to update \n    body?: string;\n \n}\n","\n/* \n*/\nexport class UserServiceChangeNameRequest {\n \n    // User name to update \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceChangeNameRequest\n*/\nexport interface IUserServiceChangeNameRequest {\n \n    // User name to update \n    body?: string;\n \n}\n","import { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\n\n/* \n*/\nexport class UserServiceChangePasswordRequest {\n \n    // \n    public body: ChangePasswordRequest;\n \n    constructor(body?: ChangePasswordRequest) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceChangePasswordRequest\n*/\nexport interface IUserServiceChangePasswordRequest {\n \n    // \n    body?: ChangePasswordRequest;\n \n}\n","\n/* \n*/\nexport class UserServiceCheckPasswordRequest {\n \n    // \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceCheckPasswordRequest\n*/\nexport interface IUserServiceCheckPasswordRequest {\n \n    // \n    body?: string;\n \n}\n","import { LoginParams } from '../common/LoginParams';\n\n/* \n*/\nexport class UserServiceLoginRequest {\n \n    // \n    public body: LoginParams;\n \n    constructor(body?: LoginParams) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceLoginRequest\n*/\nexport interface IUserServiceLoginRequest {\n \n    // \n    body?: LoginParams;\n \n}\n","\n/* \n*/\nexport class UserServiceReadNotificationRequest {\n \n    // Notification Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceReadNotificationRequest\n*/\nexport interface IUserServiceReadNotificationRequest {\n \n    // Notification Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class UserServiceResetPasswordRequest {\n \n    // Verification code \n    public code: string;\n \n    constructor(code?: string) { \n        this.code = code;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceResetPasswordRequest\n*/\nexport interface IUserServiceResetPasswordRequest {\n \n    // Verification code \n    code?: string;\n \n}\n","\n/* \n*/\nexport class UserServiceSendVerificationRequest {\n \n    // Email to send code \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceSendVerificationRequest\n*/\nexport interface IUserServiceSendVerificationRequest {\n \n    // Email to send code \n    body?: string;\n \n}\n","import { TokenRequest } from '../messages/TokenRequest';\n\n/* \n*/\nexport class UserServiceSwitchAccountRequest {\n \n    // Token request info \n    public body: TokenRequest;\n \n    constructor(body?: TokenRequest) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceSwitchAccountRequest\n*/\nexport interface IUserServiceSwitchAccountRequest {\n \n    // Token request info \n    body?: TokenRequest;\n \n}\n","import { User } from '../entities/User';\n\n/* \n*/\nexport class UserServiceUpdateRequest {\n \n    // User data to update \n    public body: User;\n \n    constructor(body?: User) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceUpdateRequest\n*/\nexport interface IUserServiceUpdateRequest {\n \n    // User data to update \n    body?: User;\n \n}\n","\n/* \n*/\nexport class UserServiceVerifyLoginRequest {\n \n    // \n    public key: string;\n \n    constructor(key?: string) { \n        this.key = key;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceVerifyLoginRequest\n*/\nexport interface IUserServiceVerifyLoginRequest {\n \n    // \n    key?: string;\n \n}\n","\n/* \n*/\nexport class UserTokenRequest {\n \n    // User Id \n    public id: string;\n \n    // Expiration time [Epoch milliseconds Timestamp] \n    public exp: number;\n \n    constructor(id?: string, exp?: number) { \n        this.id = id;\n        this.exp = exp;\n    }\n\n}\n\n\n/*\n *  Interface of UserTokenRequest\n*/\nexport interface IUserTokenRequest {\n \n    // User Id \n    id?: string;\n \n    // Expiration time [Epoch milliseconds Timestamp] \n    exp?: number;\n \n}\n","import { Booking } from '../entities/Booking';\n\n/* \n*/\nexport class UserUpdateBookingRequest {\n \n    // Booking data \n    public body: Booking;\n \n    constructor(body?: Booking) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserUpdateBookingRequest\n*/\nexport interface IUserUpdateBookingRequest {\n \n    // Booking data \n    body?: Booking;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\n\n/* \n*/\nexport class UserUpdateBookingRequestRequest {\n \n    // Booking request data \n    public body: BookingRequest;\n \n    constructor(body?: BookingRequest) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserUpdateBookingRequestRequest\n*/\nexport interface IUserUpdateBookingRequestRequest {\n \n    // Booking request data \n    body?: BookingRequest;\n \n}\n","import { Placement } from '../entities/Placement';\n\n/* \n*/\nexport class UserUpdatePlacementRequest {\n \n    // Placement data \n    public body: Placement;\n \n    constructor(body?: Placement) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UserUpdatePlacementRequest\n*/\nexport interface IUserUpdatePlacementRequest {\n \n    // Placement data \n    body?: Placement;\n \n}\n","\n/* \n*/\nexport class UsersServiceChangeDefaultAccountRequest {\n \n    // User Id \n    public id: string;\n \n    // Default account Id \n    public accountId: string;\n \n    constructor(id?: string, accountId?: string) { \n        this.id = id;\n        this.accountId = accountId;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeDefaultAccountRequest\n*/\nexport interface IUsersServiceChangeDefaultAccountRequest {\n \n    // User Id \n    id?: string;\n \n    // Default account Id \n    accountId?: string;\n \n}\n","\n/* \n*/\nexport class UsersServiceChangeMobileRequest {\n \n    // User Id \n    public id: string;\n \n    // User mobile to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeMobileRequest\n*/\nexport interface IUsersServiceChangeMobileRequest {\n \n    // User Id \n    id?: string;\n \n    // User mobile to update \n    body?: string;\n \n}\n","\n/* \n*/\nexport class UsersServiceChangeNameRequest {\n \n    // User Id \n    public id: string;\n \n    // User name to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeNameRequest\n*/\nexport interface IUsersServiceChangeNameRequest {\n \n    // User Id \n    id?: string;\n \n    // User name to update \n    body?: string;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class UsersServiceChangeRoleRequest {\n \n    // User Id \n    public id: string;\n \n    // User role to update \n    public role: AccountRoleCode;\n \n    constructor(id?: string, role?: AccountRoleCode) { \n        this.id = id;\n        this.role = role;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeRoleRequest\n*/\nexport interface IUsersServiceChangeRoleRequest {\n \n    // User Id \n    id?: string;\n \n    // User role to update \n    role?: AccountRoleCode;\n \n}\n","import { UserStatusCode } from '../enums/UserStatusCode';\n\n/* \n*/\nexport class UsersServiceChangeStatusRequest {\n \n    // User Id \n    public id: string;\n \n    // User status to update \n    public status: UserStatusCode;\n \n    constructor(id?: string, status?: UserStatusCode) { \n        this.id = id;\n        this.status = status;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeStatusRequest\n*/\nexport interface IUsersServiceChangeStatusRequest {\n \n    // User Id \n    id?: string;\n \n    // User status to update \n    status?: UserStatusCode;\n \n}\n","import { UserTypeCode } from '../enums/UserTypeCode';\n\n/* \n*/\nexport class UsersServiceChangeTypeRequest {\n \n    // User Id \n    public id: string;\n \n    // User type to update \n    public type: UserTypeCode;\n \n    constructor(id?: string, type?: UserTypeCode) { \n        this.id = id;\n        this.type = type;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeTypeRequest\n*/\nexport interface IUsersServiceChangeTypeRequest {\n \n    // User Id \n    id?: string;\n \n    // User type to update \n    type?: UserTypeCode;\n \n}\n","import { UserRegistration } from '../common/UserRegistration';\n\n/* \n*/\nexport class UsersServiceCreateRequest {\n \n    // \n    public body: UserRegistration;\n \n    constructor(body?: UserRegistration) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceCreateRequest\n*/\nexport interface IUsersServiceCreateRequest {\n \n    // \n    body?: UserRegistration;\n \n}\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n/* \n*/\nexport class UsersServiceExportRequest {\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    public type: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    public status: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Export results to a different format. Supported formats: csv | json | xml \n    public format: string;\n \n    // List of fields to export (leave empty to export all fields) \n    public fields: string[];\n \n    constructor(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, format?: string, fields?: string[]) { \n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.format = format;\n        this.fields = fields;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceExportRequest\n*/\nexport interface IUsersServiceExportRequest {\n \n    // Filter by name or partial name or id \n    search?: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    type?: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    status?: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Export results to a different format. Supported formats: csv | json | xml \n    format?: string;\n \n    // List of fields to export (leave empty to export all fields) \n    fields?: string[];\n \n}\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n/* \n*/\nexport class UsersServiceFindRequest {\n \n    // Filter by account id (get only Account Users with access to the accountId) \n    public accountId: string;\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    public type: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    public status: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(accountId?: string, search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId;\n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceFindRequest\n*/\nexport interface IUsersServiceFindRequest {\n \n    // Filter by account id (get only Account Users with access to the accountId) \n    accountId?: string;\n \n    // Filter by name or partial name or id \n    search?: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    type?: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    status?: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","import { UserInvitation } from '../common/UserInvitation';\n\n/* \n*/\nexport class UsersServiceInviteRequest {\n \n    // \n    public body: UserInvitation;\n \n    constructor(body?: UserInvitation) { \n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceInviteRequest\n*/\nexport interface IUsersServiceInviteRequest {\n \n    // \n    body?: UserInvitation;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class UsersServiceSetRolesRequest {\n \n    // User Id \n    public id: string;\n \n    // User roles to update \n    public roles: AccountRoleCode[];\n \n    constructor(id?: string, roles?: AccountRoleCode[]) { \n        this.id = id;\n        this.roles = roles;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceSetRolesRequest\n*/\nexport interface IUsersServiceSetRolesRequest {\n \n    // User Id \n    id?: string;\n \n    // User roles to update \n    roles?: AccountRoleCode[];\n \n}\n","import { User } from '../entities/User';\n\n/* \n*/\nexport class UsersServiceUpdateRequest {\n \n    // User Id \n    public id: string;\n \n    // User data to update \n    public body: User;\n \n    constructor(id?: string, body?: User) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceUpdateRequest\n*/\nexport interface IUsersServiceUpdateRequest {\n \n    // User Id \n    id?: string;\n \n    // User data to update \n    body?: User;\n \n}\n","\n/* \n *  @WebSocketMessage Message header for all web socket messages\n*/\nexport class WebSocketMessageHeader {\n \n    // \n    public op: number;\n \n    // \n    public ver: number;\n \n    // \n    public id: number;\n \n    // \n    public cid: number;\n \n    // \n    public sid: string;\n \n    constructor(opcode?: number, version?: number, messageId?: number, correlationId?: number, sessionId?: string) { \n        this.op = opcode;\n        this.ver = version;\n        this.id = messageId;\n        this.cid = correlationId;\n        this.sid = sessionId;\n    }\n\n}\n\n\n/*\n *  Interface of WebSocketMessageHeader\n*/\nexport interface IWebSocketMessageHeader {\n \n    // \n    op?: number;\n \n    // \n    ver?: number;\n \n    // \n    id?: number;\n \n    // \n    cid?: number;\n \n    // \n    sid?: string;\n \n}\n","// Access token key in the local storage\nconst tokenKey = 'portalAccessToken';\nconst loginKey = 'portalLoginData';\n\nexport function getToken() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport function setToken(token) {\n  localStorage.setItem(tokenKey, token);\n}\n\nexport function removeToken() {\n  localStorage.removeItem(tokenKey);\n  localStorage.removeItem(loginKey);\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';  // replaces previous Http service\nimport { map, catchError } from 'rxjs/operators';\nimport * as LocalStorageUtil from './localStorage-util';\n\n/**\n * Utility class for all REST services with common functions\n */\n@Injectable()\nexport class RestUtil {\n\n  // Set headers\n  private headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  /**\n   * Constructor with injected authentication service\n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Download is HTTP GET action but the content is blob\n   */\n  download(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let ext = 'json';\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'format') {\n          ext = arr[1];\n        }\n      }\n    });\n    \n    const downloadLink = fileName + '.' + ext;\n\n    return this.http.get(resourceUrl, {responseType: 'blob'}).subscribe((data) => {\n      const downloadURL = window.URL.createObjectURL(data);\n      const link = document.createElement('a');\n      link.href = downloadURL;\n      link.download = downloadLink;\n      link.click();\n    });\n\n  }\n  \n  /**\n   * HTTP GET action\n   */\n  get(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .get(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError),\n      );\n  }\n\n  /**\n   * HTTP POST action\n   */\n  post(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .post(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP PUT action\n   */\n  put(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .put(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP DELETE action\n   */\n  delete(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .delete(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Construct URL with parameters\n   */\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  /**\n   * Process the response, extract and refresh access token and return the body\n   */\n  private processResponse(response: HttpResponse<any>) {\n\n    if (response.status === 401) {\n      LocalStorageUtil.removeToken();\n      throw new Error('Access denied, reset token: ' + response.status);\n    } else if (response.status > 400) {\n      throw new Error('HTTP status error: ' + response.status);\n    }\n\n    // Get access token from header and update authentication service\n\n    const accessToken = response.headers.get('X-ACCESS-TOKEN');\n\n    if ((accessToken !== null) && (accessToken.length > 0)) {\n      LocalStorageUtil.setToken(accessToken);\n    } \n    \n    if (response.body && response.body.code && response.body.code !== 0) {\n      throw { code: response.body.code, message: response.body.error };\n    }\n    \n    return response.body;\n  }\n\n  /**\n   * Error handling\n   */\n  private handleError(error: any): Promise<any> {\n    if (error.code) {\n      return Promise.reject(error);\n    }\n    return Promise.reject(error.message || error);\n  }\n}\n","export class CoreConfig {\n    api: string;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountSettings } from '../common/AccountSettings';\n\n\n/**\n * List of account related actions for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminAccountService {\n\n  // URL to web api\n  private baseUrl = '/admin/account';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get account settings\n   * @Return: EntityResponse<AccountSettings>\n   */\n  getSettings() {\n    return this.rest.get(`${this.baseUrl}/settings`);\n  }\n\n  /**\n   * Update existing account settings in the system\n   * @Return: EntityResponse<AccountSettings>\n   */\n  updateSettings(body?: AccountSettings) {\n    return this.rest.put(`${this.baseUrl}/settings`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Activity } from '../entities/Activity';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n\n/**\n * Services for managing club activities - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminActivitiesService {\n\n  // URL to web api\n  private baseUrl = '/admin/activities';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new activity\n   * @Return: EntityResponse<Activity>\n   */\n  create(body?: Activity) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update activity\n   * @Return: EntityResponse<Activity>\n   */\n  update(body?: Activity) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete activity\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single activity by id\n   * @Return: EntityResponse<Activity>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get previous activity related to this activity id\n   * @Return: EntityResponse<Activity>\n   */\n  prev(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/prev`);\n  }\n\n  /**\n   * Get next activity related to this activity id\n   * @Return: EntityResponse<Activity>\n   */\n  next(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/next`);\n  }\n\n  /**\n   * Find activities by time range\n   * @Return: QueryResponse<Activity>\n   */\n  find(from?: number, to?: number, year?: number, month?: number, day?: number, total?: boolean) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (total != null) { params.push(`total=${total}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find list of free resources for activity by filter\n   * @Return: EntitiesResponse<Resource>\n   */\n  findFreeResources(id?: string, resType?: number, weight?: number, forUseBy?: AccountRoleCode) {\n    const params = new Array();\t\t\n    if (resType != null) { params.push(`resType=${resType}`); }\n    if (weight != null) { params.push(`weight=${weight}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/resources`, ...params);\n  }\n\n  /**\n   * Create bulk set of activities\n   * @Return: ActionResponse\n   */\n  createBulk(body?: Activity[]) {\n    return this.rest.post(`${this.baseUrl}/bulk`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Create account default set of activities per month\n   * @Return: ActionResponse\n   */\n  createDefault(year?: number, month?: number, day?: number) {\n    const params = new Array();\t\t\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/default`, null, ...params);\n  }\n\n  /**\n   * Clear all month activities\n   * @Return: ActionResponse\n   */\n  clearDefault(year?: number, month?: number, day?: number) {\n    const params = new Array();\t\t\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n\n\t\treturn this.rest.delete(`${this.baseUrl}/default`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { MemberRegistration } from '../common/MemberRegistration';\nimport { Member } from '../entities/Member';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { MemberUser } from '../entities/MemberUser';\n\n\n/**\n * List of all user related actions for account administrator only \n */\n@Injectable()\nexport class AdminMembersService {\n\n  // URL to web api\n  private baseUrl = '/admin/members';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Send invitation to a new member for the current account\n   * @Return: ActionResponse\n   */\n  invite(body?: MemberRegistration) {\n    return this.rest.post(`${this.baseUrl}/invite`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Resend invitation to an existing member for the current account\n   * @Return: ActionResponse\n   */\n  reInvite(id?: string) {\n    return this.rest.post(`${this.baseUrl}/re-invite/${id}`, null);\n  }\n\n  /**\n   * Update member\n   * @Return: EntityResponse<Member>\n   */\n  update(body?: Member) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete member from the account\n   * The member will be removed from the account, if no other memberships exist for the user, it will be deleted from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Reset password for member\n   * The result is a temporary password\n   * @Return: ActionResponse\n   */\n  resetPassword(id?: string) {\n    return this.rest.post(`${this.baseUrl}/${id}/reset-password`, null);\n  }\n\n  /**\n   * Get single member by id (including user data)\n   * @Return: EntityResponse<MemberUser>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single member by id (including user data)\n   * @Return: EntityResponse<User>\n   */\n  getUserByEmail(email?: string) {\n    return this.rest.get(`${this.baseUrl}/email/${email}`);\n  }\n\n  /**\n   * Get user memberships (in all accounts)\n   * @Return: QueryResponse<Membership>\n   */\n  getUserMemberships(userId?: string) {\n    return this.rest.get(`${this.baseUrl}/memberships/${userId}`);\n  }\n\n  /**\n   * Find list of users and filter the list\n   * System user will see all users, Account system will see all users of the account, registered user will get an error.\n   * @Return: QueryResponse<MemberUser>\n   */\n  find(accountId?: string, search?: string, role?: AccountRoleCode[], status?: MemberStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (role != null) { params.push(`role=${role}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Import bulk set of members\n   * @Return: ActionResponse\n   */\n  bulkImport(body?: MemberUser[]) {\n    return this.rest.post(`${this.baseUrl}/import`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Find list of all bookings that the user is registered to\n   * @Return: QueryResponse<Booking>\n   */\n  findMemberHistory(id?: string, resourceId?: string, year?: number, month?: number, day?: number, sort?: string) {\n    const params = new Array();\t\t\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/history`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n\n/**\n * List of all notifications actions for account administrator only \n */\n@Injectable()\nexport class AdminNotificationsService {\n\n  // URL to web api\n  private baseUrl = '/admin/notifications';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Send Create new notification for user\n   * @Return: ActionResponse\n   */\n  notifyUser(userId?: string[], type?: NotificationTypeCode, from?: number, to?: number, body?: string) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Create notifications for all users in booking\n   * @Return: ActionResponse\n   */\n  notifyBookingUsers(bookingId?: string, type?: NotificationTypeCode, from?: number, to?: number, body?: string) {\n    const params = new Array();\t\t\n    if (bookingId != null) { params.push(`bookingId=${bookingId}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/booking`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Create notifications for all users in activity bookings\n   * @Return: ActionResponse\n   */\n  notifyActivityUsers(activityId?: string, type?: NotificationTypeCode, from?: number, to?: number, body?: string) {\n    const params = new Array();\t\t\n    if (activityId != null) { params.push(`activityId=${activityId}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/activity`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Create notifications for all users in activity bookings\n   * @Return: ActionResponse\n   */\n  notifyDailyUsers(dayId?: number, type?: NotificationTypeCode, from?: number, to?: number, body?: string) {\n    const params = new Array();\t\t\n    if (dayId != null) { params.push(`dayId=${dayId}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/daily`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Create notification for all club members\n   * @Return: ActionResponse\n   */\n  notifyAllMembers(type?: NotificationTypeCode, from?: number, to?: number, body?: string) {\n    const params = new Array();\t\t\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/members`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Actual } from '../entities/Actual';\n\n\n/**\n * Services for planing club resource placements - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminPlaningService {\n\n  // URL to web api\n  private baseUrl = '/admin/planing';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get daily planing - bookings group by activities\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  getDailyPlaning(day?: number, resFilter?: string, userFilter?: string) {\n    const params = new Array();\t\t\n    if (resFilter != null) { params.push(`resFilter=${resFilter}`); }\n    if (userFilter != null) { params.push(`userFilter=${userFilter}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/daily/${day}`, ...params);\n  }\n\n  /**\n   * Get list of resources in a specific day\n   * @Return: EntitiesResponse<StringKeyValue>\n   */\n  getDailyResources(day?: number) {\n    return this.rest.get(`${this.baseUrl}/daily-resources/${day}`);\n  }\n\n  /**\n   * Export daily planing - as PDF stream\n   * @Return: StreamContent\n   */\n  exportDailyPlaning(day?: number, lang?: string) {\n    const params = new Array();\t\t\n    if (lang != null) { params.push(`lang=${lang}`); }\n\n\t\treturn this.rest.download(`admin-planing`,`${this.baseUrl}/daily/${day}/export`, ...params);\n  }\n\n  /**\n   * Find list of free resources for the booking request\n   * @Return: EntitiesResponse<Resource>\n   */\n  findFreeResources(id?: string) {\n    return this.rest.get(`${this.baseUrl}/bookings/${id}/resources`);\n  }\n\n  /**\n   * Assign resource for booking request and approve\n   * @Return: ActionResponse\n   */\n  assignResource(id?: string, resourceId?: string) {\n    return this.rest.post(`${this.baseUrl}/bookings/${id}/assign/${resourceId}`, null);\n  }\n\n  /**\n   * Un assign resource from booking request\n   * @Return: ActionResponse\n   */\n  unAssignResource(id?: string) {\n    return this.rest.post(`${this.baseUrl}/bookings/${id}/un-assign`, null);\n  }\n\n  /**\n   * Merge source and target bookings and recalculate the daily planing\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  mergeBookings(day?: number, source?: string, target?: string) {\n    return this.rest.post(`${this.baseUrl}/daily/${day}/bookings/${source}/merge/${target}`, null);\n  }\n\n  /**\n   * Split booking and recalculate the daily planing\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  splitBookings(day?: number, id?: string) {\n    return this.rest.post(`${this.baseUrl}/daily/${day}/bookings/${id}/split`, null);\n  }\n\n  /**\n   * Delete booking and recalculate the daily planing\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  deleteBooking(day?: number, id?: string) {\n    return this.rest.delete(`${this.baseUrl}/daily/${day}/bookings/${id}`);\n  }\n\n  /**\n   * Delete activity and recalculate the daily planing\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  deleteActivity(day?: number, id?: string) {\n    return this.rest.delete(`${this.baseUrl}/daily/${day}/activities/${id}`);\n  }\n\n  /**\n   * Get daily registration list - who is present\n   * @Return: EntitiesResponse<Actual>\n   */\n  getDailyRegistration(day?: number, filter?: string, missingOnly?: boolean) {\n    const params = new Array();\t\t\n    if (filter != null) { params.push(`filter=${filter}`); }\n    if (missingOnly != null) { params.push(`missingOnly=${missingOnly}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/bookings/registration/${day}`, ...params);\n  }\n\n  /**\n   * Update user registration\n   * @Return: ActionResponse\n   */\n  updateRegistration(body?: Actual) {\n    return this.rest.post(`${this.baseUrl}/bookings/registration`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Report user absence from approved booking\n   * @Return: ActionResponse\n   */\n  reportAbsence(id?: string, userId?: string[]) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/bookings/${id}/absence`, null, ...params);\n  }\n\n  /**\n   * Report incident from registration\n   * @Return: ActionResponse\n   */\n  reportIncident(id?: string, userId?: string[], body?: string) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/bookings/${id}/incident`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * Services for analytics reports - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminReportsService {\n\n  // URL to web api\n  private baseUrl = '/admin/reports';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get count of members over month\n   * @Return: EntitiesResponse<Usage>\n   */\n  getMonthlyCount(year?: number, month?: number) {\n    const params = new Array();\t\t\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/monthly-count`, ...params);\n  }\n\n  /**\n   * Get count of members over time period\n   * @Return: EntitiesResponse<Usage>\n   */\n  getPeriodCount(from?: number, to?: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/period-count`, ...params);\n  }\n\n  /**\n   * Get distribution by week days over time\n   * @Return: EntitiesResponse<StringIntValue>\n   */\n  getDayOfWeekDistribution(from?: number, to?: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/count-by-dow`, ...params);\n  }\n\n  /**\n   * Get distribution by resource type over time\n   * @Return: EntitiesResponse<StringIntValue>\n   */\n  getResourceTypeDistribution(from?: number, to?: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/count-by-type`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Resource } from '../entities/Resource';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n\n/**\n * Services for managing club resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminResourcesService {\n\n  // URL to web api\n  private baseUrl = '/admin/resources';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new resource\n   * @Return: EntityResponse<Resource>\n   */\n  create(body?: Resource) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update resource\n   * @Return: EntityResponse<Resource>\n   */\n  update(body?: Resource) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete resource\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single resource by id\n   * @Return: EntityResponse<Resource>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find resources by filters\n   * @Return: QueryResponse<Resource>\n   */\n  find(search?: string, resourceClass?: ResourceClassCode, resourceType?: ResourceTypeMask, status?: ResourceStatusCode, forUseBy?: AccountRoleCode, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (resourceClass != null) { params.push(`resourceClass=${resourceClass}`); }\n    if (resourceType != null) { params.push(`resourceType=${resourceType}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Import bulk set of resources\n   * @Return: ActionResponse\n   */\n  bulkCreate(body?: Resource[]) {\n    return this.rest.post(`${this.baseUrl}/import`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Find list of all bookings for a resource by filter\n   * @Return: QueryResponse<Booking>\n   */\n  findResourceHistory(id?: string, year?: number, month?: number, day?: number, sort?: string) {\n    const params = new Array();\t\t\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/history`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * Health check service, no X-API-KEY or X-ACCESS-TOKEN are required \n */\n@Injectable()\nexport class HealthCheckService {\n\n  // URL to web api\n  private baseUrl = '/health';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Health check to test service availability\n   * @Return: ActionResponse - with version info\n   */\n  health() {\n    return this.rest.get(`${this.baseUrl}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { Account } from '../entities/Account';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\n\n\n/**\n * List of account related actions for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysAccountsService {\n\n  // URL to web api\n  private baseUrl = '/sys/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   * @Return: EntityResponse<Account>\n   */\n  create(body?: Account) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account in the system\n   * @Return: EntityResponse<Account>\n   */\n  update(body?: Account) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete account from the system\n   * The account is moved to DELETED mode and will be deleted after 90 days\n   * Only account marked as SUSPENDED can be deleted\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Delete account immediately without account status restrictions\n   * @Return: ActionResponse\n   */\n  purge(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/purge/${id}`);\n  }\n\n  /**\n   * Reset account - remove all operational data older than the retention time in days (events, status, log ...) but leave configuration data\n   * @Return: ActionResponse\n   */\n  reset(id?: string, days?: number) {\n    return this.rest.delete(`${this.baseUrl}/reset/${id}/days/${days}`);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UserRegistration } from '../common/UserRegistration';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n\n/**\n * List of all user related actions for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysUsersService {\n\n  // URL to web api\n  private baseUrl = '/sys/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create a new user for the current account\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: ActionResponse\n   */\n  create(body?: UserRegistration) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update user\n   * @Return: EntityResponse<User>\n   */\n  update(id?: string, body?: User) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user name\n   * @Return: EntityResponse<User>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user mobile\n   * @Return: EntityResponse<User>\n   */\n  changeMobile(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id?: string, type?: UserTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, null);\n  }\n\n  /**\n   * Change user status\n   * @Return: EntityResponse<User>\n   */\n  changeStatus(id?: string, status?: UserStatusCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/status/${status}`, null);\n  }\n\n  /**\n   * Change user default account\n   * @Return: EntityResponse<User>\n   */\n  changeDefaultAccount(id?: string, accountId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/defaultAccount/${accountId}`, null);\n  }\n\n  /**\n   * Reset password for user, generate one-time temporary password\n   * @Return: ActionResponse\n   */\n  resetPassword(id?: string) {\n    return this.rest.post(`${this.baseUrl}/${id}/reset-password`, null);\n  }\n\n  /**\n   * Delete user from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by Id\n   * @Return: EntityResponse<User>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of users by filter\n   * @Return: QueryResponse<User>\n   */\n  find(accountId?: string, search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n\n/**\n * Services for managing club activities - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UsrActivitiesService {\n\n  // URL to web api\n  private baseUrl = '/user/activities';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single activity by id\n   * @Return: EntityResponse<Activity>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find activities by time range\n   * @Return: QueryResponse<Activity>\n   */\n  find(from?: number, to?: number, year?: number, month?: number, day?: number, total?: boolean) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (total != null) { params.push(`total=${total}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find list of free resources for activity by filter\n   * @Return: EntitiesResponse<Resource>\n   */\n  findFreeResources(id?: string, resType?: number, weight?: number, forUseBy?: AccountRoleCode) {\n    const params = new Array();\t\t\n    if (resType != null) { params.push(`resType=${resType}`); }\n    if (weight != null) { params.push(`weight=${weight}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/resources`, ...params);\n  }\n\n  /**\n   * Find list of all resources for activity and mark the assigned activities\n   * @Return: EntitiesResponse<Resource>\n   */\n  findAllResources(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/all-resources`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Booking } from '../entities/Booking';\nimport { TimeUnitCode } from '../enums/TimeUnitCode';\n\n\n/**\n * Services for managing kayak resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UserBookingsService {\n\n  // URL to web api\n  private baseUrl = '/user/bookings';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new booking\n   * @Return: EntityResponse<Booking>\n   */\n  create(body?: Booking) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update booking\n   * @Return: EntityResponse<Booking>\n   */\n  update(body?: Booking) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update actual activity log (duration and distance)\n   * @Return: EntityResponse<Booking>\n   */\n  updateLog(body?: Booking) {\n    return this.rest.put(`${this.baseUrl}/log`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete booking\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Remove current user from booking\n   * @Return: ActionResponse\n   */\n  removeMe(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}/remove-me`);\n  }\n\n  /**\n   * Get single booking by id\n   * @Return: EntityResponse<Booking>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get extended booking info by id including names\n   * @Return: EntityResponse<Booking>\n   */\n  getExt(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/ext`);\n  }\n\n  /**\n   * Find bookings by filters\n   * @Return: QueryResponse<Booking>\n   */\n  find(userId?: string, resourceId?: string, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find bookings daily / monthly / yearly history by filters\n   * @Return: QueryResponse<Booking>\n   */\n  history(resourceId?: string, year?: number, month?: number, day?: number, sort?: string) {\n    const params = new Array();\t\t\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/history`, ...params);\n  }\n\n  /**\n   * Group my bookings by time period\n   * @Return: EntitiesResponse<BookingGroup>\n   */\n  groups(from?: number, to?: number, groupBy?: TimeUnitCode) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (groupBy != null) { params.push(`groupBy=${groupBy}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/groups`, ...params);\n  }\n\n  /**\n   * Find list of activities groups by time period\n   * @Return: EntitiesResponse<BookingGroup>\n   */\n  activities(from?: number, to?: number, groupBy?: TimeUnitCode) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (groupBy != null) { params.push(`groupBy=${groupBy}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/activities`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Placement } from '../entities/Placement';\nimport { BookingStatusCode } from '../enums/BookingStatusCode';\n\n\n/**\n * Services for managing user placements (approved bookings)\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UserPlacementsService {\n\n  // URL to web api\n  private baseUrl = '/user/placements';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new placement\n   * @Return: EntityResponse<Placement>\n   */\n  create(body?: Placement) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update placement\n   * @Return: EntityResponse<Placement>\n   */\n  update(body?: Placement) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete placement\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single placement by id\n   * @Return: EntityResponse<Placement>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find placements by filters\n   * @Return: QueryResponse<Placement>\n   */\n  find(userId?: string, resourceId?: string, bookingId?: string, status?: BookingStatusCode, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (bookingId != null) { params.push(`bookingId=${bookingId}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\n\n\n/**\n * List of account related actions \n */\n@Injectable()\nexport class UserAccountsService {\n\n  // URL to web api\n  private baseUrl = '/user/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get list of user memberships\n   * @Return: EntitiesResponse<Membership>\n   */\n  getMemberships() {\n    return this.rest.get(`${this.baseUrl}/memberships`);\n  }\n\n  /**\n   * Delete membership by id\n   * @Return: ActionResponse\n   */\n  deleteMemberships(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/memberships/${id}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\n\n\n/**\n * List of all user related actions for account administrator only \n */\n@Injectable()\nexport class UsrMembersService {\n\n  // URL to web api\n  private baseUrl = '/user/members';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single member by id (including user data)\n   * @Return: EntityResponse<MemberUser>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get my (logged-in user) member info (including user data)\n   * @Return: EntityResponse<MemberUser>\n   */\n  getMy() {\n    return this.rest.get(`${this.baseUrl}/my`);\n  }\n\n  /**\n   * Find list of users and filter the list\n   * System user will see all users, Account system will see all users of the account, registered user will get an error.\n   * @Return: QueryResponse<MemberUser>\n   */\n  find(search?: string, role?: AccountRoleCode[], status?: MemberStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (role != null) { params.push(`role=${role}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { LoginParams } from '../common/LoginParams';\nimport { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\nimport { TokenRequest } from '../messages/TokenRequest';\nimport { User } from '../entities/User';\nimport { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n\n/**\n * Services for user registration and login \n */\n@Injectable()\nexport class UserService {\n\n  // URL to web api\n  private baseUrl = '/user/user';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Login to the system with user email and password\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: EntityResponse<LoginData>\n   */\n  login(body?: LoginParams) {\n    return this.rest.post(`${this.baseUrl}/login`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<LoginData>\n   */\n  refreshToken() {\n    return this.rest.post(`${this.baseUrl}/refresh-token`, null);\n  }\n\n  /**\n   * Verify user by temporary login key\n   * @Return: EntityResponse<User>\n   */\n  verifyLoginKey(key?: string) {\n    const params = new Array();\t\t\n    if (key != null) { params.push(`key=${key}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/login/verify`, ...params);\n  }\n\n  /**\n   * Send verification code by email\n   * @Return: ActionResponse\n   */\n  sendVerificationCode(body?: string) {\n    return this.rest.post(`${this.baseUrl}/verify`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Validate verification code and reset password\n   * @Return: ActionResponse\n   */\n  resetPassword(code?: string) {\n    return this.rest.post(`${this.baseUrl}/reset-password`, typeof code === 'object' ? JSON.stringify(code) : code);\n  }\n\n  /**\n   * Change password\n   * @Return: ActionResponse\n   */\n  changePassword(body?: ChangePasswordRequest) {\n    return this.rest.post(`${this.baseUrl}/change-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Check if password was used before (according to password policy)\n   * @Return: ActionResponse\n   */\n  checkUnusedPassword(body?: string) {\n    return this.rest.post(`${this.baseUrl}/check-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user name\n   * @Return: ActionResponse\n   */\n  changeName(body?: string) {\n    return this.rest.put(`${this.baseUrl}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user mobile\n   * @Return: ActionResponse\n   */\n  changeMobile(body?: string) {\n    return this.rest.put(`${this.baseUrl}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get all user accessible accounts for the user\n   * @Return: EntitiesResponse<Account>\n   */\n  getAccounts() {\n    return this.rest.get(`${this.baseUrl}/accounts`);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<UserAccountInfo>\n   */\n  switchAccount(body?: TokenRequest) {\n    return this.rest.post(`${this.baseUrl}/switch-account`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Switch to the next account\n   * @Return: EntityResponse<UserAccountInfo>\n   */\n  switchNext() {\n    return this.rest.post(`${this.baseUrl}/switch-next`, null);\n  }\n\n  /**\n   * Get user profile\n   * @Return: EntityResponse<User>\n   */\n  getProfile() {\n    return this.rest.get(`${this.baseUrl}/profile`);\n  }\n\n  /**\n   * Update user profile\n   * @Return: EntityResponse<User>\n   */\n  setProfile(body?: User) {\n    return this.rest.put(`${this.baseUrl}/profile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get app version\n   * @Return: ActionResponse\n   */\n  getVersion() {\n    return this.rest.get(`${this.baseUrl}/version`);\n  }\n\n  /**\n   * Find list of notifications by filter\n   * @Return: ActionResponse\n   */\n  findNotifications(search?: string, type?: NotificationTypeCode, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/notifications`, ...params);\n  }\n\n  /**\n   * Mark user notification as read\n   * @Return: ActionResponse\n   */\n  readNotification(id?: string) {\n    return this.rest.put(`${this.baseUrl}/notifications/${id}`, null);\n  }\n\n  /**\n   * Delete notification\n   * @Return: ActionResponse\n   */\n  deleteNotification(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/notifications/${id}`);\n  }\n\n}\n","import { AdminAccountService } from './adminAccountService';\nimport { HealthCheckService } from './healthCheckService';\nimport { SysAccountsService } from './sysAccountsService';\nimport { SysUsersService } from './sysUsersService';\nimport { AdminActivitiesService } from './adminActivitiesService';\nimport { AdminPlaningService } from './adminPlaningService';\nimport { AdminReportsService } from './adminReportsService';\nimport { AdminResourcesService } from './adminResourcesService';\nimport { UsrActivitiesService } from './usrActivitiesService';\nimport { UserBookingsService } from './userBookingsService';\nimport { UserPlacementsService } from './userPlacementsService';\nimport { AdminMembersService } from './adminMembersService';\nimport { AdminNotificationsService } from './adminNotificationsService';\nimport { UserAccountsService } from './userAccountsService';\nimport { UsrMembersService } from './usrMembersService';\nimport { UserService } from './userService';\n\nexport const Services = [\n    AdminAccountService,\n    HealthCheckService,\n    SysAccountsService,\n    SysUsersService,\n    AdminActivitiesService,\n    AdminPlaningService,\n    AdminReportsService,\n    AdminResourcesService,\n    UsrActivitiesService,\n    UserBookingsService,\n    UserPlacementsService,\n    AdminMembersService,\n    AdminNotificationsService,\n    UserAccountsService,\n    UsrMembersService,\n    UserService,\n    \n]","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Services } from './lib/services/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CoreConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class CoreLibModule {\n  static forRoot(config: CoreConfig): ModuleWithProviders<CoreLibModule> {\n    // console.log(config);\n    return {\n      ngModule: CoreLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n"]}