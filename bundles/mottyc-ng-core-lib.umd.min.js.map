{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@mottyc/ng-core-lib/lib/enums/AccountRoleCode.ts","ng://@mottyc/ng-core-lib/lib/enums/AccountStatusCode.ts","ng://@mottyc/ng-core-lib/lib/enums/AccountTypeCode.ts","ng://@mottyc/ng-core-lib/lib/enums/BookingStatusCode.ts","ng://@mottyc/ng-core-lib/lib/enums/DayOfWeekCode.ts","ng://@mottyc/ng-core-lib/lib/enums/EntityTypeCode.ts","ng://@mottyc/ng-core-lib/lib/enums/FeatureCode.ts","ng://@mottyc/ng-core-lib/lib/enums/KayakTypeCode.ts","ng://@mottyc/ng-core-lib/lib/enums/ResourceTypeCode.ts","ng://@mottyc/ng-core-lib/lib/enums/RowingBoatTypeCode.ts","ng://@mottyc/ng-core-lib/lib/enums/TimeUnitCode.ts","ng://@mottyc/ng-core-lib/lib/enums/UseTypeCode.ts","ng://@mottyc/ng-core-lib/lib/enums/UserStatusCode.ts","ng://@mottyc/ng-core-lib/lib/enums/UserTypeCode.ts","ng://@mottyc/ng-core-lib/lib/common/AbsoluteTimeFrame.ts","ng://@mottyc/ng-core-lib/lib/common/AccountRole.ts","ng://@mottyc/ng-core-lib/lib/common/AccountSettings.ts","ng://@mottyc/ng-core-lib/lib/common/LoginData.ts","ng://@mottyc/ng-core-lib/lib/common/LoginParams.ts","ng://@mottyc/ng-core-lib/lib/common/RecurrentTimeFrame.ts","ng://@mottyc/ng-core-lib/lib/common/StringKeyValue.ts","ng://@mottyc/ng-core-lib/lib/common/TimeFrame.ts","ng://@mottyc/ng-core-lib/lib/common/UserAccountInfo.ts","ng://@mottyc/ng-core-lib/lib/common/UserInvitation.ts","ng://@mottyc/ng-core-lib/lib/common/UserRegistration.ts","ng://@mottyc/ng-core-lib/lib/entities/BaseEntity.ts","ng://@mottyc/ng-core-lib/lib/entities/Account.ts","ng://@mottyc/ng-core-lib/lib/entities/ApiKey.ts","ng://@mottyc/ng-core-lib/lib/entities/AuditLog.ts","ng://@mottyc/ng-core-lib/lib/entities/Booking.ts","ng://@mottyc/ng-core-lib/lib/entities/Feature.ts","ng://@mottyc/ng-core-lib/lib/entities/FeaturesGroup.ts","ng://@mottyc/ng-core-lib/lib/entities/Incident.ts","ng://@mottyc/ng-core-lib/lib/entities/Kayak.ts","ng://@mottyc/ng-core-lib/lib/entities/Placement.ts","ng://@mottyc/ng-core-lib/lib/entities/Resource.ts","ng://@mottyc/ng-core-lib/lib/entities/RowingBoat.ts","ng://@mottyc/ng-core-lib/lib/entities/User.ts","ng://@mottyc/ng-core-lib/lib/entities/Verification.ts","ng://@mottyc/ng-core-lib/lib/messages/AccountIdRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/ActionResponse.ts","ng://@mottyc/ng-core-lib/lib/messages/AdminBoatFindRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/AdminCreateBoatRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/AdminCreateKayakRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/AdminKayakFindRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/AdminUpdateBoatRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/AdminUpdateKayakRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/BoatIdRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/BookingIdRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/ChangePasswordRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/EmptyRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/EmptyResponse.ts","ng://@mottyc/ng-core-lib/lib/messages/EntitiesResponse.ts","ng://@mottyc/ng-core-lib/lib/messages/EntitiesResponseOfAccount.ts","ng://@mottyc/ng-core-lib/lib/messages/EntitiesResponseOfBooking.ts","ng://@mottyc/ng-core-lib/lib/messages/EntitiesResponseOfKayak.ts","ng://@mottyc/ng-core-lib/lib/messages/EntitiesResponseOfPlacement.ts","ng://@mottyc/ng-core-lib/lib/messages/EntitiesResponseOfRowingBoat.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponse.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponseOfAccount.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponseOfBooking.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponseOfKayak.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponseOfLoginData.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponseOfPlacement.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponseOfRowingBoat.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponseOfUser.ts","ng://@mottyc/ng-core-lib/lib/messages/EntityResponseOfUserAccountInfo.ts","ng://@mottyc/ng-core-lib/lib/messages/KayakIdRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/PlacementIdRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/QueryResponse.ts","ng://@mottyc/ng-core-lib/lib/messages/QueryResponseOfAccount.ts","ng://@mottyc/ng-core-lib/lib/messages/QueryResponseOfBooking.ts","ng://@mottyc/ng-core-lib/lib/messages/QueryResponseOfKayak.ts","ng://@mottyc/ng-core-lib/lib/messages/QueryResponseOfPlacement.ts","ng://@mottyc/ng-core-lib/lib/messages/QueryResponseOfRowingBoat.ts","ng://@mottyc/ng-core-lib/lib/messages/QueryResponseOfUser.ts","ng://@mottyc/ng-core-lib/lib/messages/StreamResponse.ts","ng://@mottyc/ng-core-lib/lib/messages/SysAdminAccountCreateRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/SysAdminAccountResetRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/SysAdminAccountUpdateRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/SysAdminAccountsFindRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/TokenRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserAccountsFindRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserBookingFindRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserByEmailRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserCreateBookingRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserCreatePlacementRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserIdRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserIdsRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserPlacementFindRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceChangeMobileRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceChangeNameRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceChangePasswordRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceCheckPasswordRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceLoginRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceResetPasswordRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceSendVerificationRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceSwitchAccountRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserServiceVerifyLoginRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserTokenRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserUpdateBookingRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UserUpdatePlacementRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceChangeDefaultAccountRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceChangeMobileRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceChangeNameRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceChangeRoleRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceChangeStatusRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceChangeTypeRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceCreateRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceExportRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceFindRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceInviteRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceSetRolesRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/UsersServiceUpdateRequest.ts","ng://@mottyc/ng-core-lib/lib/messages/WebSocketMessageHeader.ts","ng://@mottyc/ng-core-lib/utils/localStorage-util.ts","ng://@mottyc/ng-core-lib/utils/rest-util.ts","ng://@mottyc/ng-core-lib/config.ts","ng://@mottyc/ng-core-lib/lib/services/adminBoatsService.ts","ng://@mottyc/ng-core-lib/lib/services/adminKayaksService.ts","ng://@mottyc/ng-core-lib/lib/services/healthCheckService.ts","ng://@mottyc/ng-core-lib/lib/services/userBookingsService.ts","ng://@mottyc/ng-core-lib/lib/services/userPlacementsService.ts","ng://@mottyc/ng-core-lib/lib/services/usersService.ts","ng://@mottyc/ng-core-lib/lib/services/userAccountsService.ts","ng://@mottyc/ng-core-lib/lib/services/userService.ts","ng://@mottyc/ng-core-lib/lib/services/sysAccountsService.ts","ng://@mottyc/ng-core-lib/lib/services/sysUsersService.ts","ng://@mottyc/ng-core-lib/lib/services/services.export.ts","ng://@mottyc/ng-core-lib/core-lib.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","AccountRoleCode","AccountStatusCode","AccountTypeCode","BookingStatusCode","DayOfWeekCode","EntityTypeCode","FeatureCode","KayakTypeCode","ResourceTypeCode","RowingBoatTypeCode","TimeUnitCode","UseTypeCode","UserStatusCode","UserTypeCode","name","startTime","endTime","active","accountId","role","retentionDays","accessToken","accountRole","userId","userName","userEmail","userType","userStatus","changePassword","email","password","dayOfWeek","key","from","to","account","loginData","features","mobile","defaultAccount","accountRoles","type","tempPassword","verifyByEmail","description","id","docType","createdOn","updatedOn","_type","Account","_super","BaseEntity","ApiKey","AuditLog","Booking","Feature","FeaturesGroup","Incident","Kayak","Placement","Resource","RowingBoat","User","Verification","code","data","usedBy","resourceId","sort","page","pageSize","body","oldPassword","newPassword","EntitiesResponseOfAccount","EntitiesResponse","EntitiesResponseOfBooking","EntitiesResponseOfKayak","EntitiesResponseOfPlacement","EntitiesResponseOfRowingBoat","EntityResponseOfAccount","EntityResponse","EntityResponseOfBooking","EntityResponseOfKayak","EntityResponseOfLoginData","EntityResponseOfPlacement","EntityResponseOfRowingBoat","EntityResponseOfUser","EntityResponseOfUserAccountInfo","pages","total","queryDef","QueryResponseOfAccount","QueryResponse","QueryResponseOfBooking","QueryResponseOfKayak","QueryResponseOfPlacement","QueryResponseOfRowingBoat","QueryResponseOfUser","content","days","search","status","bookingId","exp","format","fields","roles","opcode","version","messageId","correlationId","sessionId","op","ver","cid","sid","tokenKey","setToken","token","localStorage","setItem","removeToken","removeItem","RestUtil","http","headers","HttpHeaders","set","download","fileName","url","params","_i","resourceUrl","buildUrl","apply","ext","forEach","arr","split","toLowerCase","downloadLink","get","responseType","subscribe","downloadURL","window","URL","createObjectURL","link","document","createElement","href","click","_this","observe","pipe","map","res","processResponse","catchError","handleError","post","put","delete","join","response","LocalStorageUtil.removeToken","Error","LocalStorageUtil.setToken","message","Promise","reject","core","ɵɵinject","HttpClient","factory","ɵfac","AdminBoatsService","config","rest","baseUrl","api","JSON","stringify","update","find","_a","AdminKayaksService","HealthCheckService","health","UserBookingsService","UserPlacementsService","UsersService","invite","reInvite","changeName","changeMobile","changeType","getByEmail","getUserToken","UserAccountsService","UserService","login","refreshToken","verifyLoginKey","sendVerificationCode","resetPassword","checkUnusedPassword","switchAccount","SysAccountsService","purge","reset","SysUsersService","changeStatus","changeDefaultAccount","setRoles","mergeRoles","Services","CoreLibModule","forRoot","ngModule","providers","provide","useValue","imports","CommonModule","HttpClientModule","getItem"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/* \n   Account role code (represent role of user in the account) \n*/\nexport enum AccountRoleCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account administrator can perform all operations [1] \n    ADMIN = 1,\n \n    // Part of a club staff [2] \n    STAFF = 2,\n \n    // Club Member [3] \n    MEMBER = 3,\n \n    // Olympic team [4] \n    TEAM = 4,\n \n    // Para-olympic team [5] \n    PARA = 5,\n \n    // Club guest [6] \n    GUEST = 6,\n \n}","/* \n   Account status code \n*/\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account [1] \n    ACTIVE = 1,\n \n    // Suspended (non-active) account [2] \n    SUSPENDED = 2,\n \n    // Deleted account [3] \n    DELETED = 3,\n \n}","/* \n   Account type code \n*/\nexport enum AccountTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Demo account for Tests and Demos [1] \n    DEMO = 1,\n \n    // Trial account for pilots [2] \n    TRIAL = 2,\n \n    // Active account for customer [3] \n    CUSTOMER = 3,\n \n}","/* \n   Booking status code \n*/\nexport enum BookingStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Pending booking request [1] \n    PENDING = 1,\n \n    // Approved booking [2] \n    APPROVED = 2,\n \n    // Cancelled booking [3] \n    CANCELLED = 3,\n \n}","/* \n   Day of week code \n*/\nexport enum DayOfWeekCode {\n \n    // Sunday [0] \n    SUN = 0,\n \n    // Monday [1] \n    MON = 1,\n \n    // Tuesday [2] \n    TUE = 2,\n \n    // Wednesday [3] \n    WED = 3,\n \n    // Thursday [4] \n    THU = 4,\n \n    // Friday [5] \n    FRI = 5,\n \n    // Saturday [6] \n    SAT = 6,\n \n}","/* \n   Entity type code (represent entity type in the system) \n*/\nexport enum EntityTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account [1] \n    ACCOUNT = 1,\n \n    // User [2] \n    USER = 2,\n \n    // API Key [3] \n    API_KEY = 3,\n \n    // Audit Log [4] \n    AUDIT_LOG = 4,\n \n    // Booking [5] \n    BOOKING = 5,\n \n    // Feature [6] \n    FEATURE = 6,\n \n    // Features Group [7] \n    FEATURES_GROUP = 7,\n \n    // Incident [8] \n    INCIDENT = 8,\n \n    // Booking Placement [9] \n    PLACEMENT = 9,\n \n    // Club Resource [10] \n    RESOURCE = 10,\n \n}","/* \n   Feature codes \n*/\nexport enum FeatureCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Admin module [1] \n    MODULE_ADMIN = 1,\n \n    // System admin module [2] \n    MODULE_SYSADMIN = 2,\n \n}","/* \n   Kayak type code \n*/\nexport enum KayakTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Ocean Kayak [1] \n    OCEAN = 1,\n \n    // Surf Ski Kayak [2] \n    SURFSKI = 2,\n \n    // Waves Kayak [3] \n    WAVES = 3,\n \n}","/* \n   Resource type code (represent resource in the system) \n*/\nexport enum ResourceTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Rowing Boat [1] \n    ROWING_BOAT = 1,\n \n    // Kayak [2] \n    KAYAK = 2,\n \n}","/* \n   Rowing boat type code \n*/\nexport enum RowingBoatTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Sculling 1X [1] \n    SCULL_1X = 1,\n \n    // Sculling 1X Wide [2] \n    SCULL_1X_WIDE = 2,\n \n    // Sculling 1X Competition [3] \n    SCULL_1X_COMP = 3,\n \n    // Sculling 1X Para Olympic [4] \n    SCULL_1X_PARA = 4,\n \n    // Sculling 2X [5] \n    SCULL_2X = 5,\n \n    // Sculling 2X Wide [6] \n    SCULL_2X_WIDE = 6,\n \n    // Sculling 2X Competition [7] \n    SCULL_2X_COMP = 7,\n \n    // Sculling 2X Para Olympic [8] \n    SCULL_2X_PARA = 8,\n \n    // Sweeping 2- Coxless Pair [9] \n    SWEEP_2_COXLESS = 9,\n \n    // Coastal 2X [10] \n    COASTAL_2X = 10,\n \n    // Sculling 4X Quad [11] \n    SCULL_4X = 11,\n \n    // Sculling 4X Quad with cox [12] \n    SCULL_4X_COX = 12,\n \n    // Sweeping 4- Coxless Quad [13] \n    SWEEP_4_COXLESS = 13,\n \n    // Sculling 4X Competition [14] \n    SCULL_4X_COMP = 14,\n \n    // Sculling 4X Para Olympic [15] \n    SCULL_4X_PARA = 15,\n \n    // Coastal 4X with cox [16] \n    COASTAL_4X_COX = 16,\n \n    // Sweeping 8 - with cox [17] \n    SWEEP_8_COX = 17,\n \n    // Sculling 8 - with cox [18] \n    SCULL_8X_COX = 18,\n \n}","/* \n   Time unit interval \n*/\nexport enum TimeUnitCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Second interval [1] \n    SECOND = 1,\n \n    // Minute interval [2] \n    MINUTE = 2,\n \n    // Hour interval [3] \n    HOUR = 3,\n \n    // Day interval [4] \n    DAY = 4,\n \n    // Week interval [5] \n    WEEK = 5,\n \n    // Month interval [6] \n    MONTH = 6,\n \n}","/* \n   Resource Used by \n*/\nexport enum UseTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Used by club members [1] \n    MEMBER = 1,\n \n    // Used by club staff [2] \n    STAFF = 2,\n \n    // Used by team members [3] \n    TEAM = 3,\n \n    // Used by para-olympic team [4] \n    PARA = 4,\n \n}","/* \n   User status code \n*/\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [4] \n    BLOCKED = 3,\n \n    // Suspended user (about to be deleted) [8] \n    SUSPENDED = 4,\n \n}","/* \n   User type code \n*/\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // Account user - has access to specific accounts with role based access control [4] \n    USER = 4,\n \n    // Account service - to be used by other systems to perform actions using the API (can't login as a user to the portal)' [5]` \n    SERVICE = 5,\n \n}","\n/* \n   Schedule time frame\n   Times are described in ISO 8601 format (See: https://www.w3.org/TR/NOTE-datetime).\n   The format is: YYYY-MM-DDThh:mm:ssTZD where:\n   <ul>\n   <li>YYYY = four-digit year</li>\n   <li>MM   = two-digit month (01=January, etc.)</li>\n   <li>DD   = two-digit day of month (01 through 31)</li>\n   <li>hh   = two digits of hour (00 through 23) (am/pm NOT allowed)</li>\n   <li>mm   = two digits of minute (00 through 59)</li>\n   <li>ss   = two digits of second (00 through 59)\n   <li>TZD  = time zone designator (Z for UTC or +hh:mm or -hh:mm for Timezone offset)</li>\n   </ul> \n*/\nexport class AbsoluteTimeFrame {\n \n    // Name of time frame \n    public name: string;\n \n    // Start time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    public startTime: string;\n \n    // End time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    public endTime: string;\n \n    // Specify if this time frame is active \n    public active: boolean;\n \n    constructor(name?: string, startTime?: string, endTime?: string, active?: boolean) { \n        this.name = name;\n        this.startTime = startTime;\n        this.endTime = endTime;\n        this.active = active;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n   Account role represents the role of the user in the account \n*/\nexport class AccountRole {\n \n    // Account Id \n    public accountId: string;\n \n    // User role in the account \n    public role: AccountRoleCode;\n \n    constructor(accountId?: string, role?: AccountRoleCode) { \n        this.accountId = accountId;\n        this.role = role;\n    }\n\n}\n\n\n","\n/* \n   Account specific settings \n*/\nexport class AccountSettings {\n \n    // Operational (dynamic) data retention time in days (1 - 365) \n    public retentionDays: number;\n \n    constructor(retentionDays?: number) { \n        this.retentionDays = retentionDays;\n    }\n\n}\n\n\n","import { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n/* \n   Login data (returned by the API after successful login) \n*/\nexport class LoginData {\n \n    // Access token to use (for the default account) \n    public accessToken: string;\n \n    // Current account id and role \n    public accountRole: AccountRole;\n \n    // User Id \n    public userId: string;\n \n    // User name \n    public userName: string;\n \n    // User email \n    public userEmail: string;\n \n    // User type \n    public userType: UserTypeCode;\n \n    // User status \n    public userStatus: UserStatusCode;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    constructor(accessToken?: string, accountRole?: AccountRole, userId?: string, userName?: string, userEmail?: string, userType?: UserTypeCode, userStatus?: UserStatusCode, changePassword?: boolean) { \n        this.accessToken = accessToken;\n        this.accountRole = accountRole;\n        this.userId = userId;\n        this.userName = userName;\n        this.userEmail = userEmail;\n        this.userType = userType;\n        this.userStatus = userStatus;\n        this.changePassword = changePassword;\n    }\n\n}\n\n\n","\n/* \n   Login parameters data model \n*/\nexport class LoginParams {\n \n    // User email \n    public email: string;\n \n    // User password \n    public password: string;\n \n    // Access token - in case of re-login with existing token \n    public accessToken: string;\n \n    constructor(email?: string, password?: string, accessToken?: string) { \n        this.email = email;\n        this.password = password;\n        this.accessToken = accessToken;\n    }\n\n}\n\n\n","import { DayOfWeekCode } from '../enums/DayOfWeekCode';\n\n/* \n   Schedule recurrent time frame \n*/\nexport class RecurrentTimeFrame {\n \n    // Day of week - based on ISO8601 \n    public dayOfWeek: DayOfWeekCode;\n \n    // Start time in the format of HH:mm \n    public startTime: string;\n \n    // End time in the format of HH:mm \n    public endTime: string;\n \n    constructor(dayOfWeek?: DayOfWeekCode, startTime?: string, endTime?: string) { \n        this.dayOfWeek = dayOfWeek;\n        this.startTime = startTime;\n        this.endTime = endTime;\n    }\n\n}\n\n\n","\n/* \n   Key Value string tuple \n*/\nexport class StringKeyValue {\n \n    // Key of tuple \n    public key: string;\n \n    // Value of tuple \n    public value: string;\n \n    constructor(key?: string, value?: string) { \n        this.key = key;\n        this.value = value;\n    }\n\n}\n\n\n","\n/* \n   Time frame (for search and reports) \n*/\nexport class TimeFrame {\n \n    // Start time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    constructor(from?: number, to?: number) { \n        this.from = from;\n        this.to = to;\n    }\n\n}\n\n\n","import { LoginData } from '../common/LoginData';\nimport { FeatureCode } from '../enums/FeatureCode';\nimport { Account } from '../entities/Account';\n\n/* \n   User Account info (returned by switch-account method) \n*/\nexport class UserAccountInfo {\n \n    // Account data \n    public account: Account;\n \n    // Login data \n    public loginData: LoginData;\n \n    // List of features enabled for this account \n    public features: FeatureCode[];\n \n    constructor(account?: Account, loginData?: LoginData, features?: FeatureCode[]) { \n        this.account = account;\n        this.loginData = loginData;\n        this.features = features;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n   User invitation data model - used by account admin to invite user to the account \n*/\nexport class UserInvitation {\n \n    // User email \n    public email: string;\n \n    // User role in the account \n    public role: AccountRoleCode;\n \n    constructor(email?: string, role?: AccountRoleCode) { \n        this.email = email;\n        this.role = role;\n    }\n\n}\n\n\n","import { AccountRole } from '../common/AccountRole';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n/* \n   User registration data model - used by self registered users \n*/\nexport class UserRegistration {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // List of accounts and roles the user has access to \n    public accountRoles: AccountRole[];\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // Temporary password (leave empty for system generated password) \n    public tempPassword: string;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    // Flag to send email verification to the user \n    public verifyByEmail: boolean;\n \n    // User description \n    public description: string;\n \n    constructor(name?: string, email?: string, mobile?: string, defaultAccount?: string, accountRoles?: AccountRole[], type?: UserTypeCode, tempPassword?: string, changePassword?: boolean, verifyByEmail?: boolean, description?: string) { \n        this.name = name;\n        this.email = email;\n        this.mobile = mobile;\n        this.defaultAccount = defaultAccount;\n        this.accountRoles = accountRoles;\n        this.type = type;\n        this.tempPassword = tempPassword;\n        this.changePassword = changePassword;\n        this.verifyByEmail = verifyByEmail;\n        this.description = description;\n    }\n\n}\n\n\n","\n/* \n   Base entity includes common fields for all entities (persistence objects) in the system \n*/\nexport class BaseEntity {\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n    constructor(id?: string, docType?: string, createdOn?: number, updatedOn?: number) { \n        this.id = id;\n        this._type = docType;\n        this.createdOn = createdOn;\n        this.updatedOn = updatedOn;\n    }\n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { AccountSettings } from '../common/AccountSettings';\nimport { ResourceTypeCode } from '../enums/ResourceTypeCode';\n\n/* \n   Account entity in the system represents a club \n*/\nexport class Account extends BaseEntity {\n \n    // Account name \n    public name: string;\n \n    // Account key \n    public key: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    public type: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    public status: AccountStatusCode;\n \n    // When the account was suspended [Epoch milliseconds Timestamp] second inline field documentation \n    public suspendedOn: number;\n \n    // List of associated account groups (for feature toggle) \n    public groups: string[];\n \n    // Account timezone (IANA format, default is UTC) \n    public timezone: string;\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    public expiredOn: number;\n \n    // Account description \n    public description: string;\n \n    // Account specific settings \n    public settings: AccountSettings;\n \n    // Resource type managed in the account (boat, kayak...) \n    public resourceType: ResourceTypeCode;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { StringKeyValue } from '../common/StringKeyValue';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   API Key is used per application (e.g. Portal, Mobile App) or service to identify the consumer.\n   The access to sets of REST endpoints is restricted according the API key.\n   API key also dictates the default session TTL per application (e.g. 20 minutes for Portal or Console, 30 days for Mobile app)\n   The application/system name is the Entity Id, the API key itself is not stored in the DB but generated on the fly. \n*/\nexport class ApiKey extends BaseEntity {\n \n    // The API Key (this value is auto generated and not stored in the DB) \n    public key: string;\n \n    // Default session token TTL (in minutes), 0 means no TTL \n    public ttl: number;\n \n    // Access Control List key value pair - the key is the REST resource name, the value is subset of CRUD (Create | Read |Update |Delete) \n    public acl: StringKeyValue[];\n \n    // Key version (for key rotation) \n    public version: number;\n \n    // Flag to indicate if this a system key or user defined key \n    public isSystemKey: boolean;\n \n    // Flag to indicate if the key is enabled \n    public isEnabled: boolean;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { EntityTypeCode } from '../enums/EntityTypeCode';\n\n/* \n   Audit Log entry - represents a single action done by user \n*/\nexport class AuditLog extends BaseEntity {\n \n    // Account Id \n    public accountId: string;\n \n    // User Id \n    public userId: string;\n \n    // User role in the account when the action was performed \n    public userRole: AccountRoleCode;\n \n    // User name when the action was performed \n    public userName: string;\n \n    // Action that was performed \n    public action: string;\n \n    // Changed item type \n    public itemType: EntityTypeCode;\n \n    // Changed item Id \n    public itemId: string;\n \n    // Item Name \n    public itemName: string;\n \n    // Item value before change [Json] \n    public beforeChange: string;\n \n    // Item delta after change [Json] \n    public afterChange: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Booking request\n   A booking is a pending request to book a resource for specific time for user(s), once it is approved, it becomes a placement \n*/\nexport class Booking extends BaseEntity {\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    public placementOn: number;\n \n    // For how log to book the resource [minutes] \n    public duration: number;\n \n    // User Id who requested the booking \n    public requestedBy: string;\n \n    // List of User Ids for the placement \n    public requestedFor: string[];\n \n    // Booking for specific resource \n    public resourceId: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { FeatureCode } from '../enums/FeatureCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   System functionality (feature) description \n*/\nexport class Feature extends BaseEntity {\n \n    // Feature code \n    public code: FeatureCode;\n \n    // Feature name \n    public name: string;\n \n    // Feature description \n    public description: string;\n \n    // Feature category \n    public category: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { FeatureCode } from '../enums/FeatureCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Group of features \n*/\nexport class FeaturesGroup extends BaseEntity {\n \n    // Features group name \n    public name: string;\n \n    // List of associated features \n    public features: FeatureCode[];\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Incident \n*/\nexport class Incident extends BaseEntity {\n \n    // Resource Id (in the club) \n    public resourceId: string;\n \n    // List of involved users \n    public involved: string[];\n \n    // When the incident occurred [Epoch milliseconds Timestamp] \n    public occurredOn: number;\n \n    // Incident description \n    public description: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { ResourceTypeCode } from '../enums/ResourceTypeCode';\nimport { UseTypeCode } from '../enums/UseTypeCode';\nimport { KayakTypeCode } from '../enums/KayakTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Kayak resource type (derived from Resource) \n*/\nexport class Kayak extends BaseEntity {\n \n    // Resource type \n    public resourceType: ResourceTypeCode;\n \n    // Resource Id (internal ID in the club) \n    public resourceId: string;\n \n    // Available for members or under repair ? \n    public isAvailable: boolean;\n \n    // Resource type \n    public usedBy: UseTypeCode;\n \n    // Kayak Type (Wave | Ocean | Surfski) \n    public subType: KayakTypeCode;\n \n    // Manufacturer \n    public brand: string;\n \n    // Number of paddlers \n    public paddlers: number;\n \n    // Is wide kayak ? \n    public isWide: boolean;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BookingStatusCode } from '../enums/BookingStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Placement - after booking approval, it is becoming a placement (derived from Booking) \n*/\nexport class Placement extends BaseEntity {\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    public placementOn: number;\n \n    // For how log to book the resource [minutes] \n    public duration: number;\n \n    // User Id who requested the booking \n    public requestedBy: string;\n \n    // List of User Ids for the placement \n    public requestedFor: string[];\n \n    // Booking for specific resource \n    public resourceId: string;\n \n    // Reference to the original booking request Id \n    public bookingId: string;\n \n    // When the placement was approved [Epoch milliseconds Timestamp] \n    public approvedOn: number;\n \n    // Booking status \n    public status: BookingStatusCode;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { ResourceTypeCode } from '../enums/ResourceTypeCode';\nimport { UseTypeCode } from '../enums/UseTypeCode';\n\n/* \n   Resource type \n*/\nexport class Resource extends BaseEntity {\n \n    // Resource type \n    public resourceType: ResourceTypeCode;\n \n    // Resource Id (internal ID in the club) \n    public resourceId: string;\n \n    // Available for members or under repair ? \n    public isAvailable: boolean;\n \n    // Resource type \n    public usedBy: UseTypeCode;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { ResourceTypeCode } from '../enums/ResourceTypeCode';\nimport { UseTypeCode } from '../enums/UseTypeCode';\nimport { RowingBoatTypeCode } from '../enums/RowingBoatTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Rowing boat resource type (derived from Resource) \n*/\nexport class RowingBoat extends BaseEntity {\n \n    // Resource type \n    public resourceType: ResourceTypeCode;\n \n    // Resource Id (internal ID in the club) \n    public resourceId: string;\n \n    // Available for members or under repair ? \n    public isAvailable: boolean;\n \n    // Resource type \n    public usedBy: UseTypeCode;\n \n    // Rowing boat type (1X, @x, 2-, 4X, 4x+, 4-, 8+, 8X+ ...) \n    public subType: RowingBoatTypeCode;\n \n    // Minimum boat weight [Kg] \n    public minWeight: number;\n \n    // Maximum boat weight [Kg] \n    public maxWeight: number;\n \n    // Manufacturer \n    public brand: string;\n \n    // Number of rowers \n    public rowers: number;\n \n    // Is sweeping or sculling boat ? \n    public isSweep: boolean;\n \n    // Is cox required ? \n    public isCox: boolean;\n \n    // Is wide boat ? \n    public isWide: boolean;\n \n    // Is coastal boat ? \n    public isCoastal: boolean;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRole } from '../common/AccountRole';\nimport { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   User type \n*/\nexport class User extends BaseEntity {\n \n    // User name \n    public name: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // Password salt \n    public salt: string;\n \n    // Password hash \n    public hash: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    public type: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    public status: UserStatusCode;\n \n    // When user was last suspended [Epoch milliseconds Timestamp] \n    public suspendedOn: number;\n \n    // Number of Sign-in Attempts \n    public signInAttempts: number;\n \n    // User must change password on next login \n    public changePassword: boolean;\n \n    // When user created his password [Epoch milliseconds Timestamp] \n    public passwordChangedOn: number;\n \n    // List of accounts and roles the user has access to \n    public accountRoles: AccountRole[];\n \n    // Default account Id \n    public defaultAccount: string;\n \n    // User description \n    public description: string;\n \n    // User birthday (to determine age) [Epoch milliseconds Timestamp] \n    public birthday: number;\n \n    // User weight [Kg] \n    public weight: number;\n \n    // User Height [Cm] \n    public height: number;\n \n    // User Shoe Size [European size] \n    public shoeSize: number;\n \n    // User level [1,2,3] \n    public level: number;\n \n    // User member in the club since [Epoch milliseconds Timestamp] \n    public memberSince: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    public expiration: number;\n \n    // User can be cox ? \n    public isCox: boolean;\n \n    // User can be mentor ? \n    public isMentor: boolean;\n \n    // Training time [minutes] \n    public trainingTime: number;\n \n    // Restrictions \n    public restrictions: string;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","import { BaseEntity } from '../entities/BaseEntity';\n\n/* \n   Verification type used to verify user with a temporary code \n*/\nexport class Verification extends BaseEntity {\n \n    // Verification code \n    public code: string;\n \n    // Verification for user id \n    public userId: string;\n \n    // User email \n    public email: string;\n \n    // User mobile phone number (for notification and validation) \n    public mobile: string;\n \n    // When the verification code was sent [Epoch milliseconds Timestamp] \n    public sent: number;\n \n    // Entity Id \n    public id: string;\n \n    // Entity document type (system field) \n    public _type: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    public createdOn: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    public updatedOn: number;\n \n\n}\n\n\n","\n/*  \n*/\nexport class AccountIdRequest {\n \n    // Account Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/* \n   Entity action response message returned for any create/update action on entity \n*/\nexport class ActionResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Entity key \n    public key: string;\n \n    // Additional data \n    public data: string;\n \n    constructor(code?: number, error?: string, key?: string, data?: string) { \n        this.code = code;\n        this.error = error;\n        this.key = key;\n        this.data = data;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AdminBoatFindRequest {\n \n    // Filter by usage allocation (empty for no filter) \n    public usedBy: string;\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(usedBy?: string, resourceId?: string, sort?: string, page?: number, pageSize?: number) { \n        this.usedBy = usedBy;\n        this.resourceId = resourceId;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { RowingBoat } from '../entities/RowingBoat';\n\n/*  \n*/\nexport class AdminCreateBoatRequest {\n \n    // Rowing boat data \n    public body: RowingBoat;\n \n    constructor(body?: RowingBoat) { \n        this.body = body;\n    }\n\n}\n\n\n","import { Kayak } from '../entities/Kayak';\n\n/*  \n*/\nexport class AdminCreateKayakRequest {\n \n    // Kayak data \n    public body: Kayak;\n \n    constructor(body?: Kayak) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class AdminKayakFindRequest {\n \n    // Filter by usage allocation (empty for no filter) \n    public usedBy: string;\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(usedBy?: string, resourceId?: string, sort?: string, page?: number, pageSize?: number) { \n        this.usedBy = usedBy;\n        this.resourceId = resourceId;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { RowingBoat } from '../entities/RowingBoat';\n\n/*  \n*/\nexport class AdminUpdateBoatRequest {\n \n    // Rowing boat data \n    public body: RowingBoat;\n \n    constructor(body?: RowingBoat) { \n        this.body = body;\n    }\n\n}\n\n\n","import { Kayak } from '../entities/Kayak';\n\n/*  \n*/\nexport class AdminUpdateKayakRequest {\n \n    // Kayak data \n    public body: Kayak;\n \n    constructor(body?: Kayak) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class BoatIdRequest {\n \n    // Rowing boat Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class BookingIdRequest {\n \n    // Booking Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/* \n   Change Password request message \n*/\nexport class ChangePasswordRequest {\n \n    // User Id \n    public userId: string;\n \n    // Old Password \n    public oldPassword: string;\n \n    // New Password \n    public newPassword: string;\n \n    constructor(userId?: string, oldPassword?: string, newPassword?: string) { \n        this.userId = userId;\n        this.oldPassword = oldPassword;\n        this.newPassword = newPassword;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class EmptyRequest {\n \n    constructor() { \n    }\n\n}\n\n\n","\n/*  \n*/\nexport class EmptyResponse {\n \n    constructor() { \n    }\n\n}\n\n\n","\n/* \n   Entities response message returned for read operation on multiple entities \n*/\nexport class EntitiesResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    constructor(code?: number, error?: string) { \n        this.code = code;\n        this.error = error;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfAccount extends EntitiesResponse {\n \n    // Account list \n    public list: Account[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Booking } from '../entities/Booking';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfBooking extends EntitiesResponse {\n \n    // Booking list \n    public list: Booking[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Kayak } from '../entities/Kayak';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfKayak extends EntitiesResponse {\n \n    // Kayaks list \n    public list: Kayak[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { Placement } from '../entities/Placement';\n\n/*  \n*/\nexport class EntitiesResponseOfPlacement extends EntitiesResponse {\n \n    // Placement list \n    public list: Placement[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { RowingBoat } from '../entities/RowingBoat';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\n\n/*  \n*/\nexport class EntitiesResponseOfRowingBoat extends EntitiesResponse {\n \n    // Rowing Boats list \n    public list: RowingBoat[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","\n/* \n   Entity response message returned for read operation on a single entity \n*/\nexport class EntityResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    constructor(code?: number, error?: string) { \n        this.code = code;\n        this.error = error;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfAccount extends EntityResponse {\n \n    // Account \n    public entity: Account;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Booking } from '../entities/Booking';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfBooking extends EntityResponse {\n \n    // Booking \n    public entity: Booking;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { EntityResponse } from '../messages/EntityResponse';\nimport { Kayak } from '../entities/Kayak';\n\n/*  \n*/\nexport class EntityResponseOfKayak extends EntityResponse {\n \n    // Kayak \n    public entity: Kayak;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { LoginData } from '../common/LoginData';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfLoginData extends EntityResponse {\n \n    // Login data \n    public entity: LoginData;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { Placement } from '../entities/Placement';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfPlacement extends EntityResponse {\n \n    // Placement \n    public entity: Placement;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { RowingBoat } from '../entities/RowingBoat';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfRowingBoat extends EntityResponse {\n \n    // Rowing Boat \n    public entity: RowingBoat;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { User } from '../entities/User';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfUser extends EntityResponse {\n \n    // User data \n    public entity: User;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","import { UserAccountInfo } from '../common/UserAccountInfo';\nimport { EntityResponse } from '../messages/EntityResponse';\n\n/*  \n*/\nexport class EntityResponseOfUserAccountInfo extends EntityResponse {\n \n    // User account info \n    public entity: UserAccountInfo;\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n\n}\n\n\n","\n/*  \n*/\nexport class KayakIdRequest {\n \n    // Kayak Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class PlacementIdRequest {\n \n    // Placement Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/* \n   Query response message returned for find operation (with pagination) on multiple entities \n*/\nexport class QueryResponse {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n    constructor(code?: number, error?: string, page?: number, pageSize?: number, pages?: number, total?: number, queryDef?: string, docType?: string) { \n        this.code = code;\n        this.error = error;\n        this.page = page;\n        this.pageSize = pageSize;\n        this.pages = pages;\n        this.total = total;\n        this.queryDef = queryDef;\n        this.docType = docType;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfAccount extends QueryResponse {\n \n    // Account list \n    public list: Account[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Booking } from '../entities/Booking';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfBooking extends QueryResponse {\n \n    // Booking list \n    public list: Booking[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Kayak } from '../entities/Kayak';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfKayak extends QueryResponse {\n \n    // Kayaks list \n    public list: Kayak[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { Placement } from '../entities/Placement';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfPlacement extends QueryResponse {\n \n    // Placement list \n    public list: Placement[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { RowingBoat } from '../entities/RowingBoat';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfRowingBoat extends QueryResponse {\n \n    // Rowing Boats list \n    public list: RowingBoat[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","import { User } from '../entities/User';\nimport { QueryResponse } from '../messages/QueryResponse';\n\n/*  \n*/\nexport class QueryResponseOfUser extends QueryResponse {\n \n    // User list \n    public list: User[];\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Current page (Bulk) number \n    public page: number;\n \n    // Size of page (items in bulk) \n    public pageSize: number;\n \n    // Total number of pages \n    public pages: number;\n \n    // Total number of items in the query \n    public total: number;\n \n    // Query definition spec as Json string \n    public queryDef: string;\n \n    // Entity type \n    public docType: string;\n \n\n}\n\n\n","\n/* \n   Response of byte array \n*/\nexport class StreamResponse {\n \n    // \n    public content: string;\n \n    constructor(content?: string) { \n        this.content = content;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\n\n/*  \n*/\nexport class SysAdminAccountCreateRequest {\n \n    // Account data \n    public body: Account;\n \n    constructor(body?: Account) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class SysAdminAccountResetRequest {\n \n    // Account Id \n    public id: string;\n \n    // Retention time in days \n    public days: number;\n \n    constructor(id?: string, days?: number) { \n        this.id = id;\n        this.days = days;\n    }\n\n}\n\n\n","import { Account } from '../entities/Account';\n\n/*  \n*/\nexport class SysAdminAccountUpdateRequest {\n \n    // Account data \n    public body: Account;\n \n    constructor(body?: Account) { \n        this.body = body;\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n/*  \n*/\nexport class SysAdminAccountsFindRequest {\n \n    // Filter by name or partial name \n    public search: string;\n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    public type: AccountTypeCode[];\n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    public status: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/* \n   Token request message \n*/\nexport class TokenRequest {\n \n    // Error code (0 for success) \n    public code: number;\n \n    // Error message \n    public error: string;\n \n    // Account Id \n    public accountId: string;\n \n    constructor(code?: number, error?: string, accountId?: string) { \n        this.code = code;\n        this.error = error;\n        this.accountId = accountId;\n    }\n\n}\n\n\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n/*  \n*/\nexport class UserAccountsFindRequest {\n \n    // Filter by name or partial name \n    public search: string;\n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    public type: AccountTypeCode[];\n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    public status: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserBookingFindRequest {\n \n    // Filter by user who placed the booking \n    public userId: string;\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(userId?: string, resourceId?: string, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId;\n        this.resourceId = resourceId;\n        this.from = from;\n        this.to = to;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserByEmailRequest {\n \n    // User email \n    public email: string;\n \n    constructor(email?: string) { \n        this.email = email;\n    }\n\n}\n\n\n","import { Booking } from '../entities/Booking';\n\n/*  \n*/\nexport class UserCreateBookingRequest {\n \n    // Booking data \n    public body: Booking;\n \n    constructor(body?: Booking) { \n        this.body = body;\n    }\n\n}\n\n\n","import { Placement } from '../entities/Placement';\n\n/*  \n*/\nexport class UserCreatePlacementRequest {\n \n    // Placement data \n    public body: Placement;\n \n    constructor(body?: Placement) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserIdRequest {\n \n    // User Id \n    public id: string;\n \n    constructor(id?: string) { \n        this.id = id;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserIdsRequest {\n \n    // User Id list \n    public id: string[];\n \n    constructor(id?: string[]) { \n        this.id = id;\n    }\n\n}\n\n\n","import { BookingStatusCode } from '../enums/BookingStatusCode';\n\n/*  \n*/\nexport class UserPlacementFindRequest {\n \n    // Filter by user who placed the booking \n    public userId: string;\n \n    // Filter by resource Id \n    public resourceId: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    public from: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    public to: number;\n \n    // Filter by referenced booking Id \n    public bookingId: string;\n \n    // Filter by booking status \n    public status: BookingStatusCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(userId?: string, resourceId?: string, from?: number, to?: number, bookingId?: string, status?: BookingStatusCode, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId;\n        this.resourceId = resourceId;\n        this.from = from;\n        this.to = to;\n        this.bookingId = bookingId;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceChangeMobileRequest {\n \n    // User mobile to update \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceChangeNameRequest {\n \n    // User name to update \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n","import { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\n\n/*  \n*/\nexport class UserServiceChangePasswordRequest {\n \n    // \n    public body: ChangePasswordRequest;\n \n    constructor(body?: ChangePasswordRequest) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceCheckPasswordRequest {\n \n    // \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n","import { LoginParams } from '../common/LoginParams';\n\n/*  \n*/\nexport class UserServiceLoginRequest {\n \n    // \n    public body: LoginParams;\n \n    constructor(body?: LoginParams) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceResetPasswordRequest {\n \n    // Verification code \n    public code: string;\n \n    constructor(code?: string) { \n        this.code = code;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceSendVerificationRequest {\n \n    // Email to send code \n    public body: string;\n \n    constructor(body?: string) { \n        this.body = body;\n    }\n\n}\n\n\n","import { TokenRequest } from '../messages/TokenRequest';\n\n/*  \n*/\nexport class UserServiceSwitchAccountRequest {\n \n    // Token request info \n    public body: TokenRequest;\n \n    constructor(body?: TokenRequest) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserServiceVerifyLoginRequest {\n \n    // \n    public key: string;\n \n    constructor(key?: string) { \n        this.key = key;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UserTokenRequest {\n \n    // User Id \n    public id: string;\n \n    // Expiration time [Epoch milliseconds Timestamp] \n    public exp: number;\n \n    constructor(id?: string, exp?: number) { \n        this.id = id;\n        this.exp = exp;\n    }\n\n}\n\n\n","import { Booking } from '../entities/Booking';\n\n/*  \n*/\nexport class UserUpdateBookingRequest {\n \n    // Booking data \n    public body: Booking;\n \n    constructor(body?: Booking) { \n        this.body = body;\n    }\n\n}\n\n\n","import { Placement } from '../entities/Placement';\n\n/*  \n*/\nexport class UserUpdatePlacementRequest {\n \n    // Placement data \n    public body: Placement;\n \n    constructor(body?: Placement) { \n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UsersServiceChangeDefaultAccountRequest {\n \n    // User Id \n    public id: string;\n \n    // Default account Id \n    public accountId: string;\n \n    constructor(id?: string, accountId?: string) { \n        this.id = id;\n        this.accountId = accountId;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UsersServiceChangeMobileRequest {\n \n    // User Id \n    public id: string;\n \n    // User mobile to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/*  \n*/\nexport class UsersServiceChangeNameRequest {\n \n    // User Id \n    public id: string;\n \n    // User name to update \n    public body: string;\n \n    constructor(id?: string, body?: string) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/*  \n*/\nexport class UsersServiceChangeRoleRequest {\n \n    // User Id \n    public id: string;\n \n    // User role to update \n    public role: AccountRoleCode;\n \n    constructor(id?: string, role?: AccountRoleCode) { \n        this.id = id;\n        this.role = role;\n    }\n\n}\n\n\n","import { UserStatusCode } from '../enums/UserStatusCode';\n\n/*  \n*/\nexport class UsersServiceChangeStatusRequest {\n \n    // User Id \n    public id: string;\n \n    // User status to update \n    public status: UserStatusCode;\n \n    constructor(id?: string, status?: UserStatusCode) { \n        this.id = id;\n        this.status = status;\n    }\n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\n\n/*  \n*/\nexport class UsersServiceChangeTypeRequest {\n \n    // User Id \n    public id: string;\n \n    // User type to update \n    public type: UserTypeCode;\n \n    constructor(id?: string, type?: UserTypeCode) { \n        this.id = id;\n        this.type = type;\n    }\n\n}\n\n\n","import { UserRegistration } from '../common/UserRegistration';\n\n/*  \n*/\nexport class UsersServiceCreateRequest {\n \n    // \n    public body: UserRegistration;\n \n    constructor(body?: UserRegistration) { \n        this.body = body;\n    }\n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n/*  \n*/\nexport class UsersServiceExportRequest {\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    public type: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    public status: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Export results to a different format. Supported formats: csv | json | xml \n    public format: string;\n \n    // List of fields to export (leave empty to export all fields) \n    public fields: string[];\n \n    constructor(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, format?: string, fields?: string[]) { \n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.format = format;\n        this.fields = fields;\n    }\n\n}\n\n\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n/*  \n*/\nexport class UsersServiceFindRequest {\n \n    // Filter by account id (get anlu Account Users with access to the accountId) \n    public accountId: string;\n \n    // Filter by name or partial name or id \n    public search: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    public type: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    public status: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    public sort: string;\n \n    // Page number (for pagination) \n    public page: number;\n \n    // Number of items per page (for pagination) \n    public pageSize: number;\n \n    constructor(accountId?: string, search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId;\n        this.search = search;\n        this.type = type;\n        this.status = status;\n        this.sort = sort;\n        this.page = page;\n        this.pageSize = pageSize;\n    }\n\n}\n\n\n","import { UserInvitation } from '../common/UserInvitation';\n\n/*  \n*/\nexport class UsersServiceInviteRequest {\n \n    // \n    public body: UserInvitation;\n \n    constructor(body?: UserInvitation) { \n        this.body = body;\n    }\n\n}\n\n\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/*  \n*/\nexport class UsersServiceSetRolesRequest {\n \n    // User Id \n    public id: string;\n \n    // User roles to update \n    public roles: AccountRoleCode[];\n \n    constructor(id?: string, roles?: AccountRoleCode[]) { \n        this.id = id;\n        this.roles = roles;\n    }\n\n}\n\n\n","import { User } from '../entities/User';\n\n/*  \n*/\nexport class UsersServiceUpdateRequest {\n \n    // User Id \n    public id: string;\n \n    // User data to update \n    public body: User;\n \n    constructor(id?: string, body?: User) { \n        this.id = id;\n        this.body = body;\n    }\n\n}\n\n\n","\n/* \n   @WebSocketMessage Message header for all web socket messages \n*/\nexport class WebSocketMessageHeader {\n \n    // \n    public op: number;\n \n    // \n    public ver: number;\n \n    // \n    public id: number;\n \n    // \n    public cid: number;\n \n    // \n    public sid: string;\n \n    constructor(opcode?: number, version?: number, messageId?: number, correlationId?: number, sessionId?: string) { \n        this.op = opcode;\n        this.ver = version;\n        this.id = messageId;\n        this.cid = correlationId;\n        this.sid = sessionId;\n    }\n\n}\n\n\n","// Access token key in the local storage\nconst tokenKey = 'portalAccessToken';\nconst loginKey = 'portalLoginData';\n\nexport function getToken() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport function setToken(token) {\n  localStorage.setItem(tokenKey, token);\n}\n\nexport function removeToken() {\n  localStorage.removeItem(tokenKey);\n  localStorage.removeItem(loginKey);\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';  // replaces previous Http service\nimport { map, catchError } from 'rxjs/operators';\nimport * as LocalStorageUtil from './localStorage-util';\n\n/**\n * Utility class for all REST services with common functions\n */\n@Injectable()\nexport class RestUtil {\n\n  // Set headers\n  private headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  /**\n   * Constructor with injected authentication service\n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Download is HTTP GET action but the content is blob\n   */\n  download(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let ext = 'json';\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'format') {\n          ext = arr[1];\n        }\n      }\n    });\n    \n    const downloadLink = fileName + '.' + ext;\n\n    return this.http.get(resourceUrl, {responseType: 'blob'}).subscribe((data) => {\n      const downloadURL = window.URL.createObjectURL(data);\n      const link = document.createElement('a');\n      link.href = downloadURL;\n      link.download = downloadLink;\n      link.click();\n    });\n\n  }\n  \n  /**\n   * HTTP GET action\n   */\n  get(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .get(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError),\n      );\n  }\n\n  /**\n   * HTTP POST action\n   */\n  post(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .post(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP PUT action\n   */\n  put(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .put(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP DELETE action\n   */\n  delete(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .delete(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Construct URL with parameters\n   */\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  /**\n   * Process the response, extract and refresh access token and return the body\n   */\n  private processResponse(response: HttpResponse<any>) {\n\n    if (response.status === 401) {\n      LocalStorageUtil.removeToken();\n      throw new Error('Access denied, reset token: ' + response.status);\n    } else if (response.status > 400) {\n      throw new Error('HTTP status error: ' + response.status);\n    }\n\n    // Get access token from header and update authentication service\n\n    const accessToken = response.headers.get('X-ACCESS-TOKEN');\n\n    if ((accessToken !== null) && (accessToken.length > 0)) {\n      LocalStorageUtil.setToken(accessToken);\n    } \n    \n    if (response.body && response.body.code && response.body.code !== 0) {\n      throw { code: response.body.code, message: response.body.error };\n    }\n    \n    return response.body;\n  }\n\n  /**\n   * Error handling\n   */\n  private handleError(error: any): Promise<any> {\n    if (error.code) {\n      return Promise.reject(error);\n    }\n    return Promise.reject(error.message || error);\n  }\n}\n","export class CoreConfig {\n    api: string;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { RowingBoat } from '../entities/RowingBoat';\n\n\n/**\n * Services for managing boats resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminBoatsService {\n\n  // URL to web api\n  private baseUrl = '/admin/boats';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new boat resource\n   * @Return: EntityResponse<RowingBoat>\n   */\n  create(body?: RowingBoat) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update boat resource\n   * @Return: EntityResponse<RowingBoat>\n   */\n  update(body?: RowingBoat) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete boat resource\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single boat by id\n   * @Return: EntityResponse<RowingBoat>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find boats by filters\n   * @Return: QueryResponse<RowingBoat>\n   */\n  find(usedBy?: string, resourceId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (usedBy != null) { params.push(`usedBy=${usedBy}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Kayak } from '../entities/Kayak';\n\n\n/**\n * Services for managing kayak resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminKayaksService {\n\n  // URL to web api\n  private baseUrl = '/admin/kayaks';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new kayak resource\n   * @Return: EntityResponse<Kayak>\n   */\n  create(body?: Kayak) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update kayak resource\n   * @Return: EntityResponse<Kayak>\n   */\n  update(body?: Kayak) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete kayak resource\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single kayak by id\n   * @Return: EntityResponse<Kayak>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find kayaks by filters\n   * @Return: QueryResponse<Kayak>\n   */\n  find(usedBy?: string, resourceId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (usedBy != null) { params.push(`usedBy=${usedBy}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * Health check service, no X-API-KEY or X-ACCESS-TOKEN are required \n */\n@Injectable()\nexport class HealthCheckService {\n\n  // URL to web api\n  private baseUrl = '/health';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Health check to test service availability\n   * @Return: ActionResponse - with version info\n   */\n  health() {\n    return this.rest.get(`${this.baseUrl}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Booking } from '../entities/Booking';\n\n\n/**\n * Services for managing kayak resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UserBookingsService {\n\n  // URL to web api\n  private baseUrl = '/user/bookings';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new booking\n   * @Return: EntityResponse<Booking>\n   */\n  create(body?: Booking) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update booking\n   * @Return: EntityResponse<Booking>\n   */\n  update(body?: Booking) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete booking\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single booking by id\n   * @Return: EntityResponse<Booking>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find bookings by filters\n   * @Return: QueryResponse<Booking>\n   */\n  find(userId?: string, resourceId?: string, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Placement } from '../entities/Placement';\nimport { BookingStatusCode } from '../enums/BookingStatusCode';\n\n\n/**\n * Services for managing user placements (approved bookings)\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UserPlacementsService {\n\n  // URL to web api\n  private baseUrl = '/user/placements';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new placement\n   * @Return: EntityResponse<Placement>\n   */\n  create(body?: Placement) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update placement\n   * @Return: EntityResponse<Placement>\n   */\n  update(body?: Placement) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete placement\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Get single placement by id\n   * @Return: EntityResponse<Placement>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find placements by filters\n   * @Return: QueryResponse<Placement>\n   */\n  find(userId?: string, resourceId?: string, bookingId?: string, status?: BookingStatusCode, sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (bookingId != null) { params.push(`bookingId=${bookingId}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UserInvitation } from '../common/UserInvitation';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n\n/**\n * List of all user related actions for account administrator only \n */\n@Injectable()\nexport class UsersService {\n\n  // URL to web api\n  private baseUrl = '/admin/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Send invitation to a new user for the current account\n   * @Return: ActionResponse\n   */\n  invite(body?: UserInvitation) {\n    return this.rest.post(`${this.baseUrl}/invite`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Resend invitation to an existing user for the current account\n   * @Return: ActionResponse\n   */\n  reInvite(id?: string) {\n    return this.rest.post(`${this.baseUrl}/re-invite/${id}`, null);\n  }\n\n  /**\n   * Update user\n   * @Return: EntityResponse<User>\n   */\n  update(id?: string, body?: User) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user name\n   * @Return: EntityResponse<User>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user mobile\n   * @Return: EntityResponse<User>\n   */\n  changeMobile(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id?: string, type?: UserTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, null);\n  }\n\n  /**\n   * Delete user from the system\n   * The user will be removed from the account, if no accounts associated with the user, it will be deleted\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by id\n   * @Return: EntityResponse<User>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by email\n   * @Return: EntityResponse<User>\n   */\n  getByEmail(email?: string) {\n    return this.rest.get(`${this.baseUrl}/byEmail/${email}`);\n  }\n\n  /**\n   * Find list of users and filter the list\n   * System user will see all users, Account system will see all users of the account, registered user will get an error.\n   * @Return: QueryResponse<User>\n   */\n  find(accountId?: string, search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get access token for user\n   * @Return: ActionResponse\n   */\n  getUserToken(id?: string, exp?: number) {\n    return this.rest.get(`${this.baseUrl}/${id}/token/${exp}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n\n/**\n * List of account related actions \n */\n@Injectable()\nexport class UserAccountsService {\n\n  // URL to web api\n  private baseUrl = '/user/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { LoginParams } from '../common/LoginParams';\nimport { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\nimport { TokenRequest } from '../messages/TokenRequest';\n\n\n/**\n * Services for user registration and login \n */\n@Injectable()\nexport class UserService {\n\n  // URL to web api\n  private baseUrl = '/user/user';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Login to the system with user email and password\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: EntityResponse<LoginData>\n   */\n  login(body?: LoginParams) {\n    return this.rest.post(`${this.baseUrl}/login`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<LoginData>\n   */\n  refreshToken() {\n    return this.rest.post(`${this.baseUrl}/refresh-token`, null);\n  }\n\n  /**\n   * Verify user by temporary login key\n   * @Return: EntityResponse<User>\n   */\n  verifyLoginKey(key?: string) {\n    const params = new Array();\t\t\n    if (key != null) { params.push(`key=${key}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/login/verify`, ...params);\n  }\n\n  /**\n   * Send verification code by email\n   * @Return: ActionResponse\n   */\n  sendVerificationCode(body?: string) {\n    return this.rest.post(`${this.baseUrl}/verify`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Validate verification code and reset password\n   * @Return: ActionResponse\n   */\n  resetPassword(code?: string) {\n    return this.rest.post(`${this.baseUrl}/reset-password`, typeof code === 'object' ? JSON.stringify(code) : code);\n  }\n\n  /**\n   * Change password\n   * @Return: ActionResponse\n   */\n  changePassword(body?: ChangePasswordRequest) {\n    return this.rest.post(`${this.baseUrl}/change-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Check if password was used before (according to password policy)\n   * @Return: ActionResponse\n   */\n  checkUnusedPassword(body?: string) {\n    return this.rest.post(`${this.baseUrl}/check-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user name\n   * @Return: ActionResponse\n   */\n  changeName(body?: string) {\n    return this.rest.put(`${this.baseUrl}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user mobile\n   * @Return: ActionResponse\n   */\n  changeMobile(body?: string) {\n    return this.rest.put(`${this.baseUrl}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<UserAccountInfo>\n   */\n  switchAccount(body?: TokenRequest) {\n    return this.rest.post(`${this.baseUrl}/switch-account`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Account } from '../entities/Account';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n\n/**\n * List of account related actions for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysAccountsService {\n\n  // URL to web api\n  private baseUrl = '/sys/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   * @Return: EntityResponse<Account>\n   */\n  create(body?: Account) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account in the system\n   * @Return: EntityResponse<Account>\n   */\n  update(body?: Account) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete account from the system\n   * The account is moved to DELETED mode and will be deleted after 90 days\n   * Only account marked as SUSPENDED can be deleted\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}`);\n  }\n\n  /**\n   * Delete account immediately without account status restrictions\n   * @Return: ActionResponse\n   */\n  purge(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/purge/${id}`);\n  }\n\n  /**\n   * Reset account - remove all operational data older than the retention time in days (events, status, log ...) but leave configuration data\n   * @Return: ActionResponse\n   */\n  reset(id?: string, days?: number) {\n    return this.rest.delete(`${this.baseUrl}/reset/${id}/days/${days}`);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UserRegistration } from '../common/UserRegistration';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n\n/**\n * List of all user related actions for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysUsersService {\n\n  // URL to web api\n  private baseUrl = '/sys/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create a new user for the current account\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: ActionResponse\n   */\n  create(body?: UserRegistration) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update user\n   * @Return: EntityResponse<User>\n   */\n  update(id?: string, body?: User) {\n    return this.rest.put(`${this.baseUrl}/${id}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user name\n   * @Return: EntityResponse<User>\n   */\n  changeName(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user mobile\n   * @Return: EntityResponse<User>\n   */\n  changeMobile(id?: string, body?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id?: string, type?: UserTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, null);\n  }\n\n  /**\n   * Change user status\n   * @Return: EntityResponse<User>\n   */\n  changeStatus(id?: string, status?: UserStatusCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/status/${status}`, null);\n  }\n\n  /**\n   * Change user default account\n   * @Return: EntityResponse<User>\n   */\n  changeDefaultAccount(id?: string, accountId?: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/defaultAccount/${accountId}`, null);\n  }\n\n  /**\n   * Reset password for user, generate one-time temporary password\n   * @Return: ActionResponse\n   */\n  resetPassword(id?: string) {\n    return this.rest.post(`${this.baseUrl}/${id}/reset-password`, null);\n  }\n\n  /**\n   * Set user roles in his accounts (override previous roles)\n   * @Return: EntityResponse<User>\n   */\n  setRoles(id?: string, roles?: AccountRoleCode[]) {\n    return this.rest.post(`${this.baseUrl}/${id}/roles/`, typeof roles === 'object' ? JSON.stringify(roles) : roles);\n  }\n\n  /**\n   * Update user roles in his accounts (merge with existing roles)\n   * @Return: EntityResponse<User>\n   */\n  mergeRoles(id?: string, roles?: AccountRoleCode[]) {\n    return this.rest.put(`${this.baseUrl}/${id}/roles/`, typeof roles === 'object' ? JSON.stringify(roles) : roles);\n  }\n\n  /**\n   * Delete user from the system\n   * @Return: ActionResponse\n   */\n  delete(id?: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by Id\n   * @Return: EntityResponse<User>\n   */\n  get(id?: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of users by filter\n   * @Return: QueryResponse<User>\n   */\n  find(accountId?: string, search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { AdminBoatsService } from './adminBoatsService';\nimport { AdminKayaksService } from './adminKayaksService';\nimport { UserBookingsService } from './userBookingsService';\nimport { UserPlacementsService } from './userPlacementsService';\nimport { UsersService } from './usersService';\nimport { UserAccountsService } from './userAccountsService';\nimport { UserService } from './userService';\nimport { HealthCheckService } from './healthCheckService';\nimport { SysAccountsService } from './sysAccountsService';\nimport { SysUsersService } from './sysUsersService';\n\nexport const Services = [\n    AdminBoatsService,\n    AdminKayaksService,\n    UserBookingsService,\n    UserPlacementsService,\n    UsersService,\n    UserAccountsService,\n    UserService,\n    HealthCheckService,\n    SysAccountsService,\n    SysUsersService,\n    \n]","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Services } from './lib/services/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CoreConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class CoreLibModule {\n  static forRoot(config: CoreConfig): ModuleWithProviders {\n    // console.log(config);\n    return {\n      ngModule: CoreLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n"]}