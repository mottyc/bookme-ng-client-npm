import { BaseEntity } from '../entities/BaseEntity';
/*
 *  User type
*/
export class User extends BaseEntity {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZy1jb3JlLWxpYi9zcmMvIiwic291cmNlcyI6WyJsaWIvZW50aXRpZXMvVXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLcEQ7O0VBRUU7QUFDRixNQUFNLE9BQU8sSUFBSyxTQUFRLFVBQVU7Q0FrRW5DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXNlckdlbmRlckNvZGUgfSBmcm9tICcuLi9lbnVtcy9Vc2VyR2VuZGVyQ29kZSc7XG5pbXBvcnQgeyBCYXNlRW50aXR5IH0gZnJvbSAnLi4vZW50aXRpZXMvQmFzZUVudGl0eSc7XG5pbXBvcnQgeyBVc2VyVHlwZUNvZGUgfSBmcm9tICcuLi9lbnVtcy9Vc2VyVHlwZUNvZGUnO1xuaW1wb3J0IHsgVXNlclN0YXR1c0NvZGUgfSBmcm9tICcuLi9lbnVtcy9Vc2VyU3RhdHVzQ29kZSc7XG5pbXBvcnQgeyBJQmFzZUVudGl0eSB9IGZyb20gJy4uL2VudGl0aWVzL0Jhc2VFbnRpdHknO1xuXG4vKiBcbiAqICBVc2VyIHR5cGVcbiovXG5leHBvcnQgY2xhc3MgVXNlciBleHRlbmRzIEJhc2VFbnRpdHkge1xuIFxuICAgIC8vIFVzZXIgbmFtZSBcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuIFxuICAgIC8vIFVzZXIgZW1haWwgXG4gICAgcHVibGljIGVtYWlsOiBzdHJpbmc7XG4gXG4gICAgLy8gVXNlciBtb2JpbGUgcGhvbmUgbnVtYmVyIChmb3Igbm90aWZpY2F0aW9uIGFuZCB2YWxpZGF0aW9uKSBcbiAgICBwdWJsaWMgbW9iaWxlOiBzdHJpbmc7XG4gXG4gICAgLy8gUGFzc3dvcmQgc2FsdCBcbiAgICBwdWJsaWMgc2FsdDogc3RyaW5nO1xuIFxuICAgIC8vIFBhc3N3b3JkIGhhc2ggXG4gICAgcHVibGljIGhhc2g6IHN0cmluZztcbiBcbiAgICAvLyBVc2VyIHR5cGU6IFVOREVGSU5FRCB8IFNZU0FETUlOIHwgU1VQUE9SVCB8IFVTRVIgXG4gICAgcHVibGljIHR5cGU6IFVzZXJUeXBlQ29kZTtcbiBcbiAgICAvLyBVc2VyIHN0YXR1czogVU5ERUZJTkVEIHwgUEVORElORyB8IEFDVElWRSB8IEJMT0NLRUQgfCBTVVNQRU5ERUQgXG4gICAgcHVibGljIHN0YXR1czogVXNlclN0YXR1c0NvZGU7XG4gXG4gICAgLy8gV2hlbiB1c2VyIHdhcyBsYXN0IHN1c3BlbmRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIHN1c3BlbmRlZE9uOiBudW1iZXI7XG4gXG4gICAgLy8gTnVtYmVyIG9mIFNpZ24taW4gQXR0ZW1wdHMgXG4gICAgcHVibGljIHNpZ25JbkF0dGVtcHRzOiBudW1iZXI7XG4gXG4gICAgLy8gVXNlciBtdXN0IGNoYW5nZSBwYXNzd29yZCBvbiBuZXh0IGxvZ2luIFxuICAgIHB1YmxpYyBjaGFuZ2VQYXNzd29yZDogYm9vbGVhbjtcbiBcbiAgICAvLyBXaGVuIHVzZXIgY3JlYXRlZCBoaXMgcGFzc3dvcmQgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHB1YmxpYyBwYXNzd29yZENoYW5nZWRPbjogbnVtYmVyO1xuIFxuICAgIC8vIERlZmF1bHQgYWNjb3VudCBJZCBcbiAgICBwdWJsaWMgZGVmYXVsdEFjY291bnQ6IHN0cmluZztcbiBcbiAgICAvLyBVc2VyIGRlc2NyaXB0aW9uIFxuICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nO1xuIFxuICAgIC8vIFVzZXIgYmlydGhkYXkgKHRvIGRldGVybWluZSBhZ2UpIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwdWJsaWMgYmlydGhkYXk6IG51bWJlcjtcbiBcbiAgICAvLyBVc2VyIGdlbmRlciBcbiAgICBwdWJsaWMgZ2VuZGVyOiBVc2VyR2VuZGVyQ29kZTtcbiBcbiAgICAvLyBVc2VyIHdlaWdodCBbS2ddIFxuICAgIHB1YmxpYyB3ZWlnaHQ6IG51bWJlcjtcbiBcbiAgICAvLyBVc2VyIEhlaWdodCBbQ21dIFxuICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcbiBcbiAgICAvLyBVc2VyIFNob2UgU2l6ZSBbRXVyb3BlYW4gc2l6ZV0gXG4gICAgcHVibGljIHNob2VTaXplOiBudW1iZXI7XG4gXG4gICAgLy8gRW50aXR5IElkIFxuICAgIHB1YmxpYyBpZDogc3RyaW5nO1xuIFxuICAgIC8vIFdoZW4gdGhlIGVudGl0eSB3YXMgY3JlYXRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIGNyZWF0ZWRPbjogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gdGhlIGVudGl0eSB3YXMgdXBkYXRlZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcHVibGljIHVwZGF0ZWRPbjogbnVtYmVyO1xuIFxuXG59XG5cblxuLypcbiAqICBJbnRlcmZhY2Ugb2YgVXNlclxuKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVVzZXIgZXh0ZW5kcyBJQmFzZUVudGl0eSB7XG4gXG4gICAgLy8gVXNlciBuYW1lIFxuICAgIG5hbWU/OiBzdHJpbmc7XG4gXG4gICAgLy8gVXNlciBlbWFpbCBcbiAgICBlbWFpbD86IHN0cmluZztcbiBcbiAgICAvLyBVc2VyIG1vYmlsZSBwaG9uZSBudW1iZXIgKGZvciBub3RpZmljYXRpb24gYW5kIHZhbGlkYXRpb24pIFxuICAgIG1vYmlsZT86IHN0cmluZztcbiBcbiAgICAvLyBQYXNzd29yZCBzYWx0IFxuICAgIHNhbHQ/OiBzdHJpbmc7XG4gXG4gICAgLy8gUGFzc3dvcmQgaGFzaCBcbiAgICBoYXNoPzogc3RyaW5nO1xuIFxuICAgIC8vIFVzZXIgdHlwZTogVU5ERUZJTkVEIHwgU1lTQURNSU4gfCBTVVBQT1JUIHwgVVNFUiBcbiAgICB0eXBlPzogVXNlclR5cGVDb2RlO1xuIFxuICAgIC8vIFVzZXIgc3RhdHVzOiBVTkRFRklORUQgfCBQRU5ESU5HIHwgQUNUSVZFIHwgQkxPQ0tFRCB8IFNVU1BFTkRFRCBcbiAgICBzdGF0dXM/OiBVc2VyU3RhdHVzQ29kZTtcbiBcbiAgICAvLyBXaGVuIHVzZXIgd2FzIGxhc3Qgc3VzcGVuZGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBzdXNwZW5kZWRPbj86IG51bWJlcjtcbiBcbiAgICAvLyBOdW1iZXIgb2YgU2lnbi1pbiBBdHRlbXB0cyBcbiAgICBzaWduSW5BdHRlbXB0cz86IG51bWJlcjtcbiBcbiAgICAvLyBVc2VyIG11c3QgY2hhbmdlIHBhc3N3b3JkIG9uIG5leHQgbG9naW4gXG4gICAgY2hhbmdlUGFzc3dvcmQ/OiBib29sZWFuO1xuIFxuICAgIC8vIFdoZW4gdXNlciBjcmVhdGVkIGhpcyBwYXNzd29yZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgcGFzc3dvcmRDaGFuZ2VkT24/OiBudW1iZXI7XG4gXG4gICAgLy8gRGVmYXVsdCBhY2NvdW50IElkIFxuICAgIGRlZmF1bHRBY2NvdW50Pzogc3RyaW5nO1xuIFxuICAgIC8vIFVzZXIgZGVzY3JpcHRpb24gXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gXG4gICAgLy8gVXNlciBiaXJ0aGRheSAodG8gZGV0ZXJtaW5lIGFnZSkgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIGJpcnRoZGF5PzogbnVtYmVyO1xuIFxuICAgIC8vIFVzZXIgZ2VuZGVyIFxuICAgIGdlbmRlcj86IFVzZXJHZW5kZXJDb2RlO1xuIFxuICAgIC8vIFVzZXIgd2VpZ2h0IFtLZ10gXG4gICAgd2VpZ2h0PzogbnVtYmVyO1xuIFxuICAgIC8vIFVzZXIgSGVpZ2h0IFtDbV0gXG4gICAgaGVpZ2h0PzogbnVtYmVyO1xuIFxuICAgIC8vIFVzZXIgU2hvZSBTaXplIFtFdXJvcGVhbiBzaXplXSBcbiAgICBzaG9lU2l6ZT86IG51bWJlcjtcbiBcbiAgICAvLyBFbnRpdHkgSWQgXG4gICAgaWQ/OiBzdHJpbmc7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyBjcmVhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBjcmVhdGVkT24/OiBudW1iZXI7XG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyB1cGRhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICB1cGRhdGVkT24/OiBudW1iZXI7XG4gXG59XG4iXX0=