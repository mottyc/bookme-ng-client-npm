import { BaseEntity } from '../entities/BaseEntity';
/*
 *  User type
*/
export class User extends BaseEntity {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Jvb2ttZS1saWIvc3JjL2xpYi9lbnRpdGllcy9Vc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUtwRDs7RUFFRTtBQUNGLE1BQU0sT0FBTyxJQUFLLFNBQVEsVUFBVTtDQTRHbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyR2VuZGVyQ29kZSB9IGZyb20gJy4uL2VudW1zL1VzZXJHZW5kZXJDb2RlJztcbmltcG9ydCB7IEJhc2VFbnRpdHkgfSBmcm9tICcuLi9lbnRpdGllcy9CYXNlRW50aXR5JztcbmltcG9ydCB7IFVzZXJUeXBlQ29kZSB9IGZyb20gJy4uL2VudW1zL1VzZXJUeXBlQ29kZSc7XG5pbXBvcnQgeyBVc2VyU3RhdHVzQ29kZSB9IGZyb20gJy4uL2VudW1zL1VzZXJTdGF0dXNDb2RlJztcbmltcG9ydCB7IElCYXNlRW50aXR5IH0gZnJvbSAnLi4vZW50aXRpZXMvQmFzZUVudGl0eSc7XG5cbi8qIFxuICogIFVzZXIgdHlwZVxuKi9cbmV4cG9ydCBjbGFzcyBVc2VyIGV4dGVuZHMgQmFzZUVudGl0eSB7XG4gXG4gICAgLy8gVXNlciBuYW1lIFxuICAgIFxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgXG4gXG4gICAgLy8gVXNlciBlbWFpbCBcbiAgICBcbiAgICBwdWJsaWMgZW1haWw6IHN0cmluZztcbiAgICBcbiBcbiAgICAvLyBVc2VyIG1vYmlsZSBwaG9uZSBudW1iZXIgKGZvciBub3RpZmljYXRpb24gYW5kIHZhbGlkYXRpb24pIFxuICAgIFxuICAgIHB1YmxpYyBtb2JpbGU6IHN0cmluZztcbiAgICBcbiBcbiAgICAvLyBQYXNzd29yZCBzYWx0IFxuICAgIFxuICAgIHB1YmxpYyBzYWx0OiBzdHJpbmc7XG4gICAgXG4gXG4gICAgLy8gUGFzc3dvcmQgaGFzaCBcbiAgICBcbiAgICBwdWJsaWMgaGFzaDogc3RyaW5nO1xuICAgIFxuIFxuICAgIC8vIFVzZXIgdHlwZTogVU5ERUZJTkVEIHwgU1lTQURNSU4gfCBTVVBQT1JUIHwgVVNFUiBcbiAgICBcbiAgICBwdWJsaWMgdHlwZTogVXNlclR5cGVDb2RlO1xuICAgIFxuIFxuICAgIC8vIFVzZXIgc3RhdHVzOiBVTkRFRklORUQgfCBQRU5ESU5HIHwgQUNUSVZFIHwgQkxPQ0tFRCB8IFNVU1BFTkRFRCBcbiAgICBcbiAgICBwdWJsaWMgc3RhdHVzOiBVc2VyU3RhdHVzQ29kZTtcbiAgICBcbiBcbiAgICAvLyBXaGVuIHVzZXIgd2FzIGxhc3Qgc3VzcGVuZGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBcbiAgICBwdWJsaWMgc3VzcGVuZGVkT246IG51bWJlcjtcbiAgICBcbiBcbiAgICAvLyBXaGVuIHVzZXIgbGFzdCBzaWduZWQgaW4gdG8gdGhlIGFwcCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgXG4gICAgcHVibGljIGxhc3RTaWduSW46IG51bWJlcjtcbiAgICBcbiBcbiAgICAvLyBVc2VyIG11c3QgY2hhbmdlIHBhc3N3b3JkIG9uIG5leHQgbG9naW4gXG4gICAgXG4gICAgcHVibGljIGNoYW5nZVBhc3N3b3JkOiBib29sZWFuO1xuICAgIFxuIFxuICAgIC8vIFdoZW4gdXNlciBjcmVhdGVkIGhpcyBwYXNzd29yZCBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgXG4gICAgcHVibGljIHBhc3N3b3JkQ2hhbmdlZE9uOiBudW1iZXI7XG4gICAgXG4gXG4gICAgLy8gRGVmYXVsdCBhY2NvdW50IElkIFxuICAgIFxuICAgIHB1YmxpYyBkZWZhdWx0QWNjb3VudDogc3RyaW5nO1xuICAgIFxuIFxuICAgIC8vIFVzZXIgZGVzY3JpcHRpb24gXG4gICAgXG4gICAgcHVibGljIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgXG4gXG4gICAgLy8gVXNlciBiaXJ0aGRheSAodG8gZGV0ZXJtaW5lIGFnZSkgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIFxuICAgIHB1YmxpYyBiaXJ0aGRheTogbnVtYmVyO1xuICAgIFxuIFxuICAgIC8vIFVzZXIgZ2VuZGVyIFxuICAgIFxuICAgIHB1YmxpYyBnZW5kZXI6IFVzZXJHZW5kZXJDb2RlO1xuICAgIFxuIFxuICAgIC8vIFVzZXIgd2VpZ2h0IFtLZ10gXG4gICAgXG4gICAgcHVibGljIHdlaWdodDogbnVtYmVyO1xuICAgIFxuIFxuICAgIC8vIFVzZXIgSGVpZ2h0IFtDbV0gXG4gICAgXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyO1xuICAgIFxuIFxuICAgIC8vIFVzZXIgU2hvZSBTaXplIFtFdXJvcGVhbiBzaXplXSBcbiAgICBcbiAgICBwdWJsaWMgc2hvZVNpemU6IG51bWJlcjtcbiAgICBcbiBcbiAgICAvLyBFbnRpdHkgSWQgXG4gICAgXG4gICAgcHVibGljIG92ZXJyaWRlIGlkOiBzdHJpbmc7XG4gICAgXG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyBjcmVhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBcbiAgICBwdWJsaWMgb3ZlcnJpZGUgY3JlYXRlZE9uOiBudW1iZXI7XG4gICAgXG4gXG4gICAgLy8gV2hlbiB0aGUgZW50aXR5IHdhcyB1cGRhdGVkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBcbiAgICBwdWJsaWMgb3ZlcnJpZGUgdXBkYXRlZE9uOiBudW1iZXI7XG4gICAgXG4gXG5cbn1cblxuXG4vKlxuICogIEludGVyZmFjZSBvZiBVc2VyXG4qL1xuZXhwb3J0IGludGVyZmFjZSBJVXNlciBleHRlbmRzIElCYXNlRW50aXR5IHtcbiBcbiAgICAvLyBVc2VyIG5hbWUgXG4gICAgbmFtZT86IHN0cmluZztcbiBcbiAgICAvLyBVc2VyIGVtYWlsIFxuICAgIGVtYWlsPzogc3RyaW5nO1xuIFxuICAgIC8vIFVzZXIgbW9iaWxlIHBob25lIG51bWJlciAoZm9yIG5vdGlmaWNhdGlvbiBhbmQgdmFsaWRhdGlvbikgXG4gICAgbW9iaWxlPzogc3RyaW5nO1xuIFxuICAgIC8vIFBhc3N3b3JkIHNhbHQgXG4gICAgc2FsdD86IHN0cmluZztcbiBcbiAgICAvLyBQYXNzd29yZCBoYXNoIFxuICAgIGhhc2g/OiBzdHJpbmc7XG4gXG4gICAgLy8gVXNlciB0eXBlOiBVTkRFRklORUQgfCBTWVNBRE1JTiB8IFNVUFBPUlQgfCBVU0VSIFxuICAgIHR5cGU/OiBVc2VyVHlwZUNvZGU7XG4gXG4gICAgLy8gVXNlciBzdGF0dXM6IFVOREVGSU5FRCB8IFBFTkRJTkcgfCBBQ1RJVkUgfCBCTE9DS0VEIHwgU1VTUEVOREVEIFxuICAgIHN0YXR1cz86IFVzZXJTdGF0dXNDb2RlO1xuIFxuICAgIC8vIFdoZW4gdXNlciB3YXMgbGFzdCBzdXNwZW5kZWQgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHN1c3BlbmRlZE9uPzogbnVtYmVyO1xuIFxuICAgIC8vIFdoZW4gdXNlciBsYXN0IHNpZ25lZCBpbiB0byB0aGUgYXBwIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBsYXN0U2lnbkluPzogbnVtYmVyO1xuIFxuICAgIC8vIFVzZXIgbXVzdCBjaGFuZ2UgcGFzc3dvcmQgb24gbmV4dCBsb2dpbiBcbiAgICBjaGFuZ2VQYXNzd29yZD86IGJvb2xlYW47XG4gXG4gICAgLy8gV2hlbiB1c2VyIGNyZWF0ZWQgaGlzIHBhc3N3b3JkIFtFcG9jaCBtaWxsaXNlY29uZHMgVGltZXN0YW1wXSBcbiAgICBwYXNzd29yZENoYW5nZWRPbj86IG51bWJlcjtcbiBcbiAgICAvLyBEZWZhdWx0IGFjY291bnQgSWQgXG4gICAgZGVmYXVsdEFjY291bnQ/OiBzdHJpbmc7XG4gXG4gICAgLy8gVXNlciBkZXNjcmlwdGlvbiBcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiBcbiAgICAvLyBVc2VyIGJpcnRoZGF5ICh0byBkZXRlcm1pbmUgYWdlKSBbRXBvY2ggbWlsbGlzZWNvbmRzIFRpbWVzdGFtcF0gXG4gICAgYmlydGhkYXk/OiBudW1iZXI7XG4gXG4gICAgLy8gVXNlciBnZW5kZXIgXG4gICAgZ2VuZGVyPzogVXNlckdlbmRlckNvZGU7XG4gXG4gICAgLy8gVXNlciB3ZWlnaHQgW0tnXSBcbiAgICB3ZWlnaHQ/OiBudW1iZXI7XG4gXG4gICAgLy8gVXNlciBIZWlnaHQgW0NtXSBcbiAgICBoZWlnaHQ/OiBudW1iZXI7XG4gXG4gICAgLy8gVXNlciBTaG9lIFNpemUgW0V1cm9wZWFuIHNpemVdIFxuICAgIHNob2VTaXplPzogbnVtYmVyO1xuIFxuICAgIC8vIEVudGl0eSBJZCBcbiAgICBpZD86IHN0cmluZztcbiBcbiAgICAvLyBXaGVuIHRoZSBlbnRpdHkgd2FzIGNyZWF0ZWQgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIGNyZWF0ZWRPbj86IG51bWJlcjtcbiBcbiAgICAvLyBXaGVuIHRoZSBlbnRpdHkgd2FzIHVwZGF0ZWQgW0Vwb2NoIG1pbGxpc2Vjb25kcyBUaW1lc3RhbXBdIFxuICAgIHVwZGF0ZWRPbj86IG51bWJlcjtcbiBcbn1cbiJdfQ==