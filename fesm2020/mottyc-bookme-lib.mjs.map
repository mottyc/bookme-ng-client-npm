{"version":3,"file":"mottyc-bookme-lib.mjs","sources":["../../../projects/bookme-lib/src/lib/common/AbsoluteTimeFrame.ts","../../../projects/bookme-lib/src/lib/common/AccountRole.ts","../../../projects/bookme-lib/src/lib/common/AccountSettings.ts","../../../projects/bookme-lib/src/lib/common/CountDataPoint.ts","../../../projects/bookme-lib/src/lib/common/LoginData.ts","../../../projects/bookme-lib/src/lib/common/LoginParams.ts","../../../projects/bookme-lib/src/lib/common/MemberRegistration.ts","../../../projects/bookme-lib/src/lib/common/MemberUsage.ts","../../../projects/bookme-lib/src/lib/common/RecurrentActivity.ts","../../../projects/bookme-lib/src/lib/common/RecurrentTimeFrame.ts","../../../projects/bookme-lib/src/lib/common/StringIntValue.ts","../../../projects/bookme-lib/src/lib/common/StringKeyValue.ts","../../../projects/bookme-lib/src/lib/common/TimeFrame.ts","../../../projects/bookme-lib/src/lib/common/UserAccountInfo.ts","../../../projects/bookme-lib/src/lib/common/UserInvitation.ts","../../../projects/bookme-lib/src/lib/common/UserRegistration.ts","../../../projects/bookme-lib/src/lib/common/WeightRange.ts","../../../projects/bookme-lib/src/lib/entities/BaseEntity.ts","../../../projects/bookme-lib/src/lib/entities/Absence.ts","../../../projects/bookme-lib/src/lib/entities/Account.ts","../../../projects/bookme-lib/src/lib/entities/Activity.ts","../../../projects/bookme-lib/src/lib/entities/ActivityBookingGroup.ts","../../../projects/bookme-lib/src/lib/entities/Actual.ts","../../../projects/bookme-lib/src/lib/entities/ApiKey.ts","../../../projects/bookme-lib/src/lib/entities/AuditLog.ts","../../../projects/bookme-lib/src/lib/entities/Booking.ts","../../../projects/bookme-lib/src/lib/entities/BookingGroup.ts","../../../projects/bookme-lib/src/lib/entities/BookingRequest.ts","../../../projects/bookme-lib/src/lib/entities/Feature.ts","../../../projects/bookme-lib/src/lib/entities/FeaturesGroup.ts","../../../projects/bookme-lib/src/lib/entities/Incident.ts","../../../projects/bookme-lib/src/lib/entities/Member.ts","../../../projects/bookme-lib/src/lib/entities/MemberUser.ts","../../../projects/bookme-lib/src/lib/entities/Membership.ts","../../../projects/bookme-lib/src/lib/entities/Notification.ts","../../../projects/bookme-lib/src/lib/entities/Placement.ts","../../../projects/bookme-lib/src/lib/entities/Planing.ts","../../../projects/bookme-lib/src/lib/entities/Registration.ts","../../../projects/bookme-lib/src/lib/entities/Resource.ts","../../../projects/bookme-lib/src/lib/entities/Usage.ts","../../../projects/bookme-lib/src/lib/entities/User.ts","../../../projects/bookme-lib/src/lib/entities/Verification.ts","../../../projects/bookme-lib/src/lib/enums/AccountRoleCode.ts","../../../projects/bookme-lib/src/lib/enums/AccountStatusCode.ts","../../../projects/bookme-lib/src/lib/enums/AccountTypeCode.ts","../../../projects/bookme-lib/src/lib/enums/ActivityStatusCode.ts","../../../projects/bookme-lib/src/lib/enums/BookingOptionsMask.ts","../../../projects/bookme-lib/src/lib/enums/BookingStatusCode.ts","../../../projects/bookme-lib/src/lib/enums/DayOfWeekCode.ts","../../../projects/bookme-lib/src/lib/enums/EntityTypeCode.ts","../../../projects/bookme-lib/src/lib/enums/FeatureCode.ts","../../../projects/bookme-lib/src/lib/enums/KayakTypeCode.ts","../../../projects/bookme-lib/src/lib/enums/MemberStatusCode.ts","../../../projects/bookme-lib/src/lib/enums/NotificationTypeCode.ts","../../../projects/bookme-lib/src/lib/enums/PlacementStatusCode.ts","../../../projects/bookme-lib/src/lib/enums/ResourceClassCode.ts","../../../projects/bookme-lib/src/lib/enums/ResourceStatusCode.ts","../../../projects/bookme-lib/src/lib/enums/ResourceTypeMask.ts","../../../projects/bookme-lib/src/lib/enums/RowingBoatTypeCode.ts","../../../projects/bookme-lib/src/lib/enums/TimeUnitCode.ts","../../../projects/bookme-lib/src/lib/enums/UserGenderCode.ts","../../../projects/bookme-lib/src/lib/enums/UserStatusCode.ts","../../../projects/bookme-lib/src/lib/enums/UserTypeCode.ts","../../../projects/bookme-lib/src/lib/messages/AccountIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/ActionResponse.ts","../../../projects/bookme-lib/src/lib/messages/ActivityIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminAccountSettingsUpdateRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminActivityBulkCreateRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminActivityDefaultCreateRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminActivityDefaultDeleteRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminActivityFindFreeResourcesRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminActivityFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminActivityPlaningRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminBookingHistoryRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminBookingMonthHistoryRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminCreateActivityRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminCreateResourceRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminDailyPlaningExportRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminDailyPlaningRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminDailyRegistrationRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminDailyResourcesRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminFindFreeResourcesRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminMembersExportCsvRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminMembersFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminMembersImportCsvRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminPlaningAssignResourceRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminPlaningDeleteActivityRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminPlaningDeleteBookingRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminPlaningFindBookingsRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminPlaningMergeBookingsRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminPlaningSplitBookingRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminPlaningUnAssignResourceRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminReportAbsenceRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminReportIncidentRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminResourceBulkCreateRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminResourceExportCsvRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminResourceFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminResourceHistoryRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminResourceImportCsvRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminResourceMonthHistoryRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminUpdateActivityRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminUpdateRegistrationRequest.ts","../../../projects/bookme-lib/src/lib/messages/AdminUpdateResourceRequest.ts","../../../projects/bookme-lib/src/lib/messages/BookingIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/BookingRequestIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/ChangePasswordRequest.ts","../../../projects/bookme-lib/src/lib/messages/DistributionRequest.ts","../../../projects/bookme-lib/src/lib/messages/EmptyRequest.ts","../../../projects/bookme-lib/src/lib/messages/EmptyResponse.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponse.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponse.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfAbsence.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfAccount.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfActivity.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfActivityBookingGroup.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfActual.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfBooking.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfBookingGroup.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfBookingRequest.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfCountDataPoint.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfIncident.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfMemberUsage.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfMembership.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfNotification.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfPlacement.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfResource.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfStringIntValue.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfStringKeyValue.ts","../../../projects/bookme-lib/src/lib/messages/EntitiesResponseOfUsage.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfAccount.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfAccountSettings.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfActivity.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfBooking.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfBookingRequest.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfLoginData.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfMember.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfMemberUser.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfPlacement.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfPlaning.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfResource.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfUser.ts","../../../projects/bookme-lib/src/lib/messages/EntityResponseOfUserAccountInfo.ts","../../../projects/bookme-lib/src/lib/messages/FindNotificationsRequest.ts","../../../projects/bookme-lib/src/lib/messages/MemberIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembersBulkImportRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembersCountOvertimeRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembersFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembersFindResourcesRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembersServiceInviteRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembersServiceUpdateRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembersServiceUpdateStatusRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembershipIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/MembershipsRequest.ts","../../../projects/bookme-lib/src/lib/messages/MonthlyCountRequest.ts","../../../projects/bookme-lib/src/lib/messages/NotificationIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/NotifyActivityUsersRequest.ts","../../../projects/bookme-lib/src/lib/messages/NotifyAllMembersRequest.ts","../../../projects/bookme-lib/src/lib/messages/NotifyBookingUsersRequest.ts","../../../projects/bookme-lib/src/lib/messages/NotifyDailyUsersRequest.ts","../../../projects/bookme-lib/src/lib/messages/NotifyUserRequest.ts","../../../projects/bookme-lib/src/lib/messages/PeriodCountRequest.ts","../../../projects/bookme-lib/src/lib/messages/PlacementIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponse.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfAccount.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfActivity.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfBooking.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfBookingRequest.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfMemberUser.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfMembership.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfNotification.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfPlacement.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfResource.ts","../../../projects/bookme-lib/src/lib/messages/QueryResponseOfUser.ts","../../../projects/bookme-lib/src/lib/messages/ResourceIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/ResourcesCountOvertimeRequest.ts","../../../projects/bookme-lib/src/lib/messages/StreamResponse.ts","../../../projects/bookme-lib/src/lib/messages/SysAdminAccountCreateRequest.ts","../../../projects/bookme-lib/src/lib/messages/SysAdminAccountResetRequest.ts","../../../projects/bookme-lib/src/lib/messages/SysAdminAccountUpdateRequest.ts","../../../projects/bookme-lib/src/lib/messages/SysAdminAccountsFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/TokenRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserAccountsFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserBookingFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserBookingGroupRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserBookingHistoryRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserBookingRequestFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserByEmailRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserCreateBookingRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserCreateBookingRequestRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserCreatePlacementRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserIdRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserIdsRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserPlacementFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceChangeMobileRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceChangeNameRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceChangePasswordRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceCheckPasswordRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceLoginRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceReadNotificationRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceResetPasswordRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceSendVerificationRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceSwitchAccountRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceUpdateRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserServiceVerifyLoginRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserTokenRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserUpdateBookingRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserUpdateBookingRequestRequest.ts","../../../projects/bookme-lib/src/lib/messages/UserUpdatePlacementRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceChangeDefaultAccountRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceChangeMobileRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceChangeNameRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceChangeRoleRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceChangeStatusRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceChangeTypeRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceCreateRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceExportRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceFindRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceInviteRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceSetRolesRequest.ts","../../../projects/bookme-lib/src/lib/messages/UsersServiceUpdateRequest.ts","../../../projects/bookme-lib/src/lib/messages/WebSocketMessageHeader.ts","../../../projects/bookme-lib/src/utils/localStorage-util.ts","../../../projects/bookme-lib/src/utils/rest-util.ts","../../../projects/bookme-lib/src/config.ts","../../../projects/bookme-lib/src/lib/services/adminAccountService.ts","../../../projects/bookme-lib/src/lib/services/adminActivitiesService.ts","../../../projects/bookme-lib/src/lib/services/adminMembersService.ts","../../../projects/bookme-lib/src/lib/services/adminNotificationsService.ts","../../../projects/bookme-lib/src/lib/services/adminPlaningService.ts","../../../projects/bookme-lib/src/lib/services/adminReportsService.ts","../../../projects/bookme-lib/src/lib/services/adminResourcesService.ts","../../../projects/bookme-lib/src/lib/services/healthCheckService.ts","../../../projects/bookme-lib/src/lib/services/usrActivitiesService.ts","../../../projects/bookme-lib/src/lib/services/userBookingsService.ts","../../../projects/bookme-lib/src/lib/services/userPlacementsService.ts","../../../projects/bookme-lib/src/lib/services/userAccountsService.ts","../../../projects/bookme-lib/src/lib/services/usrMembersService.ts","../../../projects/bookme-lib/src/lib/services/userService.ts","../../../projects/bookme-lib/src/lib/services/sysAccountsService.ts","../../../projects/bookme-lib/src/lib/services/sysUsersService.ts","../../../projects/bookme-lib/src/lib/services/services.export.ts","../../../projects/bookme-lib/src/core-lib.module.ts","../../../projects/bookme-lib/src/public-api.ts","../../../projects/bookme-lib/src/mottyc-bookme-lib.ts"],"sourcesContent":["\n/* \n *  Schedule time frame\n *  Times are described in ISO 8601 format (See: https://www.w3.org/TR/NOTE-datetime).\n *  The format is: YYYY-MM-DDThh:mm:ssTZD where:\n *  <ul>\n *  <li>YYYY = four-digit year</li>\n *  <li>MM   = two-digit month (01=January, etc.)</li>\n *  <li>DD   = two-digit day of month (01 through 31)</li>\n *  <li>hh   = two digits of hour (00 through 23) (am/pm NOT allowed)</li>\n *  <li>mm   = two digits of minute (00 through 59)</li>\n *  <li>ss   = two digits of second (00 through 59)\n *  <li>TZD  = time zone designator (Z for UTC or +hh:mm or -hh:mm for Timezone offset)</li>\n *  </ul>\n*/\nexport class AbsoluteTimeFrame {\n \n    // Name of time frame \n    \n    public name: string;\n    \n \n    // Start time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    \n    public startTime: string;\n    \n \n    // End time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    \n    public endTime: string;\n    \n \n    // Specify if this time frame is active \n    \n    public active: boolean;\n    \n \n    constructor(name?: string, startTime?: string, endTime?: string, active?: boolean) { \n        this.name = name!;\n        this.startTime = startTime!;\n        this.endTime = endTime!;\n        this.active = active!;\n    }\n\n}\n\n\n/*\n *  Interface of AbsoluteTimeFrame\n*/\nexport interface IAbsoluteTimeFrame {\n \n    // Name of time frame \n    name?: string;\n \n    // Start time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    startTime?: string;\n \n    // End time in the ISO-8601 format (YYYY-MM-DDThh:mm:ssTZD) \n    endTime?: string;\n \n    // Specify if this time frame is active \n    active?: boolean;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  Account role represents the role of the user in the account\n*/\nexport class AccountRole {\n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // User role in the account \n    \n    public role: AccountRoleCode;\n    \n \n    constructor(accountId?: string, role?: AccountRoleCode) { \n        this.accountId = accountId!;\n        this.role = role!;\n    }\n\n}\n\n\n/*\n *  Interface of AccountRole\n*/\nexport interface IAccountRole {\n \n    // Account Id \n    accountId?: string;\n \n    // User role in the account \n    role?: AccountRoleCode;\n \n}\n","import { RecurrentActivity } from '../common/RecurrentActivity';\n\n/* \n *  Account specific settings\n*/\nexport class AccountSettings {\n \n    // Default recurrent weekly activities \n    \n    public defaultActivities: RecurrentActivity[];\n    \n \n    // Operational (dynamic) data retention time in days (1 - 365) \n    \n    public retentionDays: number;\n    \n \n    // Operational array of hours to run auto placement cron \n    \n    public autoPlacement: number[];\n    \n \n    constructor(defaultActivities?: RecurrentActivity[], retentionDays?: number, autoPlacement?: number[]) { \n        this.defaultActivities = defaultActivities!;\n        this.retentionDays = retentionDays!;\n        this.autoPlacement = autoPlacement!;\n    }\n\n}\n\n\n/*\n *  Interface of AccountSettings\n*/\nexport interface IAccountSettings {\n \n    // Default recurrent weekly activities \n    defaultActivities?: RecurrentActivity[];\n \n    // Operational (dynamic) data retention time in days (1 - 365) \n    retentionDays?: number;\n \n    // Operational array of hours to run auto placement cron \n    autoPlacement?: number[];\n \n}\n","\n/* \n *  Count data point\n*/\nexport class CountDataPoint {\n \n    // Datapoint time [Epoch milliseconds Timestamp] \n    \n    public timestamp: number;\n    \n \n    // Data point label \n    \n    public label: string;\n    \n \n    // Data point value \n    \n    public value: number;\n    \n \n    constructor(timestamp?: number, label?: string, value?: number) { \n        this.timestamp = timestamp!;\n        this.label = label!;\n        this.value = value!;\n    }\n\n}\n\n\n/*\n *  Interface of CountDataPoint\n*/\nexport interface ICountDataPoint {\n \n    // Datapoint time [Epoch milliseconds Timestamp] \n    timestamp?: number;\n \n    // Data point label \n    label?: string;\n \n    // Data point value \n    value?: number;\n \n}\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\n\n/* \n *  Login data (returned by the API after successful login)\n*/\nexport class LoginData {\n \n    // Access token to use (for the default account) \n    \n    public accessToken: string;\n    \n \n    // User Id \n    \n    public userId: string;\n    \n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // Current account id and role \n    \n    public accountRole: AccountRoleCode;\n    \n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    \n    public memberStatus: MemberStatusCode;\n    \n \n    // User name \n    \n    public userName: string;\n    \n \n    // User email \n    \n    public userEmail: string;\n    \n \n    // User type \n    \n    public userType: UserTypeCode;\n    \n \n    // User status \n    \n    public userStatus: UserStatusCode;\n    \n \n    // User must change password on next login \n    \n    public changePassword: boolean;\n    \n \n    // Messages to show to the user on login \n    \n    public messages: string[];\n    \n \n    constructor(accessToken?: string, userId?: string, accountId?: string, accountRole?: AccountRoleCode, memberStatus?: MemberStatusCode, userName?: string, userEmail?: string, userType?: UserTypeCode, userStatus?: UserStatusCode, changePassword?: boolean, messages?: string[]) { \n        this.accessToken = accessToken!;\n        this.userId = userId!;\n        this.accountId = accountId!;\n        this.accountRole = accountRole!;\n        this.memberStatus = memberStatus!;\n        this.userName = userName!;\n        this.userEmail = userEmail!;\n        this.userType = userType!;\n        this.userStatus = userStatus!;\n        this.changePassword = changePassword!;\n        this.messages = messages!;\n    }\n\n}\n\n\n/*\n *  Interface of LoginData\n*/\nexport interface ILoginData {\n \n    // Access token to use (for the default account) \n    accessToken?: string;\n \n    // User Id \n    userId?: string;\n \n    // Account Id \n    accountId?: string;\n \n    // Current account id and role \n    accountRole?: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    memberStatus?: MemberStatusCode;\n \n    // User name \n    userName?: string;\n \n    // User email \n    userEmail?: string;\n \n    // User type \n    userType?: UserTypeCode;\n \n    // User status \n    userStatus?: UserStatusCode;\n \n    // User must change password on next login \n    changePassword?: boolean;\n \n    // Messages to show to the user on login \n    messages?: string[];\n \n}\n","\n/* \n *  Login parameters data model\n*/\nexport class LoginParams {\n \n    // User email \n    \n    public email: string;\n    \n \n    // User password \n    \n    public password: string;\n    \n \n    // Access token - in case of re-login with existing token \n    \n    public accessToken: string;\n    \n \n    constructor(email?: string, password?: string, accessToken?: string) { \n        this.email = email!;\n        this.password = password!;\n        this.accessToken = accessToken!;\n    }\n\n}\n\n\n/*\n *  Interface of LoginParams\n*/\nexport interface ILoginParams {\n \n    // User email \n    email?: string;\n \n    // User password \n    password?: string;\n \n    // Access token - in case of re-login with existing token \n    accessToken?: string;\n \n}\n","import { UserGenderCode } from '../enums/UserGenderCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  Member registration data model\n*/\nexport class MemberRegistration {\n \n    // User name \n    \n    public name: string;\n    \n \n    // User email \n    \n    public email: string;\n    \n \n    // User mobile phone number (for notification and validation) \n    \n    public mobile: string;\n    \n \n    // User gender \n    \n    public gender: UserGenderCode;\n    \n \n    // Default account Id \n    \n    public accountId: string;\n    \n \n    // List of accounts and roles the user has access to \n    \n    public accountRole: AccountRoleCode;\n    \n \n    // Temporary password (leave empty for system generated password) \n    \n    public tempPassword: string;\n    \n \n    // User must change password on next login \n    \n    public changePassword: boolean;\n    \n \n    // Flag to send email verification to the user \n    \n    public verifyByEmail: boolean;\n    \n \n    constructor(name?: string, email?: string, mobile?: string, gender?: UserGenderCode, accountId?: string, accountRole?: AccountRoleCode, tempPassword?: string, changePassword?: boolean, verifyByEmail?: boolean) { \n        this.name = name!;\n        this.email = email!;\n        this.mobile = mobile!;\n        this.gender = gender!;\n        this.accountId = accountId!;\n        this.accountRole = accountRole!;\n        this.tempPassword = tempPassword!;\n        this.changePassword = changePassword!;\n        this.verifyByEmail = verifyByEmail!;\n    }\n\n}\n\n\n/*\n *  Interface of MemberRegistration\n*/\nexport interface IMemberRegistration {\n \n    // User name \n    name?: string;\n \n    // User email \n    email?: string;\n \n    // User mobile phone number (for notification and validation) \n    mobile?: string;\n \n    // User gender \n    gender?: UserGenderCode;\n \n    // Default account Id \n    accountId?: string;\n \n    // List of accounts and roles the user has access to \n    accountRole?: AccountRoleCode;\n \n    // Temporary password (leave empty for system generated password) \n    tempPassword?: string;\n \n    // User must change password on next login \n    changePassword?: boolean;\n \n    // Flag to send email verification to the user \n    verifyByEmail?: boolean;\n \n}\n","\n/* \n *  MemberUsage is a time period statistics about the number of bookings\n*/\nexport class MemberUsage {\n \n    // Member Id \n    \n    public id: string;\n    \n \n    // Member Name \n    \n    public name: string;\n    \n \n    // Member Data \n    \n    public data: string;\n    \n \n    // Total number of activities in this period \n    \n    public total: number;\n    \n \n    // Number activities on Sunday \n    \n    public sun: number;\n    \n \n    // Number activities on Monday \n    \n    public mon: number;\n    \n \n    // Number activities on Tuesday \n    \n    public tue: number;\n    \n \n    // Number activities on Wednesday \n    \n    public wed: number;\n    \n \n    // Number activities on Thursday \n    \n    public thu: number;\n    \n \n    // Number activities on Friday \n    \n    public fri: number;\n    \n \n    // Number activities on Saturday \n    \n    public sat: number;\n    \n \n    // Number of absences in this period \n    \n    public absences: number;\n    \n \n    // Number of accidents in this period \n    \n    public accidents: number;\n    \n \n    constructor(id?: string, name?: string, data?: string, total?: number, sun?: number, mon?: number, tue?: number, wed?: number, thu?: number, fri?: number, sat?: number, absences?: number, accidents?: number) { \n        this.id = id!;\n        this.name = name!;\n        this.data = data!;\n        this.total = total!;\n        this.sun = sun!;\n        this.mon = mon!;\n        this.tue = tue!;\n        this.wed = wed!;\n        this.thu = thu!;\n        this.fri = fri!;\n        this.sat = sat!;\n        this.absences = absences!;\n        this.accidents = accidents!;\n    }\n\n}\n\n\n/*\n *  Interface of MemberUsage\n*/\nexport interface IMemberUsage {\n \n    // Member Id \n    id?: string;\n \n    // Member Name \n    name?: string;\n \n    // Member Data \n    data?: string;\n \n    // Total number of activities in this period \n    total?: number;\n \n    // Number activities on Sunday \n    sun?: number;\n \n    // Number activities on Monday \n    mon?: number;\n \n    // Number activities on Tuesday \n    tue?: number;\n \n    // Number activities on Wednesday \n    wed?: number;\n \n    // Number activities on Thursday \n    thu?: number;\n \n    // Number activities on Friday \n    fri?: number;\n \n    // Number activities on Saturday \n    sat?: number;\n \n    // Number of absences in this period \n    absences?: number;\n \n    // Number of accidents in this period \n    accidents?: number;\n \n}\n","import { BookingOptionsMask } from '../enums/BookingOptionsMask';\nimport { DayOfWeekCode } from '../enums/DayOfWeekCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  Recurrent activity\n*/\nexport class RecurrentActivity {\n \n    // Max participants in the activity \n    \n    public key: number;\n    \n \n    // Day of week - based on ISO8601 \n    \n    public dayOfWeek: DayOfWeekCode;\n    \n \n    // Start time [00:00 Account Timezone] \n    \n    public startTime: string;\n    \n \n    // End time [00:00 Account Timezone] \n    \n    public endTime: string;\n    \n \n    // Name of the activity \n    \n    public name: string;\n    \n \n    // Activity description \n    \n    public description: string;\n    \n \n    // If true, no approval for resource allocation is required \n    \n    public autoApprove: boolean;\n    \n \n    // Activity is restricted to specific resource type \n    \n    public resourceFilter: ResourceTypeMask[];\n    \n \n    // Activity is restricted to specific role (members, para, team) \n    \n    public roleFilter: AccountRoleCode[];\n    \n \n    // Booking options \n    \n    public options: BookingOptionsMask;\n    \n \n    // Max participants in the activity \n    \n    public limit: number;\n    \n \n    // Activity icon \n    \n    public icon: string;\n    \n \n    // Activity icon color \n    \n    public iconColor: string;\n    \n \n    constructor(key?: number, dayOfWeek?: DayOfWeekCode, startTime?: string, endTime?: string, name?: string, description?: string, autoApprove?: boolean, resourceFilter?: ResourceTypeMask[], roleFilter?: AccountRoleCode[], options?: BookingOptionsMask, limit?: number, icon?: string, iconColor?: string) { \n        this.key = key!;\n        this.dayOfWeek = dayOfWeek!;\n        this.startTime = startTime!;\n        this.endTime = endTime!;\n        this.name = name!;\n        this.description = description!;\n        this.autoApprove = autoApprove!;\n        this.resourceFilter = resourceFilter!;\n        this.roleFilter = roleFilter!;\n        this.options = options!;\n        this.limit = limit!;\n        this.icon = icon!;\n        this.iconColor = iconColor!;\n    }\n\n}\n\n\n/*\n *  Interface of RecurrentActivity\n*/\nexport interface IRecurrentActivity {\n \n    // Max participants in the activity \n    key?: number;\n \n    // Day of week - based on ISO8601 \n    dayOfWeek?: DayOfWeekCode;\n \n    // Start time [00:00 Account Timezone] \n    startTime?: string;\n \n    // End time [00:00 Account Timezone] \n    endTime?: string;\n \n    // Name of the activity \n    name?: string;\n \n    // Activity description \n    description?: string;\n \n    // If true, no approval for resource allocation is required \n    autoApprove?: boolean;\n \n    // Activity is restricted to specific resource type \n    resourceFilter?: ResourceTypeMask[];\n \n    // Activity is restricted to specific role (members, para, team) \n    roleFilter?: AccountRoleCode[];\n \n    // Booking options \n    options?: BookingOptionsMask;\n \n    // Max participants in the activity \n    limit?: number;\n \n    // Activity icon \n    icon?: string;\n \n    // Activity icon color \n    iconColor?: string;\n \n}\n","import { DayOfWeekCode } from '../enums/DayOfWeekCode';\n\n/* \n *  Schedule recurrent time frame\n*/\nexport class RecurrentTimeFrame {\n \n    // Day of week - based on ISO8601 \n    \n    public dayOfWeek: DayOfWeekCode;\n    \n \n    // Start time [number of minutes start from 00:00] \n    \n    public startTime: number;\n    \n \n    // End time [number of minutes start from 00:00] \n    \n    public endTime: number;\n    \n \n    // Name of the time frame \n    \n    public name: string;\n    \n \n    constructor(dayOfWeek?: DayOfWeekCode, startTime?: number, endTime?: number, name?: string) { \n        this.dayOfWeek = dayOfWeek!;\n        this.startTime = startTime!;\n        this.endTime = endTime!;\n        this.name = name!;\n    }\n\n}\n\n\n/*\n *  Interface of RecurrentTimeFrame\n*/\nexport interface IRecurrentTimeFrame {\n \n    // Day of week - based on ISO8601 \n    dayOfWeek?: DayOfWeekCode;\n \n    // Start time [number of minutes start from 00:00] \n    startTime?: number;\n \n    // End time [number of minutes start from 00:00] \n    endTime?: number;\n \n    // Name of the time frame \n    name?: string;\n \n}\n","\n/* \n *  Key Value string-int tuple\n*/\nexport class StringIntValue {\n \n    // Key of tuple \n    \n    public key: string;\n    \n \n    // Int Value of tuple \n    \n    public value: number;\n    \n \n    constructor(key?: string, value?: number) { \n        this.key = key!;\n        this.value = value!;\n    }\n\n}\n\n\n/*\n *  Interface of StringIntValue\n*/\nexport interface IStringIntValue {\n \n    // Key of tuple \n    key?: string;\n \n    // Int Value of tuple \n    value?: number;\n \n}\n","\n/* \n *  Key Value string tuple\n*/\nexport class StringKeyValue {\n \n    // Key of tuple \n    \n    public key: string;\n    \n \n    // Value of tuple \n    \n    public value: string;\n    \n \n    constructor(key?: string, value?: string) { \n        this.key = key!;\n        this.value = value!;\n    }\n\n}\n\n\n/*\n *  Interface of StringKeyValue\n*/\nexport interface IStringKeyValue {\n \n    // Key of tuple \n    key?: string;\n \n    // Value of tuple \n    value?: string;\n \n}\n","\n/* \n *  Time frame (for search and reports)\n*/\nexport class TimeFrame {\n \n    // Start time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // End time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    constructor(from?: number, to?: number) { \n        this.from = from!;\n        this.to = to!;\n    }\n\n}\n\n\n/*\n *  Interface of TimeFrame\n*/\nexport interface ITimeFrame {\n \n    // Start time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    to?: number;\n \n}\n","import { Account } from '../entities/Account';\nimport { LoginData } from '../common/LoginData';\nimport { FeatureCode } from '../enums/FeatureCode';\n\n/* \n *  User Account info (returned by switch-account method)\n*/\nexport class UserAccountInfo {\n \n    // Account data \n    \n    public account: Account;\n    \n \n    // Login data \n    \n    public loginData: LoginData;\n    \n \n    // List of features enabled for this account \n    \n    public features: FeatureCode[];\n    \n \n    constructor(account?: Account, loginData?: LoginData, features?: FeatureCode[]) { \n        this.account = account!;\n        this.loginData = loginData!;\n        this.features = features!;\n    }\n\n}\n\n\n/*\n *  Interface of UserAccountInfo\n*/\nexport interface IUserAccountInfo {\n \n    // Account data \n    account?: Account;\n \n    // Login data \n    loginData?: LoginData;\n \n    // List of features enabled for this account \n    features?: FeatureCode[];\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n *  User invitation data model - used by account admin to invite user to the account\n*/\nexport class UserInvitation {\n \n    // User email \n    \n    public email: string;\n    \n \n    // User role in the account \n    \n    public role: AccountRoleCode;\n    \n \n    constructor(email?: string, role?: AccountRoleCode) { \n        this.email = email!;\n        this.role = role!;\n    }\n\n}\n\n\n/*\n *  Interface of UserInvitation\n*/\nexport interface IUserInvitation {\n \n    // User email \n    email?: string;\n \n    // User role in the account \n    role?: AccountRoleCode;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { UserTypeCode } from '../enums/UserTypeCode';\n\n/* \n *  User registration data model\n*/\nexport class UserRegistration {\n \n    // User name \n    \n    public name: string;\n    \n \n    // User email \n    \n    public email: string;\n    \n \n    // User mobile phone number (for notification and validation) \n    \n    public mobile: string;\n    \n \n    // Default account Id \n    \n    public accountId: string;\n    \n \n    // List of accounts and roles the user has access to \n    \n    public accountRole: AccountRoleCode;\n    \n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    \n    public type: UserTypeCode;\n    \n \n    // Temporary password (leave empty for system generated password) \n    \n    public tempPassword: string;\n    \n \n    // User must change password on next login \n    \n    public changePassword: boolean;\n    \n \n    // Flag to send email verification to the user \n    \n    public verifyByEmail: boolean;\n    \n \n    // User description \n    \n    public description: string;\n    \n \n    constructor(name?: string, email?: string, mobile?: string, accountId?: string, accountRole?: AccountRoleCode, type?: UserTypeCode, tempPassword?: string, changePassword?: boolean, verifyByEmail?: boolean, description?: string) { \n        this.name = name!;\n        this.email = email!;\n        this.mobile = mobile!;\n        this.accountId = accountId!;\n        this.accountRole = accountRole!;\n        this.type = type!;\n        this.tempPassword = tempPassword!;\n        this.changePassword = changePassword!;\n        this.verifyByEmail = verifyByEmail!;\n        this.description = description!;\n    }\n\n}\n\n\n/*\n *  Interface of UserRegistration\n*/\nexport interface IUserRegistration {\n \n    // User name \n    name?: string;\n \n    // User email \n    email?: string;\n \n    // User mobile phone number (for notification and validation) \n    mobile?: string;\n \n    // Default account Id \n    accountId?: string;\n \n    // List of accounts and roles the user has access to \n    accountRole?: AccountRoleCode;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    type?: UserTypeCode;\n \n    // Temporary password (leave empty for system generated password) \n    tempPassword?: string;\n \n    // User must change password on next login \n    changePassword?: boolean;\n \n    // Flag to send email verification to the user \n    verifyByEmail?: boolean;\n \n    // User description \n    description?: string;\n \n}\n","\n/* \n *  Weight Range\n*/\nexport class WeightRange {\n \n    // Minimum weight [Kg] \n    \n    public min: number;\n    \n \n    // Maximum weight [Kg] \n    \n    public max: number;\n    \n \n    constructor(min?: number, max?: number) { \n        this.min = min!;\n        this.max = max!;\n    }\n\n}\n\n\n/*\n *  Interface of WeightRange\n*/\nexport interface IWeightRange {\n \n    // Minimum weight [Kg] \n    min?: number;\n \n    // Maximum weight [Kg] \n    max?: number;\n \n}\n","\n/* \n *  Base entity includes common fields for all entities (persistence objects) in the system: id, create and update time\n*/\nexport class BaseEntity {\n \n    // Entity Id \n    \n    public id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public updatedOn: number;\n    \n \n    constructor(id?: string, createdOn?: number, updatedOn?: number) { \n        this.id = id!;\n        this.createdOn = createdOn!;\n        this.updatedOn = updatedOn!;\n    }\n\n}\n\n\n/*\n *  Interface of BaseEntity\n*/\nexport interface IBaseEntity {\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Absence entity in the system represents a club\n*/\nexport class Absence extends BaseEntity {\n \n    // User Id who registered for booking \n    \n    public userId: string;\n    \n \n    // Booking Id \n    \n    public bookingId: string;\n    \n \n    // When was the placement [Epoch milliseconds Timestamp] \n    \n    public placementOn: number;\n    \n \n    // Reason of absence \n    \n    public reason: string;\n    \n \n    // Does the absence justified \n    \n    public justified: boolean;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Absence\n*/\nexport interface IAbsence extends IBaseEntity {\n \n    // User Id who registered for booking \n    userId?: string;\n \n    // Booking Id \n    bookingId?: string;\n \n    // When was the placement [Epoch milliseconds Timestamp] \n    placementOn?: number;\n \n    // Reason of absence \n    reason?: string;\n \n    // Does the absence justified \n    justified?: boolean;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { AccountSettings } from '../common/AccountSettings';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Account entity in the system represents a club\n*/\nexport class Account extends BaseEntity {\n \n    // Account name \n    \n    public name: string;\n    \n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    \n    public type: AccountTypeCode;\n    \n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    \n    public status: AccountStatusCode;\n    \n \n    // When the account was suspended [Epoch milliseconds Timestamp] second inline field documentation \n    \n    public suspendedOn: number;\n    \n \n    // List of associated account groups (for feature toggle) \n    \n    public groups: string[];\n    \n \n    // Account timezone (IANA format, default is UTC) \n    \n    public timezone: string;\n    \n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    \n    public expiredOn: number;\n    \n \n    // Account description \n    \n    public description: string;\n    \n \n    // If true, no approval for resource allocation by the account admin is required \n    \n    public autoApprove: boolean;\n    \n \n    // Account specific settings \n    \n    public settings: AccountSettings;\n    \n \n    // Resource class managed in the account (boat, kayak...) \n    \n    public resourceClass: ResourceClassCode;\n    \n \n    // Default account activity icon \n    \n    public icon: string;\n    \n \n    // Default account activity icon color \n    \n    public iconColor: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Account\n*/\nexport interface IAccount extends IBaseEntity {\n \n    // Account name \n    name?: string;\n \n    // Account Type: UNDEFINED | DEMO | TRIAL | PARTNER | CUSTOMER \n    type?: AccountTypeCode;\n \n    // Account status: UNDEFINED | ACTIVE | SUSPENDED \n    status?: AccountStatusCode;\n \n    // When the account was suspended [Epoch milliseconds Timestamp] second inline field documentation \n    suspendedOn?: number;\n \n    // List of associated account groups (for feature toggle) \n    groups?: string[];\n \n    // Account timezone (IANA format, default is UTC) \n    timezone?: string;\n \n    // When the account will be expired [Epoch milliseconds Timestamp] (0 means no expiration time) \n    expiredOn?: number;\n \n    // Account description \n    description?: string;\n \n    // If true, no approval for resource allocation by the account admin is required \n    autoApprove?: boolean;\n \n    // Account specific settings \n    settings?: AccountSettings;\n \n    // Resource class managed in the account (boat, kayak...) \n    resourceClass?: ResourceClassCode;\n \n    // Default account activity icon \n    icon?: string;\n \n    // Default account activity icon color \n    iconColor?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { ActivityStatusCode } from '../enums/ActivityStatusCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { BookingOptionsMask } from '../enums/BookingOptionsMask';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Daily account activities entity\n*/\nexport class Activity extends BaseEntity {\n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // Activity name \n    \n    public name: string;\n    \n \n    // Activity description \n    \n    public description: string;\n    \n \n    // If true, no approval for resource allocation is required \n    \n    public autoApprove: boolean;\n    \n \n    // Start time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // End time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Status of booking requests \n    \n    public status: ActivityStatusCode;\n    \n \n    // Activity is restricted to specific resource types \n    \n    public resourceFilter: ResourceTypeMask[];\n    \n \n    // Activity is restricted to specific roles (members, para, team) \n    \n    public roleFilter: AccountRoleCode[];\n    \n \n    // Booking options \n    \n    public options: BookingOptionsMask;\n    \n \n    // Message for the activity \n    \n    public message: string;\n    \n \n    // Max participants in the activity \n    \n    public limit: number;\n    \n \n    // Activity icon \n    \n    public icon: string;\n    \n \n    // Activity icon color \n    \n    public iconColor: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Activity\n*/\nexport interface IActivity extends IBaseEntity {\n \n    // Account Id \n    accountId?: string;\n \n    // Activity name \n    name?: string;\n \n    // Activity description \n    description?: string;\n \n    // If true, no approval for resource allocation is required \n    autoApprove?: boolean;\n \n    // Start time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Status of booking requests \n    status?: ActivityStatusCode;\n \n    // Activity is restricted to specific resource types \n    resourceFilter?: ResourceTypeMask[];\n \n    // Activity is restricted to specific roles (members, para, team) \n    roleFilter?: AccountRoleCode[];\n \n    // Booking options \n    options?: BookingOptionsMask;\n \n    // Message for the activity \n    message?: string;\n \n    // Max participants in the activity \n    limit?: number;\n \n    // Activity icon \n    icon?: string;\n \n    // Activity icon color \n    iconColor?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { Booking } from '../entities/Booking';\nimport { Activity } from '../entities/Activity';\n\n/* \n *  Activity Booking Group\n *  Group list of bookings by activity\n*/\nexport class ActivityBookingGroup {\n \n    // Activity \n    \n    public activity: Activity;\n    \n \n    // List of bookings in the activity \n    \n    public bookings: Booking[];\n    \n \n    constructor(activity?: Activity, bookings?: Booking[]) { \n        this.activity = activity!;\n        this.bookings = bookings!;\n    }\n\n}\n\n\n/*\n *  Interface of ActivityBookingGroup\n*/\nexport interface IActivityBookingGroup {\n \n    // Activity \n    activity?: Activity;\n \n    // List of bookings in the activity \n    bookings?: Booking[];\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Actual activity for booking\n*/\nexport class Actual extends BaseEntity {\n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // Booking Id \n    \n    public bookingId: string;\n    \n \n    // User Id who registered for booking \n    \n    public userId: string;\n    \n \n    // User name (for display only) \n    \n    public userName: string;\n    \n \n    // Resource Id \n    \n    public resourceId: string;\n    \n \n    // Resource name (for display only) \n    \n    public resourceName: string;\n    \n \n    // Actual Duration (in minutes) \n    \n    public duration: number;\n    \n \n    // Actual Distance (in meters) \n    \n    public distance: number;\n    \n \n    // User missed the booking \n    \n    public isMissing: boolean;\n    \n \n    // Why the user missed the booking \n    \n    public reason: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Actual\n*/\nexport interface IActual extends IBaseEntity {\n \n    // Account Id \n    accountId?: string;\n \n    // Booking Id \n    bookingId?: string;\n \n    // User Id who registered for booking \n    userId?: string;\n \n    // User name (for display only) \n    userName?: string;\n \n    // Resource Id \n    resourceId?: string;\n \n    // Resource name (for display only) \n    resourceName?: string;\n \n    // Actual Duration (in minutes) \n    duration?: number;\n \n    // Actual Distance (in meters) \n    distance?: number;\n \n    // User missed the booking \n    isMissing?: boolean;\n \n    // Why the user missed the booking \n    reason?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { StringKeyValue } from '../common/StringKeyValue';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  API Key is used per application (e.g. Portal, Mobile App) or service to identify the consumer.\n *  The access to sets of REST endpoints is restricted according the API key.\n *  API key also dictates the default session TTL per application (e.g. 20 minutes for Portal or Console, 30 days for Mobile app)\n *  The application/system name is the Entity Id, the API key itself is not stored in the DB but generated on the fly.\n*/\nexport class ApiKey extends BaseEntity {\n \n    // The API Key (this value is auto generated and not stored in the DB) \n    \n    public key: string;\n    \n \n    // Default session token TTL (in minutes), 0 means no TTL \n    \n    public ttl: number;\n    \n \n    // Access Control List key value pair - the key is the REST resource name, the value is subset of CRUD (Create | Read |Update |Delete) \n    \n    public acl: StringKeyValue[];\n    \n \n    // Key version (for key rotation) \n    \n    public version: number;\n    \n \n    // Flag to indicate if this a system key or user defined key \n    \n    public isSystemKey: boolean;\n    \n \n    // Flag to indicate if the key is enabled \n    \n    public isEnabled: boolean;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of ApiKey\n*/\nexport interface IApiKey extends IBaseEntity {\n \n    // The API Key (this value is auto generated and not stored in the DB) \n    key?: string;\n \n    // Default session token TTL (in minutes), 0 means no TTL \n    ttl?: number;\n \n    // Access Control List key value pair - the key is the REST resource name, the value is subset of CRUD (Create | Read |Update |Delete) \n    acl?: StringKeyValue[];\n \n    // Key version (for key rotation) \n    version?: number;\n \n    // Flag to indicate if this a system key or user defined key \n    isSystemKey?: boolean;\n \n    // Flag to indicate if the key is enabled \n    isEnabled?: boolean;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { EntityTypeCode } from '../enums/EntityTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Audit Log entry - represents a single action done by user\n*/\nexport class AuditLog extends BaseEntity {\n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // User Id \n    \n    public userId: string;\n    \n \n    // User role in the account when the action was performed \n    \n    public userRole: AccountRoleCode;\n    \n \n    // User name when the action was performed \n    \n    public userName: string;\n    \n \n    // Action that was performed \n    \n    public action: string;\n    \n \n    // Changed item type \n    \n    public itemType: EntityTypeCode;\n    \n \n    // Changed item Id \n    \n    public itemId: string;\n    \n \n    // Item Name \n    \n    public itemName: string;\n    \n \n    // Item value before change [Json] \n    \n    public beforeChange: string;\n    \n \n    // Item delta after change [Json] \n    \n    public afterChange: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of AuditLog\n*/\nexport interface IAuditLog extends IBaseEntity {\n \n    // Account Id \n    accountId?: string;\n \n    // User Id \n    userId?: string;\n \n    // User role in the account when the action was performed \n    userRole?: AccountRoleCode;\n \n    // User name when the action was performed \n    userName?: string;\n \n    // Action that was performed \n    action?: string;\n \n    // Changed item type \n    itemType?: EntityTypeCode;\n \n    // Changed item Id \n    itemId?: string;\n \n    // Item Name \n    itemName?: string;\n \n    // Item value before change [Json] \n    beforeChange?: string;\n \n    // Item delta after change [Json] \n    afterChange?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BookingStatusCode } from '../enums/BookingStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Booking\n *  A booking is a pending request to book a resource for specific time for user(s), once it is approved, it becomes a placement\n*/\nexport class Booking extends BaseEntity {\n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // Activity id associated with this booking request \n    \n    public activityId: string;\n    \n \n    // Activity name associated with this booking request \n    \n    public activityName: string;\n    \n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    \n    public placementOn: number;\n    \n \n    // Activity end time [Epoch milliseconds Timestamp] \n    \n    public placementTo: number;\n    \n \n    // Booking for specific resource \n    \n    public resourceId: string;\n    \n \n    // Resource name (for display only) \n    \n    public resourceName: string;\n    \n \n    // User Id who requested the booking \n    \n    public requestedBy: string;\n    \n \n    // User name (for display only) \n    \n    public requestedByName: string;\n    \n \n    // User Ids registered for the placement \n    \n    public requestedFor: string[];\n    \n \n    // Users name (for display only) \n    \n    public requestedForNames: string[];\n    \n \n    // User Ids who actually participated the placement \n    \n    public participants: string[];\n    \n \n    // Resource type \n    \n    public resourceType: ResourceTypeMask;\n    \n \n    // User Id who approved the booking (or system for auto approval) \n    \n    public approvedBy: string;\n    \n \n    // When the placement was approved [Epoch milliseconds Timestamp] \n    \n    public approvedOn: number;\n    \n \n    // Booking status \n    \n    public status: BookingStatusCode;\n    \n \n    // Booking for a private resource \n    \n    public private: boolean;\n    \n \n    // Actual Duration (in minutes) \n    \n    public duration: number;\n    \n \n    // Actual Distance (in meters) \n    \n    public distance: number;\n    \n \n    // General notes (mainly for accident) \n    \n    public notes: string;\n    \n \n    // Booking Activity icon \n    \n    public icon: string;\n    \n \n    // Booking Activity icon color \n    \n    public iconColor: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Booking\n*/\nexport interface IBooking extends IBaseEntity {\n \n    // Account Id \n    accountId?: string;\n \n    // Activity id associated with this booking request \n    activityId?: string;\n \n    // Activity name associated with this booking request \n    activityName?: string;\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    placementOn?: number;\n \n    // Activity end time [Epoch milliseconds Timestamp] \n    placementTo?: number;\n \n    // Booking for specific resource \n    resourceId?: string;\n \n    // Resource name (for display only) \n    resourceName?: string;\n \n    // User Id who requested the booking \n    requestedBy?: string;\n \n    // User name (for display only) \n    requestedByName?: string;\n \n    // User Ids registered for the placement \n    requestedFor?: string[];\n \n    // Users name (for display only) \n    requestedForNames?: string[];\n \n    // User Ids who actually participated the placement \n    participants?: string[];\n \n    // Resource type \n    resourceType?: ResourceTypeMask;\n \n    // User Id who approved the booking (or system for auto approval) \n    approvedBy?: string;\n \n    // When the placement was approved [Epoch milliseconds Timestamp] \n    approvedOn?: number;\n \n    // Booking status \n    status?: BookingStatusCode;\n \n    // Booking for a private resource \n    private?: boolean;\n \n    // Actual Duration (in minutes) \n    duration?: number;\n \n    // Actual Distance (in meters) \n    distance?: number;\n \n    // General notes (mainly for accident) \n    notes?: string;\n \n    // Booking Activity icon \n    icon?: string;\n \n    // Booking Activity icon color \n    iconColor?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { Booking } from '../entities/Booking';\n\n/* \n *  Booking Group\n *  Group list of bookings by time\n*/\nexport class BookingGroup {\n \n    // Time for grouping [Epoch milliseconds Timestamp] \n    \n    public timeGroup: number;\n    \n \n    // List of bookings in the group \n    \n    public bookings: Booking[];\n    \n \n    constructor(timeGroup?: number, bookings?: Booking[]) { \n        this.timeGroup = timeGroup!;\n        this.bookings = bookings!;\n    }\n\n}\n\n\n/*\n *  Interface of BookingGroup\n*/\nexport interface IBookingGroup {\n \n    // Time for grouping [Epoch milliseconds Timestamp] \n    timeGroup?: number;\n \n    // List of bookings in the group \n    bookings?: Booking[];\n \n}\n","import { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Booking request\n *  A booking is a pending request to book a resource for specific time for user(s), once it is approved, it becomes a placement\n*/\nexport class BookingRequest extends BaseEntity {\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    \n    public placementOn: number;\n    \n \n    // Duration (in minutes) \n    \n    public duration: number;\n    \n \n    // User Id who requested the booking \n    \n    public requestedBy: string;\n    \n \n    // List of User Ids for the placement \n    \n    public requestedFor: string[];\n    \n \n    // Booking for specific resource \n    \n    public resourceId: string;\n    \n \n    // Resource type \n    \n    public resourceType: ResourceTypeMask;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of BookingRequest\n*/\nexport interface IBookingRequest extends IBaseEntity {\n \n    // When to ask for placement [Epoch milliseconds Timestamp] \n    placementOn?: number;\n \n    // Duration (in minutes) \n    duration?: number;\n \n    // User Id who requested the booking \n    requestedBy?: string;\n \n    // List of User Ids for the placement \n    requestedFor?: string[];\n \n    // Booking for specific resource \n    resourceId?: string;\n \n    // Resource type \n    resourceType?: ResourceTypeMask;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { FeatureCode } from '../enums/FeatureCode';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  System functionality (feature) description\n*/\nexport class Feature extends BaseEntity {\n \n    // Feature code \n    \n    public code: FeatureCode;\n    \n \n    // Feature name \n    \n    public name: string;\n    \n \n    // Feature description \n    \n    public description: string;\n    \n \n    // Feature category \n    \n    public category: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Feature\n*/\nexport interface IFeature extends IBaseEntity {\n \n    // Feature code \n    code?: FeatureCode;\n \n    // Feature name \n    name?: string;\n \n    // Feature description \n    description?: string;\n \n    // Feature category \n    category?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { FeatureCode } from '../enums/FeatureCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Group of features\n*/\nexport class FeaturesGroup extends BaseEntity {\n \n    // Features group name \n    \n    public name: string;\n    \n \n    // List of associated features \n    \n    public features: FeatureCode[];\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of FeaturesGroup\n*/\nexport interface IFeaturesGroup extends IBaseEntity {\n \n    // Features group name \n    name?: string;\n \n    // List of associated features \n    features?: FeatureCode[];\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Incident\n*/\nexport class Incident extends BaseEntity {\n \n    // Resource Id (in the club) \n    \n    public resourceId: string;\n    \n \n    // List of involved users \n    \n    public involved: string[];\n    \n \n    // When the incident occurred [Epoch milliseconds Timestamp] \n    \n    public occurredOn: number;\n    \n \n    // Incident description \n    \n    public description: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Incident\n*/\nexport interface IIncident extends IBaseEntity {\n \n    // Resource Id (in the club) \n    resourceId?: string;\n \n    // List of involved users \n    involved?: string[];\n \n    // When the incident occurred [Epoch milliseconds Timestamp] \n    occurredOn?: number;\n \n    // Incident description \n    description?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  User membership in an account\n*/\nexport class Member extends BaseEntity {\n \n    // User Id \n    \n    public userId: string;\n    \n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    \n    public accountRole: AccountRoleCode;\n    \n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    \n    public status: MemberStatusCode;\n    \n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    \n    public memberSince: number;\n    \n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    \n    public expiration: number;\n    \n \n    // Member level [1,2,3] \n    \n    public level: number;\n    \n \n    // Member can be cox ? \n    \n    public isCox: boolean;\n    \n \n    // Member can be mentor ? \n    \n    public isMentor: boolean;\n    \n \n    // Training time [minutes] \n    \n    public trainingTime: number;\n    \n \n    // Restrictions \n    \n    public restrictions: string;\n    \n \n    // Preferred resources for booking a single [ordered list] \n    \n    public preferred1: string[];\n    \n \n    // Preferred resources for booking a double [ordered list] \n    \n    public preferred2: string[];\n    \n \n    // Preferred resources for booking a quad [ordered list] \n    \n    public preferred4: string[];\n    \n \n    // Preferred resources for booking an eight [ordered list] \n    \n    public preferred8: string[];\n    \n \n    // Is this account activities should not be visible to the aggregated activity list ? \n    \n    public isHidden: boolean;\n    \n \n    // Member score (based on absences and incidents in the last 180 days) \n    \n    public score: number;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Member\n*/\nexport interface IMember extends IBaseEntity {\n \n    // User Id \n    userId?: string;\n \n    // Account Id \n    accountId?: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    accountRole?: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    status?: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    memberSince?: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    expiration?: number;\n \n    // Member level [1,2,3] \n    level?: number;\n \n    // Member can be cox ? \n    isCox?: boolean;\n \n    // Member can be mentor ? \n    isMentor?: boolean;\n \n    // Training time [minutes] \n    trainingTime?: number;\n \n    // Restrictions \n    restrictions?: string;\n \n    // Preferred resources for booking a single [ordered list] \n    preferred1?: string[];\n \n    // Preferred resources for booking a double [ordered list] \n    preferred2?: string[];\n \n    // Preferred resources for booking a quad [ordered list] \n    preferred4?: string[];\n \n    // Preferred resources for booking an eight [ordered list] \n    preferred8?: string[];\n \n    // Is this account activities should not be visible to the aggregated activity list ? \n    isHidden?: boolean;\n \n    // Member score (based on absences and incidents in the last 180 days) \n    score?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { User } from '../entities/User';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Member in an account with extended user info (for display only)\n*/\nexport class MemberUser extends BaseEntity {\n \n    // User Id \n    \n    public userId: string;\n    \n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    \n    public accountRole: AccountRoleCode;\n    \n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    \n    public status: MemberStatusCode;\n    \n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    \n    public memberSince: number;\n    \n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    \n    public expiration: number;\n    \n \n    // Member level [1,2,3] \n    \n    public level: number;\n    \n \n    // Member can be cox ? \n    \n    public isCox: boolean;\n    \n \n    // Member can be mentor ? \n    \n    public isMentor: boolean;\n    \n \n    // Training time [minutes] \n    \n    public trainingTime: number;\n    \n \n    // Restrictions \n    \n    public restrictions: string;\n    \n \n    // Preferred resources for booking a single [ordered list] \n    \n    public preferred1: string[];\n    \n \n    // Preferred resources for booking a double [ordered list] \n    \n    public preferred2: string[];\n    \n \n    // Preferred resources for booking a quad [ordered list] \n    \n    public preferred4: string[];\n    \n \n    // Preferred resources for booking an eight [ordered list] \n    \n    public preferred8: string[];\n    \n \n    // Is this account activities should not be visible to the aggregated activity list ? \n    \n    public isHidden: boolean;\n    \n \n    // Member score (based on absences and incidents in the last 180 days) \n    \n    public score: number;\n    \n \n    // User Info \n    \n    public user: User;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of MemberUser\n*/\nexport interface IMemberUser extends IBaseEntity {\n \n    // User Id \n    userId?: string;\n \n    // Account Id \n    accountId?: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    accountRole?: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    status?: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    memberSince?: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    expiration?: number;\n \n    // Member level [1,2,3] \n    level?: number;\n \n    // Member can be cox ? \n    isCox?: boolean;\n \n    // Member can be mentor ? \n    isMentor?: boolean;\n \n    // Training time [minutes] \n    trainingTime?: number;\n \n    // Restrictions \n    restrictions?: string;\n \n    // Preferred resources for booking a single [ordered list] \n    preferred1?: string[];\n \n    // Preferred resources for booking a double [ordered list] \n    preferred2?: string[];\n \n    // Preferred resources for booking a quad [ordered list] \n    preferred4?: string[];\n \n    // Preferred resources for booking an eight [ordered list] \n    preferred8?: string[];\n \n    // Is this account activities should not be visible to the aggregated activity list ? \n    isHidden?: boolean;\n \n    // Member score (based on absences and incidents in the last 180 days) \n    score?: number;\n \n    // User Info \n    user?: User;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Member in an account with extended account info (for display only)\n*/\nexport class Membership extends BaseEntity {\n \n    // User Id \n    \n    public userId: string;\n    \n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    \n    public accountRole: AccountRoleCode;\n    \n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    \n    public status: MemberStatusCode;\n    \n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    \n    public memberSince: number;\n    \n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    \n    public expiration: number;\n    \n \n    // Member level [1,2,3] \n    \n    public level: number;\n    \n \n    // Member can be cox ? \n    \n    public isCox: boolean;\n    \n \n    // Member can be mentor ? \n    \n    public isMentor: boolean;\n    \n \n    // Training time [minutes] \n    \n    public trainingTime: number;\n    \n \n    // Restrictions \n    \n    public restrictions: string;\n    \n \n    // Preferred resources for booking a single [ordered list] \n    \n    public preferred1: string[];\n    \n \n    // Preferred resources for booking a double [ordered list] \n    \n    public preferred2: string[];\n    \n \n    // Preferred resources for booking a quad [ordered list] \n    \n    public preferred4: string[];\n    \n \n    // Preferred resources for booking an eight [ordered list] \n    \n    public preferred8: string[];\n    \n \n    // Is this account activities should not be visible to the aggregated activity list ? \n    \n    public isHidden: boolean;\n    \n \n    // Member score (based on absences and incidents in the last 180 days) \n    \n    public score: number;\n    \n \n    // Account Name \n    \n    public accountName: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Membership\n*/\nexport interface IMembership extends IBaseEntity {\n \n    // User Id \n    userId?: string;\n \n    // Account Id \n    accountId?: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    accountRole?: AccountRoleCode;\n \n    // Member status: UNDEFINED | PENDING | ACTIVE | FROZEN \n    status?: MemberStatusCode;\n \n    // Member in the club since [Epoch milliseconds Timestamp] \n    memberSince?: number;\n \n    // Membership expiration [Epoch milliseconds Timestamp] \n    expiration?: number;\n \n    // Member level [1,2,3] \n    level?: number;\n \n    // Member can be cox ? \n    isCox?: boolean;\n \n    // Member can be mentor ? \n    isMentor?: boolean;\n \n    // Training time [minutes] \n    trainingTime?: number;\n \n    // Restrictions \n    restrictions?: string;\n \n    // Preferred resources for booking a single [ordered list] \n    preferred1?: string[];\n \n    // Preferred resources for booking a double [ordered list] \n    preferred2?: string[];\n \n    // Preferred resources for booking a quad [ordered list] \n    preferred4?: string[];\n \n    // Preferred resources for booking an eight [ordered list] \n    preferred8?: string[];\n \n    // Is this account activities should not be visible to the aggregated activity list ? \n    isHidden?: boolean;\n \n    // Member score (based on absences and incidents in the last 180 days) \n    score?: number;\n \n    // Account Name \n    accountName?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { TimeFrame } from '../common/TimeFrame';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Notification\n*/\nexport class Notification extends BaseEntity {\n \n    // User Id \n    \n    public userId: string;\n    \n \n    // Timeframe for the notification to be visible [Epoch milliseconds Timestamp] \n    \n    public notifyOn: TimeFrame;\n    \n \n    // Message to show \n    \n    public message: string;\n    \n \n    // Notification type \n    \n    public type: NotificationTypeCode;\n    \n \n    // When the message has been seen by the user [Epoch milliseconds Timestamp] \n    \n    public acceptedOn: number;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Notification\n*/\nexport interface INotification extends IBaseEntity {\n \n    // User Id \n    userId?: string;\n \n    // Timeframe for the notification to be visible [Epoch milliseconds Timestamp] \n    notifyOn?: TimeFrame;\n \n    // Message to show \n    message?: string;\n \n    // Notification type \n    type?: NotificationTypeCode;\n \n    // When the message has been seen by the user [Epoch milliseconds Timestamp] \n    acceptedOn?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { PlacementStatusCode } from '../enums/PlacementStatusCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { Resource } from '../entities/Resource';\nimport { Booking } from '../entities/Booking';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Placement is a structure to ap booking requests to a resource\n*/\nexport class Placement extends BaseEntity {\n \n    // Placement resource \n    \n    public resource: Resource;\n    \n \n    // List of bookings \n    \n    public bookings: Booking[];\n    \n \n    // Placement status \n    \n    public status: PlacementStatusCode;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Placement\n*/\nexport interface IPlacement extends IBaseEntity {\n \n    // Placement resource \n    resource?: Resource;\n \n    // List of bookings \n    bookings?: Booking[];\n \n    // Placement status \n    status?: PlacementStatusCode;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { Placement } from '../entities/Placement';\nimport { Booking } from '../entities/Booking';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Planing is a set of booking request and placements\n*/\nexport class Planing extends BaseEntity {\n \n    // Activity Id \n    \n    public activityId: string;\n    \n \n    // Start time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // End time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // List of placements \n    \n    public placements: Placement[];\n    \n \n    // List of bookings \n    \n    public bookings: Booking[];\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Planing\n*/\nexport interface IPlaning extends IBaseEntity {\n \n    // Activity Id \n    activityId?: string;\n \n    // Start time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // End time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // List of placements \n    placements?: Placement[];\n \n    // List of bookings \n    bookings?: Booking[];\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Registration\n *  A record for a user indicating if he showed up or missed the booking\n*/\nexport class Registration extends BaseEntity {\n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // Referenced booking Id \n    \n    public bookingId: string;\n    \n \n    // User Id who registered for booking \n    \n    public userId: string;\n    \n \n    // User name (for display only) \n    \n    public userName: string;\n    \n \n    // User missed the booking \n    \n    public isMissing: boolean;\n    \n \n    // Why the user missed the booking \n    \n    public reason: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Registration\n*/\nexport interface IRegistration extends IBaseEntity {\n \n    // Account Id \n    accountId?: string;\n \n    // Referenced booking Id \n    bookingId?: string;\n \n    // User Id who registered for booking \n    userId?: string;\n \n    // User name (for display only) \n    userName?: string;\n \n    // User missed the booking \n    isMissing?: boolean;\n \n    // Why the user missed the booking \n    reason?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { WeightRange } from '../common/WeightRange';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Resource type\n*/\nexport class Resource extends BaseEntity {\n \n    // Resource Identity in the club \n    \n    public name: string;\n    \n \n    // Resource class \n    \n    public resourceClass: ResourceClassCode;\n    \n \n    // Resource type \n    \n    public resourceType: ResourceTypeMask;\n    \n \n    // Resource status (Available | non-available ...) \n    \n    public status: ResourceStatusCode;\n    \n \n    // Resource used by \n    \n    public forUseBy: AccountRoleCode;\n    \n \n    // Manufacturer brand \n    \n    public brand: string;\n    \n \n    // Minimum Maximum weight [Kg] \n    \n    public weightRange: WeightRange;\n    \n \n    // Description \n    \n    public description: string;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Resource\n*/\nexport interface IResource extends IBaseEntity {\n \n    // Resource Identity in the club \n    name?: string;\n \n    // Resource class \n    resourceClass?: ResourceClassCode;\n \n    // Resource type \n    resourceType?: ResourceTypeMask;\n \n    // Resource status (Available | non-available ...) \n    status?: ResourceStatusCode;\n \n    // Resource used by \n    forUseBy?: AccountRoleCode;\n \n    // Manufacturer brand \n    brand?: string;\n \n    // Minimum Maximum weight [Kg] \n    weightRange?: WeightRange;\n \n    // Description \n    description?: string;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { DayOfWeekCode } from '../enums/DayOfWeekCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Usage is a daily statistics about the number of participants and resource usage\n *  Id is the day Id (in the form of: YYYYMMDD000000)\n*/\nexport class Usage extends BaseEntity {\n \n    // Day of week (for distribution) \n    \n    public weekday: DayOfWeekCode;\n    \n \n    // Total number of participants \n    \n    public count: number;\n    \n \n    // Number of singles \n    \n    public single: number;\n    \n \n    // Number of doubles \n    \n    public double: number;\n    \n \n    // Number of quads \n    \n    public quad: number;\n    \n \n    // Number of eights \n    \n    public eight: number;\n    \n \n    // Number of private single boats \n    \n    public singlePrivate: number;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Usage\n*/\nexport interface IUsage extends IBaseEntity {\n \n    // Day of week (for distribution) \n    weekday?: DayOfWeekCode;\n \n    // Total number of participants \n    count?: number;\n \n    // Number of singles \n    single?: number;\n \n    // Number of doubles \n    double?: number;\n \n    // Number of quads \n    quad?: number;\n \n    // Number of eights \n    eight?: number;\n \n    // Number of private single boats \n    singlePrivate?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { UserGenderCode } from '../enums/UserGenderCode';\nimport { BaseEntity } from '../entities/BaseEntity';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  User type\n*/\nexport class User extends BaseEntity {\n \n    // User name \n    \n    public name: string;\n    \n \n    // User email \n    \n    public email: string;\n    \n \n    // User mobile phone number (for notification and validation) \n    \n    public mobile: string;\n    \n \n    // Password salt \n    \n    public salt: string;\n    \n \n    // Password hash \n    \n    public hash: string;\n    \n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    \n    public type: UserTypeCode;\n    \n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    \n    public status: UserStatusCode;\n    \n \n    // When user was last suspended [Epoch milliseconds Timestamp] \n    \n    public suspendedOn: number;\n    \n \n    // When user last signed in to the app [Epoch milliseconds Timestamp] \n    \n    public lastSignIn: number;\n    \n \n    // User must change password on next login \n    \n    public changePassword: boolean;\n    \n \n    // When user created his password [Epoch milliseconds Timestamp] \n    \n    public passwordChangedOn: number;\n    \n \n    // Default account Id \n    \n    public defaultAccount: string;\n    \n \n    // User description \n    \n    public description: string;\n    \n \n    // User birthday (to determine age) [Epoch milliseconds Timestamp] \n    \n    public birthday: number;\n    \n \n    // User gender \n    \n    public gender: UserGenderCode;\n    \n \n    // User weight [Kg] \n    \n    public weight: number;\n    \n \n    // User Height [Cm] \n    \n    public height: number;\n    \n \n    // User Shoe Size [European size] \n    \n    public shoeSize: number;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of User\n*/\nexport interface IUser extends IBaseEntity {\n \n    // User name \n    name?: string;\n \n    // User email \n    email?: string;\n \n    // User mobile phone number (for notification and validation) \n    mobile?: string;\n \n    // Password salt \n    salt?: string;\n \n    // Password hash \n    hash?: string;\n \n    // User type: UNDEFINED | SYSADMIN | SUPPORT | USER \n    type?: UserTypeCode;\n \n    // User status: UNDEFINED | PENDING | ACTIVE | BLOCKED | SUSPENDED \n    status?: UserStatusCode;\n \n    // When user was last suspended [Epoch milliseconds Timestamp] \n    suspendedOn?: number;\n \n    // When user last signed in to the app [Epoch milliseconds Timestamp] \n    lastSignIn?: number;\n \n    // User must change password on next login \n    changePassword?: boolean;\n \n    // When user created his password [Epoch milliseconds Timestamp] \n    passwordChangedOn?: number;\n \n    // Default account Id \n    defaultAccount?: string;\n \n    // User description \n    description?: string;\n \n    // User birthday (to determine age) [Epoch milliseconds Timestamp] \n    birthday?: number;\n \n    // User gender \n    gender?: UserGenderCode;\n \n    // User weight [Kg] \n    weight?: number;\n \n    // User Height [Cm] \n    height?: number;\n \n    // User Shoe Size [European size] \n    shoeSize?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","import { BaseEntity } from '../entities/BaseEntity';\nimport { IBaseEntity } from '../entities/BaseEntity';\n\n/* \n *  Verification type used to verify user with a temporary code\n*/\nexport class Verification extends BaseEntity {\n \n    // Verification code \n    \n    public code: string;\n    \n \n    // Verification for user id \n    \n    public userId: string;\n    \n \n    // User email \n    \n    public email: string;\n    \n \n    // User mobile phone number (for notification and validation) \n    \n    public mobile: string;\n    \n \n    // When the verification code was sent [Epoch milliseconds Timestamp] \n    \n    public sent: number;\n    \n \n    // Entity Id \n    \n    public override id: string;\n    \n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    \n    public override createdOn: number;\n    \n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    \n    public override updatedOn: number;\n    \n \n\n}\n\n\n/*\n *  Interface of Verification\n*/\nexport interface IVerification extends IBaseEntity {\n \n    // Verification code \n    code?: string;\n \n    // Verification for user id \n    userId?: string;\n \n    // User email \n    email?: string;\n \n    // User mobile phone number (for notification and validation) \n    mobile?: string;\n \n    // When the verification code was sent [Epoch milliseconds Timestamp] \n    sent?: number;\n \n    // Entity Id \n    id?: string;\n \n    // When the entity was created [Epoch milliseconds Timestamp] \n    createdOn?: number;\n \n    // When the entity was updated [Epoch milliseconds Timestamp] \n    updatedOn?: number;\n \n}\n","/* \n   Account role code (represent role of user in the account) \n*/\nexport enum AccountRoleCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account administrator can perform all operations [1] \n    ADMIN = 1,\n \n    // Part of a club staff [2] \n    STAFF = 2,\n \n    // Club Member [4] \n    MEMBER = 4,\n \n    // Olympic team [8] \n    TEAM = 8,\n \n    // Paralympic team [16] \n    PARA = 16,\n \n    // Club guest [32] \n    GUEST = 32,\n \n}","/* \n   Account status code \n*/\nexport enum AccountStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Active account [1] \n    ACTIVE = 1,\n \n    // Suspended (non-active) account [2] \n    SUSPENDED = 2,\n \n    // Deleted account [3] \n    DELETED = 3,\n \n}","/* \n   Account type code \n*/\nexport enum AccountTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Demo account for Tests and Demos [1] \n    DEMO = 1,\n \n    // Trial account for pilots [2] \n    TRIAL = 2,\n \n    // Active account for customer [3] \n    CUSTOMER = 3,\n \n}","/* \n   Daily activity status code \n*/\nexport enum ActivityStatusCode {\n \n    // Undefined - No booking in this activity [0] \n    UNDEFINED = 0,\n \n    // Some booking requests approved, not all [1] \n    PARTIAL = 1,\n \n    // All booking requests approved [2] \n    FULL = 2,\n \n}","/* \n   General booking options mask (Attributes bit mask) \n*/\nexport enum BookingOptionsMask {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Selection is optional [1] \n    OPTIONAL = 1,\n \n    // No approval for resource allocation is required [2] \n    APPROVE = 2,\n \n    // Show Sweep (single oar) [4] \n    SWEEP = 4,\n \n    // Show Wide [16] \n    WIDE = 16,\n \n    // Show Concept [32] \n    CONCEPT = 32,\n \n    // Show Private [64] \n    PRIVATE = 64,\n \n    // Show Coastal (use in sea) [128] \n    COASTAL = 128,\n \n    // Show Single [1024] \n    P1 = 1024,\n \n    // Show Double [2048] \n    P2 = 2048,\n \n    // Show Quad [4096] \n    P4 = 4096,\n \n    // Show Eight [8192] \n    P8 = 8192,\n \n}","/* \n   Booking status code \n*/\nexport enum BookingStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Pending booking request [1] \n    PENDING = 1,\n \n    // Approved booking [2] \n    APPROVED = 2,\n \n    // Completed booking [3] \n    COMPLETED = 3,\n \n    // User absence from booking [4] \n    ABSENCE = 4,\n \n    // User was involved in an accident [5] \n    ACCIDENT = 5,\n \n}","/* \n   Day of week code \n*/\nexport enum DayOfWeekCode {\n \n    // Sunday [0] \n    SUN = 0,\n \n    // Monday [1] \n    MON = 1,\n \n    // Tuesday [2] \n    TUE = 2,\n \n    // Wednesday [3] \n    WED = 3,\n \n    // Thursday [4] \n    THU = 4,\n \n    // Friday [5] \n    FRI = 5,\n \n    // Saturday [6] \n    SAT = 6,\n \n}","/* \n   Entity type code (represent entity type in the system) \n*/\nexport enum EntityTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Account [1] \n    ACCOUNT = 1,\n \n    // User [2] \n    USER = 2,\n \n    // API Key [3] \n    API_KEY = 3,\n \n    // Audit Log [4] \n    AUDIT_LOG = 4,\n \n    // Booking [5] \n    BOOKING = 5,\n \n    // Feature [6] \n    FEATURE = 6,\n \n    // Features Group [7] \n    FEATURES_GROUP = 7,\n \n    // Incident [8] \n    INCIDENT = 8,\n \n    // Booking Placement [9] \n    PLACEMENT = 9,\n \n    // Club Resource [10] \n    RESOURCE = 10,\n \n}","/* \n   Feature codes \n*/\nexport enum FeatureCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Admin module [1] \n    MODULE_ADMIN = 1,\n \n    // System admin module [2] \n    MODULE_SYSADMIN = 2,\n \n}","/* \n   Kayak type code \n*/\nexport enum KayakTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Ocean Kayak [2 + 1024] \n    OCEAN = 1026,\n \n    // Double Ocean Kayak [2 + 2048] \n    OCEAN_X2 = 2050,\n \n}","/* \n   Member status code \n*/\nexport enum MemberStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Member is registered and pending approval [1] \n    PENDING = 1,\n \n    // Active member in the account [2] \n    ACTIVE = 2,\n \n    // Frozen member (temporarily not active) [3] \n    FROZEN = 3,\n \n    // Inactive member (permanently not active) [4] \n    INACTIVE = 4,\n \n}","/* \n   Account type code \n*/\nexport enum NotificationTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Message (icon: email) [1] \n    MESSAGE = 1,\n \n    // Warning (icon: warning) [2] \n    WARNING = 2,\n \n    // Congrats (icon: local_florist) [3] \n    CONGRATS = 3,\n \n}","/* \n   Placement status code \n*/\nexport enum PlacementStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Partial [1] \n    PARTIAL = 1,\n \n    // Complete [2] \n    COMPLETE = 2,\n \n    // Approved [3] \n    APPROVED = 3,\n \n}","/* \n   Resource class code (represent resource in the system) \n*/\nexport enum ResourceClassCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Rowing Boat [1024] \n    RBOAT = 1024,\n \n    // Kayak [2048] \n    KAYAK = 2048,\n \n}","/* \n   Resource status code \n*/\nexport enum ResourceStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Available [1] \n    AVAILABLE = 1,\n \n    // Non-available [2] \n    NONAVAILABLE = 2,\n \n}","/* \n   General Resource Type (Attributes bit mask) \n*/\nexport enum ResourceTypeMask {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Rowing Boat [1] \n    RBOAT = 1,\n \n    // Kayak [2] \n    KAYAK = 2,\n \n    // Sculling (2 oars) [4] \n    SCULL = 4,\n \n    // Need Cox [8] \n    COX = 8,\n \n    // Wide [16] \n    WIDE = 16,\n \n    // For competition [32] \n    COMP = 32,\n \n    // For para-olympic [64] \n    PARA = 64,\n \n    // Coastal (use in sea) [128] \n    COASTAL = 128,\n \n    // Single [1024] \n    P1 = 1024,\n \n    // Double [2048] \n    P2 = 2048,\n \n    // Quad [4096] \n    P4 = 4096,\n \n    // Eight [8192] \n    P8 = 8192,\n \n}","/* \n   Rowing boat type code \n*/\nexport enum RowingBoatTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Sculling 1X [1 + 4 + 1024] \n    SCULL_1X = 1029,\n \n    // Sculling 1X Wide [1 + 4 + 1024 + 16] \n    SCULL_1X_WIDE = 1045,\n \n    // Sculling 1X Competition [1 + 4 + 1024 + 32] \n    SCULL_1X_COMP = 1061,\n \n    // Sculling 1X Para Olympic [1 + 4 + 1024 + 64] \n    SCULL_1X_PARA = 1093,\n \n    // Sculling 2X [1 + 4 + 2048] \n    SCULL_2X = 2053,\n \n    // Sculling 2X Wide [1 + 4 + 2048 + 16] \n    SCULL_2X_WIDE = 2069,\n \n    // Sculling 2X Competition [1 + 4 + 2048 + 16 + 32] \n    SCULL_2X_COMP = 2101,\n \n    // Sculling 2X Para Olympic [1 + 4 + 2048 + 16 + 64] \n    SCULL_2X_PARA = 2133,\n \n    // Sweeping 2- Coxless Pair [1 + 2048] \n    SWEEP_2_COXLESS = 2049,\n \n    // Coastal 2X [1 + 4 + 8 + 128 + 2048] \n    COASTAL_2X = 2189,\n \n    // Sculling 4X Quad [1 + 4 + 4096] \n    SCULL_4X = 4101,\n \n    // Sculling 4X Quad with cox [1 + 4 + 8 + 4096] \n    SCULL_4X_COX = 4109,\n \n    // Sweeping 4- Coxless Quad [1 + 4096] \n    SWEEP_4_COXLESS = 4097,\n \n    // Sculling 4X Competition [1 + 4 + 32 + 4096] \n    SCULL_4X_COMP = 4133,\n \n    // Sculling 4X Para Olympic [1 + 4 + 64 + 4096] \n    SCULL_4X_PARA = 4165,\n \n    // Coastal 4X with cox [1 + 4 + 8 + 128 + 4096] \n    COASTAL_4X_COX = 4237,\n \n    // Sweeping 8 - with cox [1 + 8192] \n    SWEEP_8_COX = 8193,\n \n    // Sculling 8 - with cox [1 + 8 + 8192] \n    SCULL_8X_COX = 8201,\n \n}","/* \n   Time unit interval \n*/\nexport enum TimeUnitCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Second interval [1] \n    SECOND = 1,\n \n    // Minute interval [2] \n    MINUTE = 2,\n \n    // Hour interval [3] \n    HOUR = 3,\n \n    // Day interval [4] \n    DAY = 4,\n \n    // Week interval [5] \n    WEEK = 5,\n \n    // Month interval [6] \n    MONTH = 6,\n \n}","/* \n   User gender code \n*/\nexport enum UserGenderCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // Male [1] \n    MALE = 1,\n \n    // Female [2] \n    FEMALE = 2,\n \n}","/* \n   User status code \n*/\nexport enum UserStatusCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // User is registered and pending verification [1] \n    PENDING = 1,\n \n    // Active user in the system [2] \n    ACTIVE = 2,\n \n    // Blocked user (only account system can unblock the user) [3] \n    BLOCKED = 3,\n \n    // Suspended user (about to be deleted) [4] \n    SUSPENDED = 4,\n \n}","/* \n   User type code \n*/\nexport enum UserTypeCode {\n \n    // Undefined [0] \n    UNDEFINED = 0,\n \n    // System administrator has access to all accounts and permissions to perform all actions [1] \n    SYSADMIN = 1,\n \n    // Support user has view permissions only for all accounts that enabled option Enable Support [2] \n    SUPPORT = 2,\n \n    // Account user - has access to specific accounts with role based access control [4] \n    USER = 4,\n \n    // Account service - to be used by other systems to perform actions using the API (can't login as a user to the portal)' [5]` \n    SERVICE = 5,\n \n}","\n/* \n*/\nexport class AccountIdRequest {\n \n    // Account Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of AccountIdRequest\n*/\nexport interface IAccountIdRequest {\n \n    // Account Id \n    id?: string;\n \n}\n","\n/* \n *  Entity action response message returned for any create/update action on entity\n*/\nexport class ActionResponse {\n \n    // Error code (0 for success) \n    \n    public code: number;\n    \n \n    // Error message \n    \n    public error: string;\n    \n \n    // Entity key \n    \n    public key: string;\n    \n \n    // Additional data \n    \n    public data: string;\n    \n \n    constructor(code?: number, error?: string, key?: string, data?: string) { \n        this.code = code!;\n        this.error = error!;\n        this.key = key!;\n        this.data = data!;\n    }\n\n}\n\n\n/*\n *  Interface of ActionResponse\n*/\nexport interface IActionResponse {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Entity key \n    key?: string;\n \n    // Additional data \n    data?: string;\n \n}\n","\n/* \n*/\nexport class ActivityIdRequest {\n \n    // Activity Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of ActivityIdRequest\n*/\nexport interface IActivityIdRequest {\n \n    // Activity Id \n    id?: string;\n \n}\n","import { AccountSettings } from '../common/AccountSettings';\n\n/* \n*/\nexport class AdminAccountSettingsUpdateRequest {\n \n    // Account settings data \n    \n    public body: AccountSettings;\n    \n \n    constructor(body?: AccountSettings) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminAccountSettingsUpdateRequest\n*/\nexport interface IAdminAccountSettingsUpdateRequest {\n \n    // Account settings data \n    body?: AccountSettings;\n \n}\n","import { Activity } from '../entities/Activity';\n\n/* \n*/\nexport class AdminActivityBulkCreateRequest {\n \n    // Array of Resource data \n    \n    public body: Activity[];\n    \n \n    constructor(body?: Activity[]) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityBulkCreateRequest\n*/\nexport interface IAdminActivityBulkCreateRequest {\n \n    // Array of Resource data \n    body?: Activity[];\n \n}\n","\n/* \n*/\nexport class AdminActivityDefaultCreateRequest {\n \n    // Year (4 digits) \n    \n    public year: number;\n    \n \n    // Month (1-12) \n    \n    public month: number;\n    \n \n    // Day (1-31), 0 means create month activities \n    \n    public day: number;\n    \n \n    constructor(year?: number, month?: number, day?: number) { \n        this.year = year!;\n        this.month = month!;\n        this.day = day!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityDefaultCreateRequest\n*/\nexport interface IAdminActivityDefaultCreateRequest {\n \n    // Year (4 digits) \n    year?: number;\n \n    // Month (1-12) \n    month?: number;\n \n    // Day (1-31), 0 means create month activities \n    day?: number;\n \n}\n","\n/* \n*/\nexport class AdminActivityDefaultDeleteRequest {\n \n    // Year (4 digits) \n    \n    public year: number;\n    \n \n    // Month (1-12) \n    \n    public month: number;\n    \n \n    // Day (1-31), 0 means delete day activities \n    \n    public day: number;\n    \n \n    constructor(year?: number, month?: number, day?: number) { \n        this.year = year!;\n        this.month = month!;\n        this.day = day!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityDefaultDeleteRequest\n*/\nexport interface IAdminActivityDefaultDeleteRequest {\n \n    // Year (4 digits) \n    year?: number;\n \n    // Month (1-12) \n    month?: number;\n \n    // Day (1-31), 0 means delete day activities \n    day?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class AdminActivityFindFreeResourcesRequest {\n \n    // Activity Id \n    \n    public id: string;\n    \n \n    // Filter by resource type \n    \n    public resType: number;\n    \n \n    // Filter by weight \n    \n    public weight: number;\n    \n \n    // Filter by usage \n    \n    public forUseBy: AccountRoleCode;\n    \n \n    constructor(id?: string, resType?: number, weight?: number, forUseBy?: AccountRoleCode) { \n        this.id = id!;\n        this.resType = resType!;\n        this.weight = weight!;\n        this.forUseBy = forUseBy!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityFindFreeResourcesRequest\n*/\nexport interface IAdminActivityFindFreeResourcesRequest {\n \n    // Activity Id \n    id?: string;\n \n    // Filter by resource type \n    resType?: number;\n \n    // Filter by weight \n    weight?: number;\n \n    // Filter by usage \n    forUseBy?: AccountRoleCode;\n \n}\n","\n/* \n*/\nexport class AdminActivityFindRequest {\n \n    // From time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Year \n    \n    public year: number;\n    \n \n    // Month \n    \n    public month: number;\n    \n \n    // Day \n    \n    public day: number;\n    \n \n    // Include total bookings per activity? \n    \n    public total: boolean;\n    \n \n    constructor(from?: number, to?: number, year?: number, month?: number, day?: number, total?: boolean) { \n        this.from = from!;\n        this.to = to!;\n        this.year = year!;\n        this.month = month!;\n        this.day = day!;\n        this.total = total!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityFindRequest\n*/\nexport interface IAdminActivityFindRequest {\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Year \n    year?: number;\n \n    // Month \n    month?: number;\n \n    // Day \n    day?: number;\n \n    // Include total bookings per activity? \n    total?: boolean;\n \n}\n","import { ResourceTypeMask } from '../enums/ResourceTypeMask';\n\n/* \n*/\nexport class AdminActivityPlaningRequest {\n \n    // Activity Id \n    \n    public id: string;\n    \n \n    // Filter by resource type mask \n    \n    public resourceType: ResourceTypeMask;\n    \n \n    constructor(id?: string, resourceType?: ResourceTypeMask) { \n        this.id = id!;\n        this.resourceType = resourceType!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminActivityPlaningRequest\n*/\nexport interface IAdminActivityPlaningRequest {\n \n    // Activity Id \n    id?: string;\n \n    // Filter by resource type mask \n    resourceType?: ResourceTypeMask;\n \n}\n","\n/* \n*/\nexport class AdminBookingHistoryRequest {\n \n    // Membership Id \n    \n    public id: string;\n    \n \n    // Filter by resource Id \n    \n    public resourceId: string;\n    \n \n    // \n    \n    public from: number;\n    \n \n    // \n    \n    public to: number;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    constructor(id?: string, resourceId?: string, from?: number, to?: number, sort?: string) { \n        this.id = id!;\n        this.resourceId = resourceId!;\n        this.from = from!;\n        this.to = to!;\n        this.sort = sort!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminBookingHistoryRequest\n*/\nexport interface IAdminBookingHistoryRequest {\n \n    // Membership Id \n    id?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","\n/* \n*/\nexport class AdminBookingMonthHistoryRequest {\n \n    // Membership Id \n    \n    public id: string;\n    \n \n    // Filter by resource Id \n    \n    public resourceId: string;\n    \n \n    // Get related year \n    \n    public year: number;\n    \n \n    // Get related month \n    \n    public month: number;\n    \n \n    // Get related day \n    \n    public day: number;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    constructor(id?: string, resourceId?: string, year?: number, month?: number, day?: number, sort?: string) { \n        this.id = id!;\n        this.resourceId = resourceId!;\n        this.year = year!;\n        this.month = month!;\n        this.day = day!;\n        this.sort = sort!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminBookingMonthHistoryRequest\n*/\nexport interface IAdminBookingMonthHistoryRequest {\n \n    // Membership Id \n    id?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // Get related year \n    year?: number;\n \n    // Get related month \n    month?: number;\n \n    // Get related day \n    day?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","import { Activity } from '../entities/Activity';\n\n/* \n*/\nexport class AdminCreateActivityRequest {\n \n    // Activity data \n    \n    public body: Activity;\n    \n \n    constructor(body?: Activity) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminCreateActivityRequest\n*/\nexport interface IAdminCreateActivityRequest {\n \n    // Activity data \n    body?: Activity;\n \n}\n","import { Resource } from '../entities/Resource';\n\n/* \n*/\nexport class AdminCreateResourceRequest {\n \n    // Resource data \n    \n    public body: Resource;\n    \n \n    constructor(body?: Resource) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminCreateResourceRequest\n*/\nexport interface IAdminCreateResourceRequest {\n \n    // Resource data \n    body?: Resource;\n \n}\n","\n/* \n*/\nexport class AdminDailyPlaningExportRequest {\n \n    // Planing day \n    \n    public day: number;\n    \n \n    // Report language \n    \n    public lang: string;\n    \n \n    constructor(day?: number, lang?: string) { \n        this.day = day!;\n        this.lang = lang!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminDailyPlaningExportRequest\n*/\nexport interface IAdminDailyPlaningExportRequest {\n \n    // Planing day \n    day?: number;\n \n    // Report language \n    lang?: string;\n \n}\n","\n/* \n*/\nexport class AdminDailyPlaningRequest {\n \n    // Planing day \n    \n    public day: number;\n    \n \n    // Resource filter \n    \n    public resFilter: string;\n    \n \n    // User filter \n    \n    public userFilter: string;\n    \n \n    constructor(day?: number, resFilter?: string, userFilter?: string) { \n        this.day = day!;\n        this.resFilter = resFilter!;\n        this.userFilter = userFilter!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminDailyPlaningRequest\n*/\nexport interface IAdminDailyPlaningRequest {\n \n    // Planing day \n    day?: number;\n \n    // Resource filter \n    resFilter?: string;\n \n    // User filter \n    userFilter?: string;\n \n}\n","\n/* \n*/\nexport class AdminDailyRegistrationRequest {\n \n    // Activity day \n    \n    public day: number;\n    \n \n    // Filter results by user name \n    \n    public filter: string;\n    \n \n    // Filter results by missing only users \n    \n    public missingOnly: boolean;\n    \n \n    constructor(day?: number, filter?: string, missingOnly?: boolean) { \n        this.day = day!;\n        this.filter = filter!;\n        this.missingOnly = missingOnly!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminDailyRegistrationRequest\n*/\nexport interface IAdminDailyRegistrationRequest {\n \n    // Activity day \n    day?: number;\n \n    // Filter results by user name \n    filter?: string;\n \n    // Filter results by missing only users \n    missingOnly?: boolean;\n \n}\n","\n/* \n*/\nexport class AdminDailyResourcesRequest {\n \n    // Planing day \n    \n    public day: number;\n    \n \n    constructor(day?: number) { \n        this.day = day!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminDailyResourcesRequest\n*/\nexport interface IAdminDailyResourcesRequest {\n \n    // Planing day \n    day?: number;\n \n}\n","\n/* \n*/\nexport class AdminFindFreeResourcesRequest {\n \n    // Booking Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminFindFreeResourcesRequest\n*/\nexport interface IAdminFindFreeResourcesRequest {\n \n    // Booking Id \n    id?: string;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\n\n/* \n*/\nexport class AdminMembersExportCsvRequest {\n \n    // File format (csv/xlsx) \n    \n    public format: string;\n    \n \n    // Filter by partial user name or email \n    \n    public search: string;\n    \n \n    // Filter by account role(s) \n    \n    public role: AccountRoleCode[];\n    \n \n    // Filter by member status(es) \n    \n    public status: MemberStatusCode[];\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    constructor(format?: string, search?: string, role?: AccountRoleCode[], status?: MemberStatusCode[], sort?: string) { \n        this.format = format!;\n        this.search = search!;\n        this.role = role!;\n        this.status = status!;\n        this.sort = sort!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminMembersExportCsvRequest\n*/\nexport interface IAdminMembersExportCsvRequest {\n \n    // File format (csv/xlsx) \n    format?: string;\n \n    // Filter by partial user name or email \n    search?: string;\n \n    // Filter by account role(s) \n    role?: AccountRoleCode[];\n \n    // Filter by member status(es) \n    status?: MemberStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\n\n/* \n*/\nexport class AdminMembersFindRequest {\n \n    // Filter by account id \n    \n    public accountId: string;\n    \n \n    // Filter by partial user name or email \n    \n    public search: string;\n    \n \n    // Filter by account role(s) \n    \n    public role: AccountRoleCode[];\n    \n \n    // Filter by member status(es) \n    \n    public status: MemberStatusCode[];\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(accountId?: string, search?: string, role?: AccountRoleCode[], status?: MemberStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId!;\n        this.search = search!;\n        this.role = role!;\n        this.status = status!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminMembersFindRequest\n*/\nexport interface IAdminMembersFindRequest {\n \n    // Filter by account id \n    accountId?: string;\n \n    // Filter by partial user name or email \n    search?: string;\n \n    // Filter by account role(s) \n    role?: AccountRoleCode[];\n \n    // Filter by member status(es) \n    status?: MemberStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class AdminMembersImportCsvRequest {\n \n    // CSV content \n    \n    public csvFile: string;\n    \n \n    constructor(csvFile?: string) { \n        this.csvFile = csvFile!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminMembersImportCsvRequest\n*/\nexport interface IAdminMembersImportCsvRequest {\n \n    // CSV content \n    csvFile?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningAssignResourceRequest {\n \n    // Booking Id \n    \n    public id: string;\n    \n \n    // Resource Id \n    \n    public resourceId: string;\n    \n \n    constructor(id?: string, resourceId?: string) { \n        this.id = id!;\n        this.resourceId = resourceId!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningAssignResourceRequest\n*/\nexport interface IAdminPlaningAssignResourceRequest {\n \n    // Booking Id \n    id?: string;\n \n    // Resource Id \n    resourceId?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningDeleteActivityRequest {\n \n    // Planing day \n    \n    public day: number;\n    \n \n    // Activity Id to delete \n    \n    public id: string;\n    \n \n    constructor(day?: number, id?: string) { \n        this.day = day!;\n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningDeleteActivityRequest\n*/\nexport interface IAdminPlaningDeleteActivityRequest {\n \n    // Planing day \n    day?: number;\n \n    // Activity Id to delete \n    id?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningDeleteBookingRequest {\n \n    // Planing day \n    \n    public day: number;\n    \n \n    // Booking Id to delete \n    \n    public id: string;\n    \n \n    constructor(day?: number, id?: string) { \n        this.day = day!;\n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningDeleteBookingRequest\n*/\nexport interface IAdminPlaningDeleteBookingRequest {\n \n    // Planing day \n    day?: number;\n \n    // Booking Id to delete \n    id?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningFindBookingsRequest {\n \n    // From time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Year \n    \n    public year: number;\n    \n \n    // Month \n    \n    public month: number;\n    \n \n    // Day \n    \n    public day: number;\n    \n \n    constructor(from?: number, to?: number, year?: number, month?: number, day?: number) { \n        this.from = from!;\n        this.to = to!;\n        this.year = year!;\n        this.month = month!;\n        this.day = day!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningFindBookingsRequest\n*/\nexport interface IAdminPlaningFindBookingsRequest {\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Year \n    year?: number;\n \n    // Month \n    month?: number;\n \n    // Day \n    day?: number;\n \n}\n","\n/* \n*/\nexport class AdminPlaningMergeBookingsRequest {\n \n    // Planing day \n    \n    public day: number;\n    \n \n    // Source Booking Id \n    \n    public source: string;\n    \n \n    // Target Booking Id \n    \n    public target: string;\n    \n \n    constructor(day?: number, source?: string, target?: string) { \n        this.day = day!;\n        this.source = source!;\n        this.target = target!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningMergeBookingsRequest\n*/\nexport interface IAdminPlaningMergeBookingsRequest {\n \n    // Planing day \n    day?: number;\n \n    // Source Booking Id \n    source?: string;\n \n    // Target Booking Id \n    target?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningSplitBookingRequest {\n \n    // Planing day \n    \n    public day: number;\n    \n \n    // Booking Id to split \n    \n    public id: string;\n    \n \n    constructor(day?: number, id?: string) { \n        this.day = day!;\n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningSplitBookingRequest\n*/\nexport interface IAdminPlaningSplitBookingRequest {\n \n    // Planing day \n    day?: number;\n \n    // Booking Id to split \n    id?: string;\n \n}\n","\n/* \n*/\nexport class AdminPlaningUnAssignResourceRequest {\n \n    // Booking Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminPlaningUnAssignResourceRequest\n*/\nexport interface IAdminPlaningUnAssignResourceRequest {\n \n    // Booking Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class AdminReportAbsenceRequest {\n \n    // Booking Id \n    \n    public id: string;\n    \n \n    // List of absence user Ids \n    \n    public userId: string[];\n    \n \n    constructor(id?: string, userId?: string[]) { \n        this.id = id!;\n        this.userId = userId!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminReportAbsenceRequest\n*/\nexport interface IAdminReportAbsenceRequest {\n \n    // Booking Id \n    id?: string;\n \n    // List of absence user Ids \n    userId?: string[];\n \n}\n","\n/* \n*/\nexport class AdminReportIncidentRequest {\n \n    // Booking Id \n    \n    public id: string;\n    \n \n    // List of involved user Ids \n    \n    public userId: string[];\n    \n \n    // Incident description \n    \n    public body: string;\n    \n \n    constructor(id?: string, userId?: string[], body?: string) { \n        this.id = id!;\n        this.userId = userId!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminReportIncidentRequest\n*/\nexport interface IAdminReportIncidentRequest {\n \n    // Booking Id \n    id?: string;\n \n    // List of involved user Ids \n    userId?: string[];\n \n    // Incident description \n    body?: string;\n \n}\n","import { Resource } from '../entities/Resource';\n\n/* \n*/\nexport class AdminResourceBulkCreateRequest {\n \n    // Array of Resource data \n    \n    public body: Resource[];\n    \n \n    constructor(body?: Resource[]) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceBulkCreateRequest\n*/\nexport interface IAdminResourceBulkCreateRequest {\n \n    // Array of Resource data \n    body?: Resource[];\n \n}\n","import { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class AdminResourceExportCsvRequest {\n \n    // File format (csv/xlsx) \n    \n    public format: string;\n    \n \n    // Free text search on resource Id, Brand or description \n    \n    public search: string;\n    \n \n    // Filter by Resource class (UNDEFINED means no filter) \n    \n    public resourceClass: ResourceClassCode;\n    \n \n    // Filter by Resource type (UNDEFINED means no filter) \n    \n    public resourceType: ResourceTypeMask;\n    \n \n    // Filter by Resource status (UNDEFINED means no filter) \n    \n    public status: ResourceStatusCode;\n    \n \n    // Filter by usage (UNDEFINED means no filter) \n    \n    public forUseBy: AccountRoleCode;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    constructor(format?: string, search?: string, resourceClass?: ResourceClassCode, resourceType?: ResourceTypeMask, status?: ResourceStatusCode, forUseBy?: AccountRoleCode, sort?: string) { \n        this.format = format!;\n        this.search = search!;\n        this.resourceClass = resourceClass!;\n        this.resourceType = resourceType!;\n        this.status = status!;\n        this.forUseBy = forUseBy!;\n        this.sort = sort!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceExportCsvRequest\n*/\nexport interface IAdminResourceExportCsvRequest {\n \n    // File format (csv/xlsx) \n    format?: string;\n \n    // Free text search on resource Id, Brand or description \n    search?: string;\n \n    // Filter by Resource class (UNDEFINED means no filter) \n    resourceClass?: ResourceClassCode;\n \n    // Filter by Resource type (UNDEFINED means no filter) \n    resourceType?: ResourceTypeMask;\n \n    // Filter by Resource status (UNDEFINED means no filter) \n    status?: ResourceStatusCode;\n \n    // Filter by usage (UNDEFINED means no filter) \n    forUseBy?: AccountRoleCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","import { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class AdminResourceFindRequest {\n \n    // Free text search on resource Id, Brand or description \n    \n    public search: string;\n    \n \n    // Filter by Resource class (UNDEFINED means no filter) \n    \n    public resourceClass: ResourceClassCode;\n    \n \n    // Filter by Resource type (UNDEFINED means no filter) \n    \n    public resourceType: ResourceTypeMask;\n    \n \n    // Filter by Resource status (UNDEFINED means no filter) \n    \n    public status: ResourceStatusCode;\n    \n \n    // Filter by usage (UNDEFINED means no filter) \n    \n    public forUseBy: AccountRoleCode;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(search?: string, resourceClass?: ResourceClassCode, resourceType?: ResourceTypeMask, status?: ResourceStatusCode, forUseBy?: AccountRoleCode, sort?: string, page?: number, pageSize?: number) { \n        this.search = search!;\n        this.resourceClass = resourceClass!;\n        this.resourceType = resourceType!;\n        this.status = status!;\n        this.forUseBy = forUseBy!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceFindRequest\n*/\nexport interface IAdminResourceFindRequest {\n \n    // Free text search on resource Id, Brand or description \n    search?: string;\n \n    // Filter by Resource class (UNDEFINED means no filter) \n    resourceClass?: ResourceClassCode;\n \n    // Filter by Resource type (UNDEFINED means no filter) \n    resourceType?: ResourceTypeMask;\n \n    // Filter by Resource status (UNDEFINED means no filter) \n    status?: ResourceStatusCode;\n \n    // Filter by usage (UNDEFINED means no filter) \n    forUseBy?: AccountRoleCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class AdminResourceHistoryRequest {\n \n    // Resource Id \n    \n    public id: string;\n    \n \n    // \n    \n    public from: number;\n    \n \n    // \n    \n    public to: number;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    constructor(id?: string, from?: number, to?: number, sort?: string) { \n        this.id = id!;\n        this.from = from!;\n        this.to = to!;\n        this.sort = sort!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceHistoryRequest\n*/\nexport interface IAdminResourceHistoryRequest {\n \n    // Resource Id \n    id?: string;\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","\n/* \n*/\nexport class AdminResourceImportCsvRequest {\n \n    // CSV content \n    \n    public csvFile: string;\n    \n \n    constructor(csvFile?: string) { \n        this.csvFile = csvFile!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceImportCsvRequest\n*/\nexport interface IAdminResourceImportCsvRequest {\n \n    // CSV content \n    csvFile?: string;\n \n}\n","\n/* \n*/\nexport class AdminResourceMonthHistoryRequest {\n \n    // Resource Id \n    \n    public id: string;\n    \n \n    // Get related year \n    \n    public year: number;\n    \n \n    // Get related month \n    \n    public month: number;\n    \n \n    // Get related day \n    \n    public day: number;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    constructor(id?: string, year?: number, month?: number, day?: number, sort?: string) { \n        this.id = id!;\n        this.year = year!;\n        this.month = month!;\n        this.day = day!;\n        this.sort = sort!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminResourceMonthHistoryRequest\n*/\nexport interface IAdminResourceMonthHistoryRequest {\n \n    // Resource Id \n    id?: string;\n \n    // Get related year \n    year?: number;\n \n    // Get related month \n    month?: number;\n \n    // Get related day \n    day?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","import { Activity } from '../entities/Activity';\n\n/* \n*/\nexport class AdminUpdateActivityRequest {\n \n    // Activity data \n    \n    public body: Activity;\n    \n \n    constructor(body?: Activity) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminUpdateActivityRequest\n*/\nexport interface IAdminUpdateActivityRequest {\n \n    // Activity data \n    body?: Activity;\n \n}\n","import { Actual } from '../entities/Actual';\n\n/* \n*/\nexport class AdminUpdateRegistrationRequest {\n \n    // Actual data to update \n    \n    public body: Actual;\n    \n \n    constructor(body?: Actual) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminUpdateRegistrationRequest\n*/\nexport interface IAdminUpdateRegistrationRequest {\n \n    // Actual data to update \n    body?: Actual;\n \n}\n","import { Resource } from '../entities/Resource';\n\n/* \n*/\nexport class AdminUpdateResourceRequest {\n \n    // Resource data \n    \n    public body: Resource;\n    \n \n    constructor(body?: Resource) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of AdminUpdateResourceRequest\n*/\nexport interface IAdminUpdateResourceRequest {\n \n    // Resource data \n    body?: Resource;\n \n}\n","\n/* \n*/\nexport class BookingIdRequest {\n \n    // Booking Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of BookingIdRequest\n*/\nexport interface IBookingIdRequest {\n \n    // Booking Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class BookingRequestIdRequest {\n \n    // Booking request Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of BookingRequestIdRequest\n*/\nexport interface IBookingRequestIdRequest {\n \n    // Booking request Id \n    id?: string;\n \n}\n","\n/* \n *  Change Password request message\n*/\nexport class ChangePasswordRequest {\n \n    // User Email \n    \n    public userEmail: string;\n    \n \n    // Old Password \n    \n    public oldPassword: string;\n    \n \n    // New Password \n    \n    public newPassword: string;\n    \n \n    constructor(userEmail?: string, oldPassword?: string, newPassword?: string) { \n        this.userEmail = userEmail!;\n        this.oldPassword = oldPassword!;\n        this.newPassword = newPassword!;\n    }\n\n}\n\n\n/*\n *  Interface of ChangePasswordRequest\n*/\nexport interface IChangePasswordRequest {\n \n    // User Email \n    userEmail?: string;\n \n    // Old Password \n    oldPassword?: string;\n \n    // New Password \n    newPassword?: string;\n \n}\n","\n/* \n*/\nexport class DistributionRequest {\n \n    // \n    \n    public from: number;\n    \n \n    // \n    \n    public to: number;\n    \n \n    constructor(from?: number, to?: number) { \n        this.from = from!;\n        this.to = to!;\n    }\n\n}\n\n\n/*\n *  Interface of DistributionRequest\n*/\nexport interface IDistributionRequest {\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n}\n","\n/* \n*/\nexport class EmptyRequest {\n \n    constructor() { \n    }\n\n}\n\n\n/*\n *  Interface of EmptyRequest\n*/\nexport interface IEmptyRequest {\n \n}\n","\n/* \n*/\nexport class EmptyResponse {\n \n    constructor() { \n    }\n\n}\n\n\n/*\n *  Interface of EmptyResponse\n*/\nexport interface IEmptyResponse {\n \n}\n","\n/* \n *  Entities response message returned for read operation on multiple entities\n*/\nexport class EntitiesResponse {\n \n    // Error code (0 for success) \n    \n    public code: number;\n    \n \n    // Error message \n    \n    public error: string;\n    \n \n    constructor(code?: number, error?: string) { \n        this.code = code!;\n        this.error = error!;\n    }\n\n}\n\n\n/*\n *  Interface of EntitiesResponse\n*/\nexport interface IEntitiesResponse {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","\n/* \n *  Entity response message returned for read operation on a single entity\n*/\nexport class EntityResponse {\n \n    // Error code (0 for success) \n    \n    public code: number;\n    \n \n    // Error message \n    \n    public error: string;\n    \n \n    constructor(code?: number, error?: string) { \n        this.code = code!;\n        this.error = error!;\n    }\n\n}\n\n\n/*\n *  Interface of EntityResponse\n*/\nexport interface IEntityResponse {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Absence } from '../entities/Absence';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntitiesResponseOfAbsence extends EntityResponse {\n \n    // Absences entries \n    \n    public list: Absence[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfAbsence\n*/\nexport interface IEntitiesResponseOfAbsence extends IEntityResponse {\n \n    // Absences entries \n    list?: Absence[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Account } from '../entities/Account';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfAccount extends EntitiesResponse {\n \n    // Account list \n    \n    public list: Account[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfAccount\n*/\nexport interface IEntitiesResponseOfAccount extends IEntitiesResponse {\n \n    // Account list \n    list?: Account[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Activity } from '../entities/Activity';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfActivity extends EntitiesResponse {\n \n    // Activity list \n    \n    public list: Activity[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfActivity\n*/\nexport interface IEntitiesResponseOfActivity extends IEntitiesResponse {\n \n    // Activity list \n    list?: Activity[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { ActivityBookingGroup } from '../entities/ActivityBookingGroup';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n *  EntitiesResponse<ActivityBookingGroup>\n*/\nexport class EntitiesResponseOfActivityBookingGroup extends EntitiesResponse {\n \n    // Activity booking group list \n    \n    public list: ActivityBookingGroup[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfActivityBookingGroup\n*/\nexport interface IEntitiesResponseOfActivityBookingGroup extends IEntitiesResponse {\n \n    // Activity booking group list \n    list?: ActivityBookingGroup[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Actual } from '../entities/Actual';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n *  EntitiesResponse<Actual>\n*/\nexport class EntitiesResponseOfActual extends EntitiesResponse {\n \n    // Actual list \n    \n    public list: Actual[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfActual\n*/\nexport interface IEntitiesResponseOfActual extends IEntitiesResponse {\n \n    // Actual list \n    list?: Actual[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Booking } from '../entities/Booking';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfBooking extends EntitiesResponse {\n \n    // Booking list \n    \n    public list: Booking[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfBooking\n*/\nexport interface IEntitiesResponseOfBooking extends IEntitiesResponse {\n \n    // Booking list \n    list?: Booking[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { BookingGroup } from '../entities/BookingGroup';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfBookingGroup extends EntitiesResponse {\n \n    // Booking list \n    \n    public list: BookingGroup[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfBookingGroup\n*/\nexport interface IEntitiesResponseOfBookingGroup extends IEntitiesResponse {\n \n    // Booking list \n    list?: BookingGroup[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfBookingRequest extends EntitiesResponse {\n \n    // Booking request list \n    \n    public list: BookingRequest[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfBookingRequest\n*/\nexport interface IEntitiesResponseOfBookingRequest extends IEntitiesResponse {\n \n    // Booking request list \n    list?: BookingRequest[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { CountDataPoint } from '../common/CountDataPoint';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntitiesResponseOfCountDataPoint extends EntityResponse {\n \n    // Resource \n    \n    public list: CountDataPoint[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfCountDataPoint\n*/\nexport interface IEntitiesResponseOfCountDataPoint extends IEntityResponse {\n \n    // Resource \n    list?: CountDataPoint[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Incident } from '../entities/Incident';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntitiesResponseOfIncident extends EntityResponse {\n \n    // Incidents entries \n    \n    public list: Incident[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfIncident\n*/\nexport interface IEntitiesResponseOfIncident extends IEntityResponse {\n \n    // Incidents entries \n    list?: Incident[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { EntityResponse } from '../messages/EntityResponse';\nimport { MemberUsage } from '../common/MemberUsage';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntitiesResponseOfMemberUsage extends EntityResponse {\n \n    // Usage entries \n    \n    public list: MemberUsage[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfMemberUsage\n*/\nexport interface IEntitiesResponseOfMemberUsage extends IEntityResponse {\n \n    // Usage entries \n    list?: MemberUsage[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Membership } from '../entities/Membership';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfMembership extends EntitiesResponse {\n \n    // List of extended Membership data \n    \n    public list: Membership[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfMembership\n*/\nexport interface IEntitiesResponseOfMembership extends IEntitiesResponse {\n \n    // List of extended Membership data \n    list?: Membership[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Notification } from '../entities/Notification';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfNotification extends EntitiesResponse {\n \n    // List of Notifications \n    \n    public list: Notification[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfNotification\n*/\nexport interface IEntitiesResponseOfNotification extends IEntitiesResponse {\n \n    // List of Notifications \n    list?: Notification[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Placement } from '../entities/Placement';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfPlacement extends EntitiesResponse {\n \n    // Placement list \n    \n    public list: Placement[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfPlacement\n*/\nexport interface IEntitiesResponseOfPlacement extends IEntitiesResponse {\n \n    // Placement list \n    list?: Placement[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Resource } from '../entities/Resource';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfResource extends EntitiesResponse {\n \n    // Resource list \n    \n    public list: Resource[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfResource\n*/\nexport interface IEntitiesResponseOfResource extends IEntitiesResponse {\n \n    // Resource list \n    list?: Resource[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { StringIntValue } from '../common/StringIntValue';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n*/\nexport class EntitiesResponseOfStringIntValue extends EntitiesResponse {\n \n    // Resource list \n    \n    public list: StringIntValue[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfStringIntValue\n*/\nexport interface IEntitiesResponseOfStringIntValue extends IEntitiesResponse {\n \n    // Resource list \n    list?: StringIntValue[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { StringKeyValue } from '../common/StringKeyValue';\nimport { EntitiesResponse } from '../messages/EntitiesResponse';\nimport { IEntitiesResponse } from '../messages/EntitiesResponse';\n\n/* \n *  EntitiesResponse<StringKeyValue>\n*/\nexport class EntitiesResponseOfStringKeyValue extends EntitiesResponse {\n \n    // Resources id->name list \n    \n    public list: StringKeyValue[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfStringKeyValue\n*/\nexport interface IEntitiesResponseOfStringKeyValue extends IEntitiesResponse {\n \n    // Resources id->name list \n    list?: StringKeyValue[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Usage } from '../entities/Usage';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntitiesResponseOfUsage extends EntityResponse {\n \n    // Usage entries \n    \n    public list: Usage[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntitiesResponseOfUsage\n*/\nexport interface IEntitiesResponseOfUsage extends IEntityResponse {\n \n    // Usage entries \n    list?: Usage[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Account } from '../entities/Account';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfAccount extends EntityResponse {\n \n    // Account \n    \n    public entity: Account;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfAccount\n*/\nexport interface IEntityResponseOfAccount extends IEntityResponse {\n \n    // Account \n    entity?: Account;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { AccountSettings } from '../common/AccountSettings';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfAccountSettings extends EntityResponse {\n \n    // Account settings \n    \n    public entity: AccountSettings;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfAccountSettings\n*/\nexport interface IEntityResponseOfAccountSettings extends IEntityResponse {\n \n    // Account settings \n    entity?: AccountSettings;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Activity } from '../entities/Activity';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfActivity extends EntityResponse {\n \n    // Activity \n    \n    public entity: Activity;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfActivity\n*/\nexport interface IEntityResponseOfActivity extends IEntityResponse {\n \n    // Activity \n    entity?: Activity;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Booking } from '../entities/Booking';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfBooking extends EntityResponse {\n \n    // Booking \n    \n    public entity: Booking;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfBooking\n*/\nexport interface IEntityResponseOfBooking extends IEntityResponse {\n \n    // Booking \n    entity?: Booking;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfBookingRequest extends EntityResponse {\n \n    // Booking request \n    \n    public entity: BookingRequest;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfBookingRequest\n*/\nexport interface IEntityResponseOfBookingRequest extends IEntityResponse {\n \n    // Booking request \n    entity?: BookingRequest;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { LoginData } from '../common/LoginData';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfLoginData extends EntityResponse {\n \n    // Login data \n    \n    public entity: LoginData;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfLoginData\n*/\nexport interface IEntityResponseOfLoginData extends IEntityResponse {\n \n    // Login data \n    entity?: LoginData;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Notification } from '../entities/Notification';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfMember extends EntityResponse {\n \n    // Notification data \n    \n    public entity: Notification;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfMember\n*/\nexport interface IEntityResponseOfMember extends IEntityResponse {\n \n    // Notification data \n    entity?: Notification;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { MemberUser } from '../entities/MemberUser';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfMemberUser extends EntityResponse {\n \n    // Extended Member data (with user info) \n    \n    public entity: MemberUser;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfMemberUser\n*/\nexport interface IEntityResponseOfMemberUser extends IEntityResponse {\n \n    // Extended Member data (with user info) \n    entity?: MemberUser;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Placement } from '../entities/Placement';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfPlacement extends EntityResponse {\n \n    // Placement \n    \n    public entity: Placement;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfPlacement\n*/\nexport interface IEntityResponseOfPlacement extends IEntityResponse {\n \n    // Placement \n    entity?: Placement;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { Planing } from '../entities/Planing';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfPlaning extends EntityResponse {\n \n    // Planing \n    \n    public entity: Planing;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfPlaning\n*/\nexport interface IEntityResponseOfPlaning extends IEntityResponse {\n \n    // Planing \n    entity?: Planing;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { EntityResponse } from '../messages/EntityResponse';\nimport { Resource } from '../entities/Resource';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfResource extends EntityResponse {\n \n    // Resource \n    \n    public entity: Resource;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfResource\n*/\nexport interface IEntityResponseOfResource extends IEntityResponse {\n \n    // Resource \n    entity?: Resource;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { User } from '../entities/User';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfUser extends EntityResponse {\n \n    // User data \n    \n    public entity: User;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfUser\n*/\nexport interface IEntityResponseOfUser extends IEntityResponse {\n \n    // User data \n    entity?: User;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { UserAccountInfo } from '../common/UserAccountInfo';\nimport { EntityResponse } from '../messages/EntityResponse';\nimport { IEntityResponse } from '../messages/EntityResponse';\n\n/* \n*/\nexport class EntityResponseOfUserAccountInfo extends EntityResponse {\n \n    // User account info \n    \n    public entity: UserAccountInfo;\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n\n}\n\n\n/*\n *  Interface of EntityResponseOfUserAccountInfo\n*/\nexport interface IEntityResponseOfUserAccountInfo extends IEntityResponse {\n \n    // User account info \n    entity?: UserAccountInfo;\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class FindNotificationsRequest {\n \n    // Free text search on message \n    \n    public search: string;\n    \n \n    // Filter by notification type (UNDEFINED means no filter) \n    \n    public type: NotificationTypeCode;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(search?: string, type?: NotificationTypeCode, sort?: string, page?: number, pageSize?: number) { \n        this.search = search!;\n        this.type = type!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of FindNotificationsRequest\n*/\nexport interface IFindNotificationsRequest {\n \n    // Free text search on message \n    search?: string;\n \n    // Filter by notification type (UNDEFINED means no filter) \n    type?: NotificationTypeCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class MemberIdRequest {\n \n    // Member Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of MemberIdRequest\n*/\nexport interface IMemberIdRequest {\n \n    // Member Id \n    id?: string;\n \n}\n","import { MemberUser } from '../entities/MemberUser';\n\n/* \n*/\nexport class MembersBulkImportRequest {\n \n    // Array of MemberUser data to import \n    \n    public body: MemberUser[];\n    \n \n    constructor(body?: MemberUser[]) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of MembersBulkImportRequest\n*/\nexport interface IMembersBulkImportRequest {\n \n    // Array of MemberUser data to import \n    body?: MemberUser[];\n \n}\n","\n/* \n*/\nexport class MembersCountOvertimeRequest {\n \n    // \n    \n    public from: number;\n    \n \n    // \n    \n    public to: number;\n    \n \n    constructor(from?: number, to?: number) { \n        this.from = from!;\n        this.to = to!;\n    }\n\n}\n\n\n/*\n *  Interface of MembersCountOvertimeRequest\n*/\nexport interface IMembersCountOvertimeRequest {\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\n\n/* \n*/\nexport class MembersFindRequest {\n \n    // Filter by partial user name or email \n    \n    public search: string;\n    \n \n    // Filter by account role(s) \n    \n    public role: AccountRoleCode[];\n    \n \n    // Filter by member status(es) \n    \n    public status: MemberStatusCode[];\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(search?: string, role?: AccountRoleCode[], status?: MemberStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search!;\n        this.role = role!;\n        this.status = status!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of MembersFindRequest\n*/\nexport interface IMembersFindRequest {\n \n    // Filter by partial user name or email \n    search?: string;\n \n    // Filter by account role(s) \n    role?: AccountRoleCode[];\n \n    // Filter by member status(es) \n    status?: MemberStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","import { ResourceTypeMask } from '../enums/ResourceTypeMask';\n\n/* \n*/\nexport class MembersFindResourcesRequest {\n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    // Filter by partial user name or email \n    \n    public search: string;\n    \n \n    // Include only resources of type \n    \n    public include: ResourceTypeMask;\n    \n \n    // Exclude resources of type \n    \n    public exclude: ResourceTypeMask;\n    \n \n    constructor(accountId?: string, search?: string, include?: ResourceTypeMask, exclude?: ResourceTypeMask) { \n        this.accountId = accountId!;\n        this.search = search!;\n        this.include = include!;\n        this.exclude = exclude!;\n    }\n\n}\n\n\n/*\n *  Interface of MembersFindResourcesRequest\n*/\nexport interface IMembersFindResourcesRequest {\n \n    // Account Id \n    accountId?: string;\n \n    // Filter by partial user name or email \n    search?: string;\n \n    // Include only resources of type \n    include?: ResourceTypeMask;\n \n    // Exclude resources of type \n    exclude?: ResourceTypeMask;\n \n}\n","import { MemberRegistration } from '../common/MemberRegistration';\n\n/* \n*/\nexport class MembersServiceInviteRequest {\n \n    // \n    \n    public body: MemberRegistration;\n    \n \n    constructor(body?: MemberRegistration) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of MembersServiceInviteRequest\n*/\nexport interface IMembersServiceInviteRequest {\n \n    // \n    body?: MemberRegistration;\n \n}\n","import { Member } from '../entities/Member';\n\n/* \n*/\nexport class MembersServiceUpdateRequest {\n \n    // Member data to update \n    \n    public body: Member;\n    \n \n    constructor(body?: Member) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of MembersServiceUpdateRequest\n*/\nexport interface IMembersServiceUpdateRequest {\n \n    // Member data to update \n    body?: Member;\n \n}\n","import { MemberStatusCode } from '../enums/MemberStatusCode';\n\n/* \n*/\nexport class MembersServiceUpdateStatusRequest {\n \n    // Member Id \n    \n    public id: string;\n    \n \n    // Member status \n    \n    public status: MemberStatusCode;\n    \n \n    constructor(id?: string, status?: MemberStatusCode) { \n        this.id = id!;\n        this.status = status!;\n    }\n\n}\n\n\n/*\n *  Interface of MembersServiceUpdateStatusRequest\n*/\nexport interface IMembersServiceUpdateStatusRequest {\n \n    // Member Id \n    id?: string;\n \n    // Member status \n    status?: MemberStatusCode;\n \n}\n","\n/* \n*/\nexport class MembershipIdRequest {\n \n    // Membership Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of MembershipIdRequest\n*/\nexport interface IMembershipIdRequest {\n \n    // Membership Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class MembershipsRequest {\n \n    // User Id \n    \n    public userId: string;\n    \n \n    constructor(userId?: string) { \n        this.userId = userId!;\n    }\n\n}\n\n\n/*\n *  Interface of MembershipsRequest\n*/\nexport interface IMembershipsRequest {\n \n    // User Id \n    userId?: string;\n \n}\n","\n/* \n*/\nexport class MonthlyCountRequest {\n \n    // Year \n    \n    public year: number;\n    \n \n    // Month \n    \n    public month: number;\n    \n \n    constructor(year?: number, month?: number) { \n        this.year = year!;\n        this.month = month!;\n    }\n\n}\n\n\n/*\n *  Interface of MonthlyCountRequest\n*/\nexport interface IMonthlyCountRequest {\n \n    // Year \n    year?: number;\n \n    // Month \n    month?: number;\n \n}\n","\n/* \n*/\nexport class NotificationIdRequest {\n \n    // Notification Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of NotificationIdRequest\n*/\nexport interface INotificationIdRequest {\n \n    // Notification Id \n    id?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyActivityUsersRequest {\n \n    // Activity Id \n    \n    public activityId: string;\n    \n \n    // Notification Type \n    \n    public type: NotificationTypeCode;\n    \n \n    // From time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Notification Message \n    \n    public body: string;\n    \n \n    constructor(activityId?: string, type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.activityId = activityId!;\n        this.type = type!;\n        this.from = from!;\n        this.to = to!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyActivityUsersRequest\n*/\nexport interface INotifyActivityUsersRequest {\n \n    // Activity Id \n    activityId?: string;\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyAllMembersRequest {\n \n    // Notification Type \n    \n    public type: NotificationTypeCode;\n    \n \n    // From time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Notification Message \n    \n    public body: string;\n    \n \n    constructor(type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.type = type!;\n        this.from = from!;\n        this.to = to!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyAllMembersRequest\n*/\nexport interface INotifyAllMembersRequest {\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyBookingUsersRequest {\n \n    // Booking Id \n    \n    public bookingId: string;\n    \n \n    // Notification Type \n    \n    public type: NotificationTypeCode;\n    \n \n    // From time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Notification Message \n    \n    public body: string;\n    \n \n    constructor(bookingId?: string, type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.bookingId = bookingId!;\n        this.type = type!;\n        this.from = from!;\n        this.to = to!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyBookingUsersRequest\n*/\nexport interface INotifyBookingUsersRequest {\n \n    // Booking Id \n    bookingId?: string;\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyDailyUsersRequest {\n \n    // Day Id \n    \n    public dayId: number;\n    \n \n    // Notification Type \n    \n    public type: NotificationTypeCode;\n    \n \n    // From time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Notification Message \n    \n    public body: string;\n    \n \n    constructor(dayId?: number, type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.dayId = dayId!;\n        this.type = type!;\n        this.from = from!;\n        this.to = to!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyDailyUsersRequest\n*/\nexport interface INotifyDailyUsersRequest {\n \n    // Day Id \n    dayId?: number;\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","import { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n/* \n*/\nexport class NotifyUserRequest {\n \n    // List of user Ids \n    \n    public userId: string[];\n    \n \n    // Notification Type \n    \n    public type: NotificationTypeCode;\n    \n \n    // From time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Notification Message \n    \n    public body: string;\n    \n \n    constructor(userId?: string[], type?: NotificationTypeCode, from?: number, to?: number, body?: string) { \n        this.userId = userId!;\n        this.type = type!;\n        this.from = from!;\n        this.to = to!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of NotifyUserRequest\n*/\nexport interface INotifyUserRequest {\n \n    // List of user Ids \n    userId?: string[];\n \n    // Notification Type \n    type?: NotificationTypeCode;\n \n    // From time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Notification Message \n    body?: string;\n \n}\n","\n/* \n*/\nexport class PeriodCountRequest {\n \n    // \n    \n    public from: number;\n    \n \n    // \n    \n    public to: number;\n    \n \n    constructor(from?: number, to?: number) { \n        this.from = from!;\n        this.to = to!;\n    }\n\n}\n\n\n/*\n *  Interface of PeriodCountRequest\n*/\nexport interface IPeriodCountRequest {\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n}\n","\n/* \n*/\nexport class PlacementIdRequest {\n \n    // Placement Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of PlacementIdRequest\n*/\nexport interface IPlacementIdRequest {\n \n    // Placement Id \n    id?: string;\n \n}\n","\n/* \n *  Query response message returned for find operation (with pagination) on multiple entities\n*/\nexport class QueryResponse {\n \n    // Error code (0 for success) \n    \n    public code: number;\n    \n \n    // Error message \n    \n    public error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public pageSize: number;\n    \n \n    // Total number of pages \n    \n    public pages: number;\n    \n \n    // Total number of items in the query \n    \n    public total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public queryDef: string;\n    \n \n    // Entity type \n    \n    public docType: string;\n    \n \n    constructor(code?: number, error?: string, page?: number, pageSize?: number, pages?: number, total?: number, queryDef?: string, docType?: string) { \n        this.code = code!;\n        this.error = error!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n        this.pages = pages!;\n        this.total = total!;\n        this.queryDef = queryDef!;\n        this.docType = docType!;\n    }\n\n}\n\n\n/*\n *  Interface of QueryResponse\n*/\nexport interface IQueryResponse {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Account } from '../entities/Account';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfAccount extends QueryResponse {\n \n    // Account list \n    \n    public list: Account[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfAccount\n*/\nexport interface IQueryResponseOfAccount extends IQueryResponse {\n \n    // Account list \n    list?: Account[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Activity } from '../entities/Activity';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfActivity extends QueryResponse {\n \n    // Activity list \n    \n    public list: Activity[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfActivity\n*/\nexport interface IQueryResponseOfActivity extends IQueryResponse {\n \n    // Activity list \n    list?: Activity[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Booking } from '../entities/Booking';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfBooking extends QueryResponse {\n \n    // Booking list \n    \n    public list: Booking[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfBooking\n*/\nexport interface IQueryResponseOfBooking extends IQueryResponse {\n \n    // Booking list \n    list?: Booking[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfBookingRequest extends QueryResponse {\n \n    // Booking request list \n    \n    public list: BookingRequest[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfBookingRequest\n*/\nexport interface IQueryResponseOfBookingRequest extends IQueryResponse {\n \n    // Booking request list \n    list?: BookingRequest[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { MemberUser } from '../entities/MemberUser';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfMemberUser extends QueryResponse {\n \n    // Extended Member list (with user info) \n    \n    public list: MemberUser[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfMemberUser\n*/\nexport interface IQueryResponseOfMemberUser extends IQueryResponse {\n \n    // Extended Member list (with user info) \n    list?: MemberUser[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { QueryResponse } from '../messages/QueryResponse';\nimport { Membership } from '../entities/Membership';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfMembership extends QueryResponse {\n \n    // Membership list \n    \n    public list: Membership[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfMembership\n*/\nexport interface IQueryResponseOfMembership extends IQueryResponse {\n \n    // Membership list \n    list?: Membership[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { QueryResponse } from '../messages/QueryResponse';\nimport { Notification } from '../entities/Notification';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfNotification extends QueryResponse {\n \n    // Notifications list \n    \n    public list: Notification[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfNotification\n*/\nexport interface IQueryResponseOfNotification extends IQueryResponse {\n \n    // Notifications list \n    list?: Notification[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { Placement } from '../entities/Placement';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfPlacement extends QueryResponse {\n \n    // Placement list \n    \n    public list: Placement[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfPlacement\n*/\nexport interface IQueryResponseOfPlacement extends IQueryResponse {\n \n    // Placement list \n    list?: Placement[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { QueryResponse } from '../messages/QueryResponse';\nimport { Resource } from '../entities/Resource';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfResource extends QueryResponse {\n \n    // Resource list \n    \n    public list: Resource[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfResource\n*/\nexport interface IQueryResponseOfResource extends IQueryResponse {\n \n    // Resource list \n    list?: Resource[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","import { User } from '../entities/User';\nimport { QueryResponse } from '../messages/QueryResponse';\nimport { IQueryResponse } from '../messages/QueryResponse';\n\n/* \n*/\nexport class QueryResponseOfUser extends QueryResponse {\n \n    // User list \n    \n    public list: User[];\n    \n \n    // Error code (0 for success) \n    \n    public override code: number;\n    \n \n    // Error message \n    \n    public override error: string;\n    \n \n    // Current page (Bulk) number \n    \n    public override page: number;\n    \n \n    // Size of page (items in bulk) \n    \n    public override pageSize: number;\n    \n \n    // Total number of pages \n    \n    public override pages: number;\n    \n \n    // Total number of items in the query \n    \n    public override total: number;\n    \n \n    // Query definition spec as Json string \n    \n    public override queryDef: string;\n    \n \n    // Entity type \n    \n    public override docType: string;\n    \n \n\n}\n\n\n/*\n *  Interface of QueryResponseOfUser\n*/\nexport interface IQueryResponseOfUser extends IQueryResponse {\n \n    // User list \n    list?: User[];\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Current page (Bulk) number \n    page?: number;\n \n    // Size of page (items in bulk) \n    pageSize?: number;\n \n    // Total number of pages \n    pages?: number;\n \n    // Total number of items in the query \n    total?: number;\n \n    // Query definition spec as Json string \n    queryDef?: string;\n \n    // Entity type \n    docType?: string;\n \n}\n","\n/* \n*/\nexport class ResourceIdRequest {\n \n    // Resource Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of ResourceIdRequest\n*/\nexport interface IResourceIdRequest {\n \n    // Resource Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class ResourcesCountOvertimeRequest {\n \n    // \n    \n    public from: number;\n    \n \n    // \n    \n    public to: number;\n    \n \n    constructor(from?: number, to?: number) { \n        this.from = from!;\n        this.to = to!;\n    }\n\n}\n\n\n/*\n *  Interface of ResourcesCountOvertimeRequest\n*/\nexport interface IResourcesCountOvertimeRequest {\n \n    // \n    from?: number;\n \n    // \n    to?: number;\n \n}\n","\n/* \n *  Response of byte array\n*/\nexport class StreamResponse {\n \n    // \n    \n    public content: string;\n    \n \n    constructor(content?: string) { \n        this.content = content!;\n    }\n\n}\n\n\n/*\n *  Interface of StreamResponse\n*/\nexport interface IStreamResponse {\n \n    // \n    content?: string;\n \n}\n","import { Account } from '../entities/Account';\n\n/* \n*/\nexport class SysAdminAccountCreateRequest {\n \n    // Account data \n    \n    public body: Account;\n    \n \n    constructor(body?: Account) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of SysAdminAccountCreateRequest\n*/\nexport interface ISysAdminAccountCreateRequest {\n \n    // Account data \n    body?: Account;\n \n}\n","\n/* \n*/\nexport class SysAdminAccountResetRequest {\n \n    // Account Id \n    \n    public id: string;\n    \n \n    // Retention time in days \n    \n    public days: number;\n    \n \n    constructor(id?: string, days?: number) { \n        this.id = id!;\n        this.days = days!;\n    }\n\n}\n\n\n/*\n *  Interface of SysAdminAccountResetRequest\n*/\nexport interface ISysAdminAccountResetRequest {\n \n    // Account Id \n    id?: string;\n \n    // Retention time in days \n    days?: number;\n \n}\n","import { Account } from '../entities/Account';\n\n/* \n*/\nexport class SysAdminAccountUpdateRequest {\n \n    // Account data \n    \n    public body: Account;\n    \n \n    constructor(body?: Account) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of SysAdminAccountUpdateRequest\n*/\nexport interface ISysAdminAccountUpdateRequest {\n \n    // Account data \n    body?: Account;\n \n}\n","import { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n/* \n*/\nexport class SysAdminAccountsFindRequest {\n \n    // Filter by name or partial name \n    \n    public search: string;\n    \n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    \n    public type: AccountTypeCode[];\n    \n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    \n    public status: AccountStatusCode[];\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search!;\n        this.type = type!;\n        this.status = status!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of SysAdminAccountsFindRequest\n*/\nexport interface ISysAdminAccountsFindRequest {\n \n    // Filter by name or partial name \n    search?: string;\n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    type?: AccountTypeCode[];\n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    status?: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n *  Token request message\n*/\nexport class TokenRequest {\n \n    // Error code (0 for success) \n    \n    public code: number;\n    \n \n    // Error message \n    \n    public error: string;\n    \n \n    // Account Id \n    \n    public accountId: string;\n    \n \n    constructor(code?: number, error?: string, accountId?: string) { \n        this.code = code!;\n        this.error = error!;\n        this.accountId = accountId!;\n    }\n\n}\n\n\n/*\n *  Interface of TokenRequest\n*/\nexport interface ITokenRequest {\n \n    // Error code (0 for success) \n    code?: number;\n \n    // Error message \n    error?: string;\n \n    // Account Id \n    accountId?: string;\n \n}\n","import { AccountStatusCode } from '../enums/AccountStatusCode';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\n\n/* \n*/\nexport class UserAccountsFindRequest {\n \n    // Filter by name or partial name \n    \n    public search: string;\n    \n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    \n    public type: AccountTypeCode[];\n    \n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    \n    public status: AccountStatusCode[];\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(search?: string, type?: AccountTypeCode[], status?: AccountStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.search = search!;\n        this.type = type!;\n        this.status = status!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of UserAccountsFindRequest\n*/\nexport interface IUserAccountsFindRequest {\n \n    // Filter by name or partial name \n    search?: string;\n \n    // Filter by type(s) (empty or UNDEFINED means no filter) \n    type?: AccountTypeCode[];\n \n    // Filter by status(s) (empty or UNDEFINED means no filter) \n    status?: AccountStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class UserBookingFindRequest {\n \n    // Filter by user who placed the booking \n    \n    public userId: string;\n    \n \n    // Filter by resource Id \n    \n    public resourceId: string;\n    \n \n    // From booking time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To booking time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(userId?: string, resourceId?: string, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId!;\n        this.resourceId = resourceId!;\n        this.from = from!;\n        this.to = to!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of UserBookingFindRequest\n*/\nexport interface IUserBookingFindRequest {\n \n    // Filter by user who placed the booking \n    userId?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","import { TimeUnitCode } from '../enums/TimeUnitCode';\n\n/* \n*/\nexport class UserBookingGroupRequest {\n \n    // From booking time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To booking time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Group by time period \n    \n    public groupBy: TimeUnitCode;\n    \n \n    constructor(from?: number, to?: number, groupBy?: TimeUnitCode) { \n        this.from = from!;\n        this.to = to!;\n        this.groupBy = groupBy!;\n    }\n\n}\n\n\n/*\n *  Interface of UserBookingGroupRequest\n*/\nexport interface IUserBookingGroupRequest {\n \n    // From booking time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Group by time period \n    groupBy?: TimeUnitCode;\n \n}\n","\n/* \n*/\nexport class UserBookingHistoryRequest {\n \n    // Filter by resource Id \n    \n    public resourceId: string;\n    \n \n    // Get related year \n    \n    public year: number;\n    \n \n    // Get related month \n    \n    public month: number;\n    \n \n    // Get related day \n    \n    public day: number;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    constructor(resourceId?: string, year?: number, month?: number, day?: number, sort?: string) { \n        this.resourceId = resourceId!;\n        this.year = year!;\n        this.month = month!;\n        this.day = day!;\n        this.sort = sort!;\n    }\n\n}\n\n\n/*\n *  Interface of UserBookingHistoryRequest\n*/\nexport interface IUserBookingHistoryRequest {\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // Get related year \n    year?: number;\n \n    // Get related month \n    month?: number;\n \n    // Get related day \n    day?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n}\n","\n/* \n*/\nexport class UserBookingRequestFindRequest {\n \n    // Filter by user who placed the booking \n    \n    public userId: string;\n    \n \n    // Filter by resource Id \n    \n    public resourceId: string;\n    \n \n    // From booking time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To booking time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(userId?: string, resourceId?: string, from?: number, to?: number, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId!;\n        this.resourceId = resourceId!;\n        this.from = from!;\n        this.to = to!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of UserBookingRequestFindRequest\n*/\nexport interface IUserBookingRequestFindRequest {\n \n    // Filter by user who placed the booking \n    userId?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class UserByEmailRequest {\n \n    // User email \n    \n    public email: string;\n    \n \n    constructor(email?: string) { \n        this.email = email!;\n    }\n\n}\n\n\n/*\n *  Interface of UserByEmailRequest\n*/\nexport interface IUserByEmailRequest {\n \n    // User email \n    email?: string;\n \n}\n","import { Booking } from '../entities/Booking';\n\n/* \n*/\nexport class UserCreateBookingRequest {\n \n    // Booking data \n    \n    public body: Booking;\n    \n \n    constructor(body?: Booking) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserCreateBookingRequest\n*/\nexport interface IUserCreateBookingRequest {\n \n    // Booking data \n    body?: Booking;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\n\n/* \n*/\nexport class UserCreateBookingRequestRequest {\n \n    // Booking request data \n    \n    public body: BookingRequest;\n    \n \n    constructor(body?: BookingRequest) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserCreateBookingRequestRequest\n*/\nexport interface IUserCreateBookingRequestRequest {\n \n    // Booking request data \n    body?: BookingRequest;\n \n}\n","import { Placement } from '../entities/Placement';\n\n/* \n*/\nexport class UserCreatePlacementRequest {\n \n    // Placement data \n    \n    public body: Placement;\n    \n \n    constructor(body?: Placement) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserCreatePlacementRequest\n*/\nexport interface IUserCreatePlacementRequest {\n \n    // Placement data \n    body?: Placement;\n \n}\n","\n/* \n*/\nexport class UserIdRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of UserIdRequest\n*/\nexport interface IUserIdRequest {\n \n    // User Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class UserIdsRequest {\n \n    // User Id list \n    \n    public id: string[];\n    \n \n    constructor(id?: string[]) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of UserIdsRequest\n*/\nexport interface IUserIdsRequest {\n \n    // User Id list \n    id?: string[];\n \n}\n","import { BookingStatusCode } from '../enums/BookingStatusCode';\n\n/* \n*/\nexport class UserPlacementFindRequest {\n \n    // Filter by user who placed the booking \n    \n    public userId: string;\n    \n \n    // Filter by resource Id \n    \n    public resourceId: string;\n    \n \n    // From booking time [Epoch milliseconds Timestamp] \n    \n    public from: number;\n    \n \n    // To booking time [Epoch milliseconds Timestamp] \n    \n    public to: number;\n    \n \n    // Filter by referenced booking Id \n    \n    public bookingId: string;\n    \n \n    // Filter by booking status \n    \n    public status: BookingStatusCode;\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(userId?: string, resourceId?: string, from?: number, to?: number, bookingId?: string, status?: BookingStatusCode, sort?: string, page?: number, pageSize?: number) { \n        this.userId = userId!;\n        this.resourceId = resourceId!;\n        this.from = from!;\n        this.to = to!;\n        this.bookingId = bookingId!;\n        this.status = status!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of UserPlacementFindRequest\n*/\nexport interface IUserPlacementFindRequest {\n \n    // Filter by user who placed the booking \n    userId?: string;\n \n    // Filter by resource Id \n    resourceId?: string;\n \n    // From booking time [Epoch milliseconds Timestamp] \n    from?: number;\n \n    // To booking time [Epoch milliseconds Timestamp] \n    to?: number;\n \n    // Filter by referenced booking Id \n    bookingId?: string;\n \n    // Filter by booking status \n    status?: BookingStatusCode;\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","\n/* \n*/\nexport class UserServiceChangeMobileRequest {\n \n    // User mobile to update \n    \n    public body: string;\n    \n \n    constructor(body?: string) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceChangeMobileRequest\n*/\nexport interface IUserServiceChangeMobileRequest {\n \n    // User mobile to update \n    body?: string;\n \n}\n","\n/* \n*/\nexport class UserServiceChangeNameRequest {\n \n    // User name to update \n    \n    public body: string;\n    \n \n    constructor(body?: string) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceChangeNameRequest\n*/\nexport interface IUserServiceChangeNameRequest {\n \n    // User name to update \n    body?: string;\n \n}\n","import { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\n\n/* \n*/\nexport class UserServiceChangePasswordRequest {\n \n    // \n    \n    public body: ChangePasswordRequest;\n    \n \n    constructor(body?: ChangePasswordRequest) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceChangePasswordRequest\n*/\nexport interface IUserServiceChangePasswordRequest {\n \n    // \n    body?: ChangePasswordRequest;\n \n}\n","\n/* \n*/\nexport class UserServiceCheckPasswordRequest {\n \n    // \n    \n    public body: string;\n    \n \n    constructor(body?: string) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceCheckPasswordRequest\n*/\nexport interface IUserServiceCheckPasswordRequest {\n \n    // \n    body?: string;\n \n}\n","import { LoginParams } from '../common/LoginParams';\n\n/* \n*/\nexport class UserServiceLoginRequest {\n \n    // \n    \n    public body: LoginParams;\n    \n \n    constructor(body?: LoginParams) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceLoginRequest\n*/\nexport interface IUserServiceLoginRequest {\n \n    // \n    body?: LoginParams;\n \n}\n","\n/* \n*/\nexport class UserServiceReadNotificationRequest {\n \n    // Notification Id \n    \n    public id: string;\n    \n \n    constructor(id?: string) { \n        this.id = id!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceReadNotificationRequest\n*/\nexport interface IUserServiceReadNotificationRequest {\n \n    // Notification Id \n    id?: string;\n \n}\n","\n/* \n*/\nexport class UserServiceResetPasswordRequest {\n \n    // Verification code \n    \n    public code: string;\n    \n \n    constructor(code?: string) { \n        this.code = code!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceResetPasswordRequest\n*/\nexport interface IUserServiceResetPasswordRequest {\n \n    // Verification code \n    code?: string;\n \n}\n","\n/* \n*/\nexport class UserServiceSendVerificationRequest {\n \n    // Email to send code \n    \n    public body: string;\n    \n \n    constructor(body?: string) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceSendVerificationRequest\n*/\nexport interface IUserServiceSendVerificationRequest {\n \n    // Email to send code \n    body?: string;\n \n}\n","import { TokenRequest } from '../messages/TokenRequest';\n\n/* \n*/\nexport class UserServiceSwitchAccountRequest {\n \n    // Token request info \n    \n    public body: TokenRequest;\n    \n \n    constructor(body?: TokenRequest) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceSwitchAccountRequest\n*/\nexport interface IUserServiceSwitchAccountRequest {\n \n    // Token request info \n    body?: TokenRequest;\n \n}\n","import { User } from '../entities/User';\n\n/* \n*/\nexport class UserServiceUpdateRequest {\n \n    // User data to update \n    \n    public body: User;\n    \n \n    constructor(body?: User) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceUpdateRequest\n*/\nexport interface IUserServiceUpdateRequest {\n \n    // User data to update \n    body?: User;\n \n}\n","\n/* \n*/\nexport class UserServiceVerifyLoginRequest {\n \n    // \n    \n    public key: string;\n    \n \n    constructor(key?: string) { \n        this.key = key!;\n    }\n\n}\n\n\n/*\n *  Interface of UserServiceVerifyLoginRequest\n*/\nexport interface IUserServiceVerifyLoginRequest {\n \n    // \n    key?: string;\n \n}\n","\n/* \n*/\nexport class UserTokenRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // Expiration time [Epoch milliseconds Timestamp] \n    \n    public exp: number;\n    \n \n    constructor(id?: string, exp?: number) { \n        this.id = id!;\n        this.exp = exp!;\n    }\n\n}\n\n\n/*\n *  Interface of UserTokenRequest\n*/\nexport interface IUserTokenRequest {\n \n    // User Id \n    id?: string;\n \n    // Expiration time [Epoch milliseconds Timestamp] \n    exp?: number;\n \n}\n","import { Booking } from '../entities/Booking';\n\n/* \n*/\nexport class UserUpdateBookingRequest {\n \n    // Booking data \n    \n    public body: Booking;\n    \n \n    constructor(body?: Booking) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserUpdateBookingRequest\n*/\nexport interface IUserUpdateBookingRequest {\n \n    // Booking data \n    body?: Booking;\n \n}\n","import { BookingRequest } from '../entities/BookingRequest';\n\n/* \n*/\nexport class UserUpdateBookingRequestRequest {\n \n    // Booking request data \n    \n    public body: BookingRequest;\n    \n \n    constructor(body?: BookingRequest) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserUpdateBookingRequestRequest\n*/\nexport interface IUserUpdateBookingRequestRequest {\n \n    // Booking request data \n    body?: BookingRequest;\n \n}\n","import { Placement } from '../entities/Placement';\n\n/* \n*/\nexport class UserUpdatePlacementRequest {\n \n    // Placement data \n    \n    public body: Placement;\n    \n \n    constructor(body?: Placement) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UserUpdatePlacementRequest\n*/\nexport interface IUserUpdatePlacementRequest {\n \n    // Placement data \n    body?: Placement;\n \n}\n","\n/* \n*/\nexport class UsersServiceChangeDefaultAccountRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // Default account Id \n    \n    public accountId: string;\n    \n \n    constructor(id?: string, accountId?: string) { \n        this.id = id!;\n        this.accountId = accountId!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeDefaultAccountRequest\n*/\nexport interface IUsersServiceChangeDefaultAccountRequest {\n \n    // User Id \n    id?: string;\n \n    // Default account Id \n    accountId?: string;\n \n}\n","\n/* \n*/\nexport class UsersServiceChangeMobileRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // User mobile to update \n    \n    public body: string;\n    \n \n    constructor(id?: string, body?: string) { \n        this.id = id!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeMobileRequest\n*/\nexport interface IUsersServiceChangeMobileRequest {\n \n    // User Id \n    id?: string;\n \n    // User mobile to update \n    body?: string;\n \n}\n","\n/* \n*/\nexport class UsersServiceChangeNameRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // User name to update \n    \n    public body: string;\n    \n \n    constructor(id?: string, body?: string) { \n        this.id = id!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeNameRequest\n*/\nexport interface IUsersServiceChangeNameRequest {\n \n    // User Id \n    id?: string;\n \n    // User name to update \n    body?: string;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class UsersServiceChangeRoleRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // User role to update \n    \n    public role: AccountRoleCode;\n    \n \n    constructor(id?: string, role?: AccountRoleCode) { \n        this.id = id!;\n        this.role = role!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeRoleRequest\n*/\nexport interface IUsersServiceChangeRoleRequest {\n \n    // User Id \n    id?: string;\n \n    // User role to update \n    role?: AccountRoleCode;\n \n}\n","import { UserStatusCode } from '../enums/UserStatusCode';\n\n/* \n*/\nexport class UsersServiceChangeStatusRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // User status to update \n    \n    public status: UserStatusCode;\n    \n \n    constructor(id?: string, status?: UserStatusCode) { \n        this.id = id!;\n        this.status = status!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeStatusRequest\n*/\nexport interface IUsersServiceChangeStatusRequest {\n \n    // User Id \n    id?: string;\n \n    // User status to update \n    status?: UserStatusCode;\n \n}\n","import { UserTypeCode } from '../enums/UserTypeCode';\n\n/* \n*/\nexport class UsersServiceChangeTypeRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // User type to update \n    \n    public type: UserTypeCode;\n    \n \n    constructor(id?: string, type?: UserTypeCode) { \n        this.id = id!;\n        this.type = type!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceChangeTypeRequest\n*/\nexport interface IUsersServiceChangeTypeRequest {\n \n    // User Id \n    id?: string;\n \n    // User type to update \n    type?: UserTypeCode;\n \n}\n","import { UserRegistration } from '../common/UserRegistration';\n\n/* \n*/\nexport class UsersServiceCreateRequest {\n \n    // \n    \n    public body: UserRegistration;\n    \n \n    constructor(body?: UserRegistration) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceCreateRequest\n*/\nexport interface IUsersServiceCreateRequest {\n \n    // \n    body?: UserRegistration;\n \n}\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n/* \n*/\nexport class UsersServiceExportRequest {\n \n    // Filter by name or partial name or id \n    \n    public search: string;\n    \n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    \n    public type: UserTypeCode[];\n    \n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    \n    public status: UserStatusCode[];\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Export results to a different format. Supported formats: csv | json | xml \n    \n    public format: string;\n    \n \n    // List of fields to export (leave empty to export all fields) \n    \n    public fields: string[];\n    \n \n    constructor(search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, format?: string, fields?: string[]) { \n        this.search = search!;\n        this.type = type!;\n        this.status = status!;\n        this.sort = sort!;\n        this.format = format!;\n        this.fields = fields!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceExportRequest\n*/\nexport interface IUsersServiceExportRequest {\n \n    // Filter by name or partial name or id \n    search?: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    type?: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    status?: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Export results to a different format. Supported formats: csv | json | xml \n    format?: string;\n \n    // List of fields to export (leave empty to export all fields) \n    fields?: string[];\n \n}\n","import { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n/* \n*/\nexport class UsersServiceFindRequest {\n \n    // Filter by account id (get only Account Users with access to the accountId) \n    \n    public accountId: string;\n    \n \n    // Filter by name or partial name or id \n    \n    public search: string;\n    \n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    \n    public type: UserTypeCode[];\n    \n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    \n    public status: UserStatusCode[];\n    \n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    \n    public sort: string;\n    \n \n    // Page number (for pagination) \n    \n    public page: number;\n    \n \n    // Number of items per page (for pagination) \n    \n    public pageSize: number;\n    \n \n    constructor(accountId?: string, search?: string, type?: UserTypeCode[], status?: UserStatusCode[], sort?: string, page?: number, pageSize?: number) { \n        this.accountId = accountId!;\n        this.search = search!;\n        this.type = type!;\n        this.status = status!;\n        this.sort = sort!;\n        this.page = page!;\n        this.pageSize = pageSize!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceFindRequest\n*/\nexport interface IUsersServiceFindRequest {\n \n    // Filter by account id (get only Account Users with access to the accountId) \n    accountId?: string;\n \n    // Filter by name or partial name or id \n    search?: string;\n \n    // Filter by user type(s) (empty or UNDEFINED for no filter) \n    type?: UserTypeCode[];\n \n    // Filter by user status(es) (empty or UNDEFINED for no filter) \n    status?: UserStatusCode[];\n \n    // Sort by field and direction: (e.g. time+ = sort by time asc, id- = sort by id desc) \n    sort?: string;\n \n    // Page number (for pagination) \n    page?: number;\n \n    // Number of items per page (for pagination) \n    pageSize?: number;\n \n}\n","import { UserInvitation } from '../common/UserInvitation';\n\n/* \n*/\nexport class UsersServiceInviteRequest {\n \n    // \n    \n    public body: UserInvitation;\n    \n \n    constructor(body?: UserInvitation) { \n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceInviteRequest\n*/\nexport interface IUsersServiceInviteRequest {\n \n    // \n    body?: UserInvitation;\n \n}\n","import { AccountRoleCode } from '../enums/AccountRoleCode';\n\n/* \n*/\nexport class UsersServiceSetRolesRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // User roles to update \n    \n    public roles: AccountRoleCode[];\n    \n \n    constructor(id?: string, roles?: AccountRoleCode[]) { \n        this.id = id!;\n        this.roles = roles!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceSetRolesRequest\n*/\nexport interface IUsersServiceSetRolesRequest {\n \n    // User Id \n    id?: string;\n \n    // User roles to update \n    roles?: AccountRoleCode[];\n \n}\n","import { User } from '../entities/User';\n\n/* \n*/\nexport class UsersServiceUpdateRequest {\n \n    // User Id \n    \n    public id: string;\n    \n \n    // User data to update \n    \n    public body: User;\n    \n \n    constructor(id?: string, body?: User) { \n        this.id = id!;\n        this.body = body!;\n    }\n\n}\n\n\n/*\n *  Interface of UsersServiceUpdateRequest\n*/\nexport interface IUsersServiceUpdateRequest {\n \n    // User Id \n    id?: string;\n \n    // User data to update \n    body?: User;\n \n}\n","\n/* \n *  @WebSocketMessage Message header for all web socket messages\n*/\nexport class WebSocketMessageHeader {\n \n    // \n    \n    public op: number;\n    \n \n    // \n    \n    public ver: number;\n    \n \n    // \n    \n    public id: number;\n    \n \n    // \n    \n    public cid: number;\n    \n \n    // \n    \n    public sid: string;\n    \n \n    constructor(opcode?: number, version?: number, messageId?: number, correlationId?: number, sessionId?: string) { \n        this.op = opcode!;\n        this.ver = version!;\n        this.id = messageId!;\n        this.cid = correlationId!;\n        this.sid = sessionId!;\n    }\n\n}\n\n\n/*\n *  Interface of WebSocketMessageHeader\n*/\nexport interface IWebSocketMessageHeader {\n \n    // \n    op?: number;\n \n    // \n    ver?: number;\n \n    // \n    id?: number;\n \n    // \n    cid?: number;\n \n    // \n    sid?: string;\n \n}\n","// Access token key in the local storage\nconst tokenKey = 'portalAccessToken';\nconst loginKey = 'portalLoginData';\n\nexport function getToken() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport function setToken(token: any) {\n  localStorage.setItem(tokenKey, token);\n}\n\nexport function removeToken() {\n  localStorage.removeItem(tokenKey);\n  localStorage.removeItem(loginKey);\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest, HttpResponse } from '@angular/common/http';  // replaces previous Http service\nimport { map, catchError } from 'rxjs/operators';\nimport * as LocalStorageUtil from './localStorage-util';\n\n/**\n * Utility class for all REST services with common functions\n */\n@Injectable()\nexport class RestUtil {\n\n  // Set headers\n  private headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n  /**\n   * Constructor with injected authentication service\n   */\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Upload is HTTP POST action but the body is File object\n   */\n  upload(file: File, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    const formData: FormData = new FormData();\n    formData.append('fileKey', file, file.name);\n    const req = new HttpRequest('POST', resourceUrl, formData, {\n      reportProgress: false,\n      responseType: 'json',\n    });\n    return this.http.request(req);\n  }\n\n  /**\n   * Download is HTTP GET action but the content is blob\n   */\n  download(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let downloadLink = fileName\n\n    // extract file name\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'filename') {\n          downloadLink = arr[1];\n        }\n      }\n    });\n\n    // Set content type for: json / csv / xml / pdf\n    let contentType = 'application/json';\n    if (downloadLink.toLowerCase().endsWith('csv')) {\n      contentType = 'text/csv';\n    } else if (downloadLink.toLowerCase().endsWith('xml')) {\n      contentType = 'text/xml';\n    } else if (downloadLink.toLowerCase().endsWith('pdf')) {\n      contentType = 'application/pdf';\n    }\n\n    return this.http.get(resourceUrl, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events',\n      headers: new HttpHeaders({ 'Content-Type': contentType })\n    });\n  }\n\n  /**\n   * Download is HTTP GET action but the content is blob\n   */\n  download_old(fileName: string, url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n\n    let ext = 'json';\n    params.forEach(p => {\n      let arr = p.split('=');\n      if (arr.length > 1) {\n        if (arr[0].toLowerCase() === 'format') {\n          ext = arr[1];\n        }\n      }\n    });\n    \n    const downloadLink = fileName + '.' + ext;\n\n    return this.http.get(resourceUrl, {responseType: 'blob'}).subscribe((data) => {\n      const downloadURL = window.URL.createObjectURL(data);\n      const link = document.createElement('a');\n      link.href = downloadURL;\n      link.download = downloadLink;\n      link.click();\n    });\n\n  }\n  \n  /**\n   * HTTP GET action\n   */\n  get(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .get(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError),\n      );\n  }\n\n  /**\n   * HTTP POST action\n   */\n  post(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .post(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP PUT action\n   */\n  put(url: string, body: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .put(resourceUrl, body, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * HTTP DELETE action\n   */\n  delete(url: string, ...params: string[]) {\n    const resourceUrl = this.buildUrl(url, ...params);\n    return this.http\n      .delete(resourceUrl, { headers: this.headers, observe: 'response' })\n      .pipe(\n        map((res: HttpResponse<any>) => this.processResponse(res)),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Construct URL with parameters\n   */\n  private buildUrl(url: string, ...params: string[]) {\n    return (params === null) ? url : (params.length === 0) ? url : `${url}${params && params.length > 0 ? '?'+params.join('&') : ''}`;\n  }\n\n  /**\n   * Process the response, extract and refresh access token and return the body\n   */\n  private processResponse(response: HttpResponse<any>) {\n\n    if (response.status === 401) {\n      LocalStorageUtil.removeToken();\n      throw new Error('Access denied, reset token: ' + response.status);\n    } else if (response.status > 400) {\n      throw new Error('HTTP status error: ' + response.status);\n    }\n\n    // Get access token from header and update authentication service\n\n    const accessToken = response.headers.get('X-ACCESS-TOKEN');\n\n    if ((accessToken !== null) && (accessToken.length > 0)) {\n      LocalStorageUtil.setToken(accessToken);\n    } \n    \n    if (response.body && response.body.code && response.body.code !== 0) {\n      throw { code: response.body.code, message: response.body.error };\n    }\n    \n    return response.body;\n  }\n\n  /**\n   * Error handling\n   */\n  private handleError(error: any): Promise<any> {\n    if (error.code) {\n      return Promise.reject(error);\n    }\n    return Promise.reject(error.message || error);\n  }\n}\n","export class CoreConfig {\n    api: string;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountSettings } from '../common/AccountSettings';\n\n\n/**\n * List of account related actions for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminAccountService {\n\n  // URL to web api\n  private baseUrl = '/admin/account';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get account settings\n   * @Return: EntityResponse<AccountSettings>\n   */\n  getSettings() {\n    return this.rest.get(`${this.baseUrl}/settings`);\n  }\n\n  /**\n   * Update existing account settings in the system\n   * @Return: EntityResponse<AccountSettings>\n   */\n  updateSettings(body: AccountSettings) {\n    return this.rest.put(`${this.baseUrl}/settings`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Activity } from '../entities/Activity';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n\n/**\n * Services for managing club activities - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminActivitiesService {\n\n  // URL to web api\n  private baseUrl = '/admin/activities';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new activity\n   * @Return: EntityResponse<Activity>\n   */\n  create(body: Activity) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update activity\n   * @Return: EntityResponse<Activity>\n   */\n  update(body: Activity) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete activity\n   * @Return: ActionResponse\n   */\n  delete(id: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single activity by id\n   * @Return: EntityResponse<Activity>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get previous activity related to this activity id\n   * @Return: EntityResponse<Activity>\n   */\n  prev(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/prev`);\n  }\n\n  /**\n   * Get next activity related to this activity id\n   * @Return: EntityResponse<Activity>\n   */\n  next(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/next`);\n  }\n\n  /**\n   * Find activities by time range\n   * @Return: QueryResponse<Activity>\n   */\n  find(from: number, to: number, year: number, month: number, day: number, total: boolean) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (total != null) { params.push(`total=${total}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find list of free resources for activity by filter\n   * @Return: EntitiesResponse<Resource>\n   */\n  findFreeResources(id: string, resType: number, weight: number, forUseBy: AccountRoleCode) {\n    const params = new Array();\t\t\n    if (resType != null) { params.push(`resType=${resType}`); }\n    if (weight != null) { params.push(`weight=${weight}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/resources`, ...params);\n  }\n\n  /**\n   * Create bulk set of activities\n   * @Return: ActionResponse\n   */\n  createBulk(body: Activity[]) {\n    return this.rest.post(`${this.baseUrl}/bulk`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Create account default set of activities per month\n   * @Return: ActionResponse\n   */\n  createDefault(year: number, month: number, day: number) {\n    const params = new Array();\t\t\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/default`, '', ...params);\n  }\n\n  /**\n   * Clear all month activities\n   * @Return: ActionResponse\n   */\n  clearDefault(year: number, month: number, day: number) {\n    const params = new Array();\t\t\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n\n\t\treturn this.rest.delete(`${this.baseUrl}/default`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { MemberRegistration } from '../common/MemberRegistration';\nimport { Member } from '../entities/Member';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberUser } from '../entities/MemberUser';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\n\n\n/**\n * List of all user related actions for account administrator only \n */\n@Injectable()\nexport class AdminMembersService {\n\n  // URL to web api\n  private baseUrl = '/admin/members';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Send invitation to a new member for the current account\n   * @Return: ActionResponse\n   */\n  invite(body: MemberRegistration) {\n    return this.rest.post(`${this.baseUrl}/invite`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Resend invitation to an existing member for the current account\n   * @Return: ActionResponse\n   */\n  reInvite(id: string) {\n    return this.rest.post(`${this.baseUrl}/re-invite/${id}`, '');\n  }\n\n  /**\n   * Update member\n   * @Return: EntityResponse<Member>\n   */\n  update(body: Member) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update member\n   * @Return: EntityResponse<Member>\n   */\n  changeStatus(id: string, status: MemberStatusCode) {\n    const params = new Array();\t\t\n    if (status != null) { params.push(`status=${status}`); }\n\n\t\treturn this.rest.put(`${this.baseUrl}/${id}/status/{status}`, '', ...params);\n  }\n\n  /**\n   * Delete member from the account\n   * The member will be removed from the account, if no other memberships exist for the user, it will be deleted from the system\n   * @Return: ActionResponse\n   */\n  delete(id: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Reset password for member\n   * The result is a temporary password\n   * @Return: ActionResponse\n   */\n  resetPassword(id: string) {\n    return this.rest.post(`${this.baseUrl}/${id}/reset-password`, '');\n  }\n\n  /**\n   * Get single member by id (including user data)\n   * @Return: EntityResponse<MemberUser>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single member by id (including user data)\n   * @Return: EntityResponse<User>\n   */\n  getUserByEmail(email: string) {\n    return this.rest.get(`${this.baseUrl}/email/${email}`);\n  }\n\n  /**\n   * Get user memberships (in all accounts)\n   * @Return: QueryResponse<Membership>\n   */\n  getUserMemberships(userId: string) {\n    return this.rest.get(`${this.baseUrl}/memberships/${userId}`);\n  }\n\n  /**\n   * Find list of users and filter the list\n   * System user will see all users, Account system will see all users of the account, registered user will get an error.\n   * @Return: QueryResponse<MemberUser>\n   */\n  find(accountId: string, search: string, role: AccountRoleCode[], status: MemberStatusCode[], sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (role != null) { params.push(`role=${role}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Import bulk set of members\n   * @Return: ActionResponse\n   */\n  bulkImport(body: MemberUser[]) {\n    return this.rest.post(`${this.baseUrl}/bulk-import`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Find list of all bookings that the user is registered to per month\n   * @Return: QueryResponse<Booking>\n   */\n  findMemberMonthHistory(id: string, resourceId: string, year: number, month: number, day: number, sort: string) {\n    const params = new Array();\t\t\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/month-history`, ...params);\n  }\n\n  /**\n   * Find list of all bookings that the user is registered to in a time period\n   * @Return: QueryResponse<Booking>\n   */\n  findMemberHistory(id: string, resourceId: string, from: number, to: number, sort: string) {\n    const params = new Array();\t\t\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/history`, ...params);\n  }\n\n  /**\n   * Import members from a file\n   * @return ActionResponse\n   */\n  importFile() {\n    return this.rest.post(`${this.baseUrl}/import`, '');\n  }\n\n  /**\n   * Export members to a file\n   * @return StreamContent\n   */\n  exportFile(format: string, search: string, role: AccountRoleCode[], status: MemberStatusCode[], sort: string) {\n    const params = new Array();\t\t\n    if (format != null) { params.push(`format=${format}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (role != null) { params.push(`role=${role}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.download(`admin-members`,`${this.baseUrl}/export`, ...params);\n  }\n\n  /**\n   * Find list of resources by filter\n   * @Return: EntitiesResponse<Resource>\n   */\n  findResources(accountId: string, search: string, include: ResourceTypeMask, exclude: ResourceTypeMask) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (include != null) { params.push(`include=${include}`); }\n    if (exclude != null) { params.push(`exclude=${exclude}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/resources`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n\n/**\n * List of all notifications actions for account administrator only \n */\n@Injectable()\nexport class AdminNotificationsService {\n\n  // URL to web api\n  private baseUrl = '/admin/notifications';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Send Create new notification for user\n   * @Return: ActionResponse\n   */\n  notifyUser(userId: string[], type: NotificationTypeCode, from: number, to: number, body: string) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Create notifications for all users in booking\n   * @Return: ActionResponse\n   */\n  notifyBookingUsers(bookingId: string, type: NotificationTypeCode, from: number, to: number, body: string) {\n    const params = new Array();\t\t\n    if (bookingId != null) { params.push(`bookingId=${bookingId}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/booking`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Create notifications for all users in activity bookings\n   * @Return: ActionResponse\n   */\n  notifyActivityUsers(activityId: string, type: NotificationTypeCode, from: number, to: number, body: string) {\n    const params = new Array();\t\t\n    if (activityId != null) { params.push(`activityId=${activityId}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/activity`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Create notifications for all users in activity bookings\n   * @Return: ActionResponse\n   */\n  notifyDailyUsers(dayId: number, type: NotificationTypeCode, from: number, to: number, body: string) {\n    const params = new Array();\t\t\n    if (dayId != null) { params.push(`dayId=${dayId}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/daily`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n  /**\n   * Create notification for all club members\n   * @Return: ActionResponse\n   */\n  notifyAllMembers(type: NotificationTypeCode, from: number, to: number, body: string) {\n    const params = new Array();\t\t\n    if (type != null) { params.push(`type=${type}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/members`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Actual } from '../entities/Actual';\n\n\n/**\n * Services for planing club resource placements - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminPlaningService {\n\n  // URL to web api\n  private baseUrl = '/admin/planing';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get daily planing - bookings group by activities\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  getDailyPlaning(day: number, resFilter: string, userFilter: string) {\n    const params = new Array();\t\t\n    if (resFilter != null) { params.push(`resFilter=${resFilter}`); }\n    if (userFilter != null) { params.push(`userFilter=${userFilter}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/daily/${day}`, ...params);\n  }\n\n  /**\n   * Get list of resources in a specific day\n   * @Return: EntitiesResponse<StringKeyValue>\n   */\n  getDailyResources(day: number) {\n    return this.rest.get(`${this.baseUrl}/daily-resources/${day}`);\n  }\n\n  /**\n   * Export daily planing - as PDF stream\n   * @Return: StreamContent\n   */\n  exportDailyPlaning(day: number, lang: string) {\n    const params = new Array();\t\t\n    if (lang != null) { params.push(`lang=${lang}`); }\n\n\t\treturn this.rest.download(`admin-planing`,`${this.baseUrl}/daily/${day}/export`, ...params);\n  }\n\n  /**\n   * Auto planing - assign resources and auto approve booking\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  autoDailyPlaning(day: number) {\n    return this.rest.post(`${this.baseUrl}/daily/${day}/auto`, '');\n  }\n\n  /**\n   * Reset auto planing - un-assign resources and clear auto approve booking\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  resetAutoDailyPlaning(day: number) {\n    return this.rest.delete(`${this.baseUrl}/daily/${day}/auto`);\n  }\n\n  /**\n   * Find list of free resources for the booking request\n   * @Return: EntitiesResponse<Resource>\n   */\n  findFreeResources(id: string) {\n    return this.rest.get(`${this.baseUrl}/bookings/${id}/resources`);\n  }\n\n  /**\n   * Assign resource for booking request and approve\n   * @Return: ActionResponse\n   */\n  assignResource(id: string, resourceId: string) {\n    return this.rest.post(`${this.baseUrl}/bookings/${id}/assign/${resourceId}`, '');\n  }\n\n  /**\n   * Un assign resource from booking request\n   * @Return: ActionResponse\n   */\n  unAssignResource(id: string) {\n    return this.rest.post(`${this.baseUrl}/bookings/${id}/un-assign`, '');\n  }\n\n  /**\n   * Find all bookings by filter\n   * @Return: EntitiesResponse<Booking>\n   */\n  findBookings(from: number, to: number, year: number, month: number, day: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/bookings`, ...params);\n  }\n\n  /**\n   * Merge source and target bookings and recalculate the daily planing\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  mergeBookings(day: number, source: string, target: string) {\n    return this.rest.post(`${this.baseUrl}/daily/${day}/bookings/${source}/merge/${target}`, '');\n  }\n\n  /**\n   * Split booking and recalculate the daily planing\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  splitBookings(day: number, id: string) {\n    return this.rest.post(`${this.baseUrl}/daily/${day}/bookings/${id}/split`, '');\n  }\n\n  /**\n   * Delete booking and recalculate the daily planing\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  deleteBooking(day: number, id: string) {\n    return this.rest.delete(`${this.baseUrl}/daily/${day}/bookings/${id}`);\n  }\n\n  /**\n   * Delete activity and recalculate the daily planing\n   * @Return: EntitiesResponse<ActivityBookingGroup>\n   */\n  deleteActivity(day: number, id: string) {\n    return this.rest.delete(`${this.baseUrl}/daily/${day}/activities/${id}`);\n  }\n\n  /**\n   * Get daily registration list - who is present\n   * @Return: EntitiesResponse<Actual>\n   */\n  getDailyRegistration(day: number, filter: string, missingOnly: boolean) {\n    const params = new Array();\t\t\n    if (filter != null) { params.push(`filter=${filter}`); }\n    if (missingOnly != null) { params.push(`missingOnly=${missingOnly}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/bookings/registration/${day}`, ...params);\n  }\n\n  /**\n   * Update user registration\n   * @Return: ActionResponse\n   */\n  updateRegistration(body: Actual) {\n    return this.rest.post(`${this.baseUrl}/bookings/registration`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Report user absence from approved booking\n   * @Return: ActionResponse\n   */\n  reportAbsence(id: string, userId: string[]) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/bookings/${id}/absence`, '', ...params);\n  }\n\n  /**\n   * Report incident from registration\n   * @Return: ActionResponse\n   */\n  reportIncident(id: string, userId: string[], body: string) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n\n\t\treturn this.rest.post(`${this.baseUrl}/bookings/${id}/incident`, typeof body === 'object' ? JSON.stringify(body) : body, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * Services for analytics reports - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminReportsService {\n\n  // URL to web api\n  private baseUrl = '/admin/reports';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get count of members over month\n   * @Return: EntitiesResponse<Usage>\n   */\n  getMonthlyCount(year: number, month: number) {\n    const params = new Array();\t\t\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/monthly-count`, ...params);\n  }\n\n  /**\n   * Get count of members over time period\n   * @Return: EntitiesResponse<Usage>\n   */\n  getPeriodCount(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/period-count`, ...params);\n  }\n\n  /**\n   * Get distribution by week days over time\n   * @Return: EntitiesResponse<StringIntValue>\n   */\n  getDayOfWeekDistribution(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/count-by-dow`, ...params);\n  }\n\n  /**\n   * Get distribution by resource type over time\n   * @Return: EntitiesResponse<StringIntValue>\n   */\n  getResourceTypeDistribution(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/count-by-type`, ...params);\n  }\n\n  /**\n   * Get count of activities per member over time period\n   * @Return: EntitiesResponse<MemberUsage>\n   */\n  getPeriodCountByMember(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/period-count-by-member`, ...params);\n  }\n\n  /**\n   * Export count of activities per member over time period to CSV\n   * @Return: StreamContent\n   */\n  exportPeriodCountByMember(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.download(`admin-reports`,`${this.baseUrl}/period-count-by-member/export`, ...params);\n  }\n\n  /**\n   * Get count of activities per resource over time period\n   * @Return: EntitiesResponse<MemberUsage>\n   */\n  getPeriodCountByResource(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/period-count-by-resource`, ...params);\n  }\n\n  /**\n   * Export count of activities per resource over time period to CSV\n   * @Return: StreamContent\n   */\n  exportPeriodCountByResource(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.download(`admin-reports`,`${this.baseUrl}/period-count-by-resource/export`, ...params);\n  }\n\n  /**\n   * Get members absence report over time period\n   * @Return: EntitiesResponse<Absence>\n   */\n  getPeriodAbsences(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/period-absences`, ...params);\n  }\n\n  /**\n   * Export members absence report over time period\n   * @Return: StreamContent\n   */\n  exportPeriodAbsences(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.download(`admin-reports`,`${this.baseUrl}/period-absences/export`, ...params);\n  }\n\n  /**\n   * Get members incidents report over time period\n   * @Return: EntitiesResponse<Incident>\n   */\n  getPeriodIncidents(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/period-incidents`, ...params);\n  }\n\n  /**\n   * Export members incidents report over time period\n   * @Return: StreamContent\n   */\n  exportPeriodIncidents(from: number, to: number) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n\n\t\treturn this.rest.download(`admin-reports`,`${this.baseUrl}/period-incidents/export`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { Resource } from '../entities/Resource';\nimport { ResourceClassCode } from '../enums/ResourceClassCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { ResourceStatusCode } from '../enums/ResourceStatusCode';\n\n\n/**\n * Services for managing club resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class AdminResourcesService {\n\n  // URL to web api\n  private baseUrl = '/admin/resources';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new resource\n   * @Return: EntityResponse<Resource>\n   */\n  create(body: Resource) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update resource\n   * @Return: EntityResponse<Resource>\n   */\n  update(body: Resource) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete resource\n   * @Return: ActionResponse\n   */\n  delete(id: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single resource by id\n   * @Return: EntityResponse<Resource>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find resources by filters\n   * @Return: QueryResponse<Resource>\n   */\n  find(search: string, resourceClass: ResourceClassCode, resourceType: ResourceTypeMask, status: ResourceStatusCode, forUseBy: AccountRoleCode, sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (resourceClass != null) { params.push(`resourceClass=${resourceClass}`); }\n    if (resourceType != null) { params.push(`resourceType=${resourceType}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Import bulk set of resources\n   * @Return: ActionResponse\n   */\n  bulkImport(body: Resource[]) {\n    return this.rest.post(`${this.baseUrl}/bulk-import`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Find list of all bookings for a resource by filter per month\n   * @Return: QueryResponse<Booking>\n   */\n  findResourceMonthHistory(id: string, year: number, month: number, day: number, sort: string) {\n    const params = new Array();\t\t\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/month-history`, ...params);\n  }\n\n  /**\n   * Find list of all bookings for a resource by filter per time period\n   * @Return: QueryResponse<Booking>\n   */\n  findResourceHistory(id: string, from: number, to: number, sort: string) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/history`, ...params);\n  }\n\n  /**\n   * Import resources from a file\n   * The file must include header with the columns: Name, Type, Min, Max, Brand, Description\n   * @return ActionResponse\n   */\n  importFile() {\n    return this.rest.post(`${this.baseUrl}/import`, '');\n  }\n\n  /**\n   * Export resources to a file\n   * @return StreamContent\n   */\n  exportFile(format: string, search: string, resourceClass: ResourceClassCode, resourceType: ResourceTypeMask, status: ResourceStatusCode, forUseBy: AccountRoleCode, sort: string) {\n    const params = new Array();\t\t\n    if (format != null) { params.push(`format=${format}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (resourceClass != null) { params.push(`resourceClass=${resourceClass}`); }\n    if (resourceType != null) { params.push(`resourceType=${resourceType}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.download(`admin-resources`,`${this.baseUrl}/export`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\n\n\n/**\n * Health check service, no X-API-KEY or X-ACCESS-TOKEN are required \n */\n@Injectable()\nexport class HealthCheckService {\n\n  // URL to web api\n  private baseUrl = '/health';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Health check to test service availability\n   * @Return: ActionResponse - with version info\n   */\n  health() {\n    return this.rest.get(`${this.baseUrl}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\n\n\n/**\n * Services for managing club activities - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UsrActivitiesService {\n\n  // URL to web api\n  private baseUrl = '/user/activities';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single activity by id\n   * @Return: EntityResponse<Activity>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find activities by time range\n   * @Return: QueryResponse<Activity>\n   */\n  find(from: number, to: number, year: number, month: number, day: number, total: boolean) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (total != null) { params.push(`total=${total}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find list of free resources for activity by filter\n   * @Return: EntitiesResponse<Resource>\n   */\n  findFreeResources(id: string, resType: number, weight: number, forUseBy: AccountRoleCode) {\n    const params = new Array();\t\t\n    if (resType != null) { params.push(`resType=${resType}`); }\n    if (weight != null) { params.push(`weight=${weight}`); }\n    if (forUseBy != null) { params.push(`forUseBy=${forUseBy}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/${id}/resources`, ...params);\n  }\n\n  /**\n   * Find list of all resources for activity and mark the assigned activities\n   * @Return: EntitiesResponse<Resource>\n   */\n  findAllResources(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/all-resources`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Booking } from '../entities/Booking';\nimport { TimeUnitCode } from '../enums/TimeUnitCode';\n\n\n/**\n * Services for managing kayak resources - for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UserBookingsService {\n\n  // URL to web api\n  private baseUrl = '/user/bookings';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new booking\n   * @Return: EntityResponse<Booking>\n   */\n  create(body: Booking) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update booking\n   * @Return: EntityResponse<Booking>\n   */\n  update(body: Booking) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update actual activity log (duration and distance)\n   * @Return: EntityResponse<Booking>\n   */\n  updateLog(body: Booking) {\n    return this.rest.put(`${this.baseUrl}/log`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete booking\n   * @Return: ActionResponse\n   */\n  delete(id: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Remove current user from booking\n   * @Return: ActionResponse\n   */\n  removeMe(id: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}/remove-me`);\n  }\n\n  /**\n   * Get single booking by id\n   * @Return: EntityResponse<Booking>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get extended booking info by id including names\n   * @Return: EntityResponse<Booking>\n   */\n  getExt(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}/ext`);\n  }\n\n  /**\n   * Find bookings by filters\n   * @Return: QueryResponse<Booking>\n   */\n  find(userId: string, resourceId: string, from: number, to: number, sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find bookings daily / monthly / yearly history by filters\n   * @Return: QueryResponse<Booking>\n   */\n  history(resourceId: string, year: number, month: number, day: number, sort: string) {\n    const params = new Array();\t\t\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (year != null) { params.push(`year=${year}`); }\n    if (month != null) { params.push(`month=${month}`); }\n    if (day != null) { params.push(`day=${day}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/history`, ...params);\n  }\n\n  /**\n   * Group my bookings by time period\n   * @Return: EntitiesResponse<BookingGroup>\n   */\n  groups(from: number, to: number, groupBy: TimeUnitCode) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (groupBy != null) { params.push(`groupBy=${groupBy}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/groups`, ...params);\n  }\n\n  /**\n   * Find list of activities groups by time period\n   * @Return: EntitiesResponse<BookingGroup>\n   */\n  activities(from: number, to: number, groupBy: TimeUnitCode) {\n    const params = new Array();\t\t\n    if (from != null) { params.push(`from=${from}`); }\n    if (to != null) { params.push(`to=${to}`); }\n    if (groupBy != null) { params.push(`groupBy=${groupBy}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/activities`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Placement } from '../entities/Placement';\nimport { BookingStatusCode } from '../enums/BookingStatusCode';\n\n\n/**\n * Services for managing user placements (approved bookings)\n * @RequestHeader X-API-KEY The key to identify the application (portal)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class UserPlacementsService {\n\n  // URL to web api\n  private baseUrl = '/user/placements';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new placement\n   * @Return: EntityResponse<Placement>\n   */\n  create(body: Placement) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update placement\n   * @Return: EntityResponse<Placement>\n   */\n  update(body: Placement) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete placement\n   * @Return: ActionResponse\n   */\n  delete(id: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single placement by id\n   * @Return: EntityResponse<Placement>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find placements by filters\n   * @Return: QueryResponse<Placement>\n   */\n  find(userId: string, resourceId: string, bookingId: string, status: BookingStatusCode, sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (userId != null) { params.push(`userId=${userId}`); }\n    if (resourceId != null) { params.push(`resourceId=${resourceId}`); }\n    if (bookingId != null) { params.push(`bookingId=${bookingId}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n\n/**\n * List of account related actions \n */\n@Injectable()\nexport class UserAccountsService {\n\n  // URL to web api\n  private baseUrl = '/user/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search: string, type: AccountTypeCode[], status: AccountStatusCode[], sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get list of user memberships\n   * @Return: EntitiesResponse<Membership>\n   */\n  getMemberships() {\n    return this.rest.get(`${this.baseUrl}/memberships`);\n  }\n\n  /**\n   * Delete membership by id\n   * @Return: ActionResponse\n   */\n  deleteMemberships(id: string) {\n    return this.rest.delete(`${this.baseUrl}/memberships/${id}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { AccountRoleCode } from '../enums/AccountRoleCode';\nimport { MemberStatusCode } from '../enums/MemberStatusCode';\nimport { ResourceTypeMask } from '../enums/ResourceTypeMask';\nimport { Member } from '../entities/Member';\n\n\n/**\n * List of all user related actions for account administrator only \n */\n@Injectable()\nexport class UsrMembersService {\n\n  // URL to web api\n  private baseUrl = '/user/members';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Get single member by id (including user data)\n   * @Return: EntityResponse<MemberUser>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get my (logged-in user) member info (including user data)\n   * @Return: EntityResponse<MemberUser>\n   */\n  getMy() {\n    return this.rest.get(`${this.baseUrl}/my`);\n  }\n\n  /**\n   * Find list of users and filter the list\n   * System user will see all users, Account system will see all users of the account, registered user will get an error.\n   * @Return: QueryResponse<MemberUser>\n   */\n  find(search: string, role: AccountRoleCode[], status: MemberStatusCode[], sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (role != null) { params.push(`role=${role}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n  /**\n   * Find list of resources by filter\n   * @Return: EntitiesResponse<Resource>\n   */\n  findResources(accountId: string, search: string, include: ResourceTypeMask, exclude: ResourceTypeMask) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (include != null) { params.push(`include=${include}`); }\n    if (exclude != null) { params.push(`exclude=${exclude}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/resources`, ...params);\n  }\n\n  /**\n   * Update member\n   * @Return: EntityResponse<Member>\n   */\n  update(body: Member) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { LoginParams } from '../common/LoginParams';\nimport { ChangePasswordRequest } from '../messages/ChangePasswordRequest';\nimport { TokenRequest } from '../messages/TokenRequest';\nimport { User } from '../entities/User';\nimport { NotificationTypeCode } from '../enums/NotificationTypeCode';\n\n\n/**\n * Services for user registration and login \n */\n@Injectable()\nexport class UserService {\n\n  // URL to web api\n  private baseUrl = '/user/user';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Login to the system with user email and password\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: EntityResponse<LoginData>\n   */\n  login(body: LoginParams) {\n    return this.rest.post(`${this.baseUrl}/login`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<LoginData>\n   */\n  refreshToken() {\n    return this.rest.post(`${this.baseUrl}/refresh-token`, '');\n  }\n\n  /**\n   * Verify user by temporary login key\n   * @Return: EntityResponse<User>\n   */\n  verifyLoginKey(key: string) {\n    const params = new Array();\t\t\n    if (key != null) { params.push(`key=${key}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/login/verify`, ...params);\n  }\n\n  /**\n   * Send verification code by email\n   * @Return: ActionResponse\n   */\n  sendVerificationCode(body: string) {\n    return this.rest.post(`${this.baseUrl}/verify`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Validate verification code and reset password\n   * @Return: ActionResponse\n   */\n  resetPassword(code: string) {\n    return this.rest.post(`${this.baseUrl}/reset-password`, typeof code === 'object' ? JSON.stringify(code) : code);\n  }\n\n  /**\n   * Change password\n   * @Return: ActionResponse\n   */\n  changePassword(body: ChangePasswordRequest) {\n    return this.rest.post(`${this.baseUrl}/change-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Check if password was used before (according to password policy)\n   * @Return: ActionResponse\n   */\n  checkUnusedPassword(body: string) {\n    return this.rest.post(`${this.baseUrl}/check-password`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user name\n   * @Return: ActionResponse\n   */\n  changeName(body: string) {\n    return this.rest.put(`${this.baseUrl}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change current user mobile\n   * @Return: ActionResponse\n   */\n  changeMobile(body: string) {\n    return this.rest.put(`${this.baseUrl}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get all user accessible accounts for the user\n   * @Return: EntitiesResponse<Account>\n   */\n  getAccounts() {\n    return this.rest.get(`${this.baseUrl}/accounts`);\n  }\n\n  /**\n   * Refresh token (set new expiration time) and associate with new account if required\n   * @Return: EntityResponse<UserAccountInfo>\n   */\n  switchAccount(body: TokenRequest) {\n    return this.rest.post(`${this.baseUrl}/switch-account`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Switch to the next account\n   * @Return: EntityResponse<UserAccountInfo>\n   */\n  switchNext() {\n    return this.rest.post(`${this.baseUrl}/switch-next`, '');\n  }\n\n  /**\n   * Get user profile\n   * @Return: EntityResponse<User>\n   */\n  getProfile() {\n    return this.rest.get(`${this.baseUrl}/profile`);\n  }\n\n  /**\n   * Update user profile\n   * @Return: EntityResponse<User>\n   */\n  setProfile(body: User) {\n    return this.rest.put(`${this.baseUrl}/profile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Get app version\n   * @Return: ActionResponse\n   */\n  getVersion() {\n    return this.rest.get(`${this.baseUrl}/version`);\n  }\n\n  /**\n   * Find list of notifications by filter\n   * @Return: ActionResponse\n   */\n  findNotifications(search: string, type: NotificationTypeCode, sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}/notifications`, ...params);\n  }\n\n  /**\n   * Mark user notification as read\n   * @Return: ActionResponse\n   */\n  readNotification(id: string) {\n    return this.rest.put(`${this.baseUrl}/notifications/${id}`, '');\n  }\n\n  /**\n   * Delete notification\n   * @Return: ActionResponse\n   */\n  deleteNotification(id: string) {\n    return this.rest.delete(`${this.baseUrl}/notifications/${id}`);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { Account } from '../entities/Account';\nimport { AccountTypeCode } from '../enums/AccountTypeCode';\nimport { AccountStatusCode } from '../enums/AccountStatusCode';\n\n\n/**\n * List of account related actions for system administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysAccountsService {\n\n  // URL to web api\n  private baseUrl = '/sys/accounts';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create new account\n   * @Return: EntityResponse<Account>\n   */\n  create(body: Account) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update existing account in the system\n   * @Return: EntityResponse<Account>\n   */\n  update(body: Account) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Delete account from the system\n   * The account is moved to DELETED mode and will be deleted after 90 days\n   * Only account marked as SUSPENDED can be deleted\n   * @Return: ActionResponse\n   */\n  delete(id: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Delete account immediately without account status restrictions\n   * @Return: ActionResponse\n   */\n  purge(id: string) {\n    return this.rest.delete(`${this.baseUrl}/purge/${id}`);\n  }\n\n  /**\n   * Reset account - remove all operational data older than the retention time in days (events, status, log ...) but leave configuration data\n   * @Return: ActionResponse\n   */\n  reset(id: string, days: number) {\n    return this.rest.delete(`${this.baseUrl}/reset/${id}/days/${days}`);\n  }\n\n  /**\n   * Get single account by id\n   * @Return: EntityResponse<Account>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of accounts and filter\n   * @Return: QueryResponse<Account>\n   */\n  find(search: string, type: AccountTypeCode[], status: AccountStatusCode[], sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { RestUtil } from '../../utils/rest-util';\nimport { CoreConfig } from '../../config';\n\nimport { UserRegistration } from '../common/UserRegistration';\nimport { User } from '../entities/User';\nimport { UserTypeCode } from '../enums/UserTypeCode';\nimport { UserStatusCode } from '../enums/UserStatusCode';\n\n\n/**\n * List of all user related actions for account administrator only\n * @RequestHeader X-API-KEY The key to identify the application (console)\n * @RequestHeader X-ACCESS-TOKEN The token to identify the logged-in user \n */\n@Injectable()\nexport class SysUsersService {\n\n  // URL to web api\n  private baseUrl = '/sys/users';\n\n  /**\n   * Class constructor\n   */\n  constructor(@Inject('config') private config: CoreConfig, private rest: RestUtil) {\n    this.baseUrl = this.config.api + this.baseUrl;\n  }\n\n\n  /**\n   * Create a new user for the current account\n   * The response includes access token valid for 20 minutes. The client side should renew the token before expiration using refresh-token method\n   * @Return: ActionResponse\n   */\n  create(body: UserRegistration) {\n    return this.rest.post(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Update user\n   * @Return: EntityResponse<User>\n   */\n  update(id: string, body: User) {\n    return this.rest.put(`${this.baseUrl}`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user name\n   * @Return: EntityResponse<User>\n   */\n  changeName(id: string, body: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/name`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user mobile\n   * @Return: EntityResponse<User>\n   */\n  changeMobile(id: string, body: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/mobile`, typeof body === 'object' ? JSON.stringify(body) : body);\n  }\n\n  /**\n   * Change user type\n   * @Return: EntityResponse<User>\n   */\n  changeType(id: string, type: UserTypeCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/type/${type}`, '');\n  }\n\n  /**\n   * Change user status\n   * @Return: EntityResponse<User>\n   */\n  changeStatus(id: string, status: UserStatusCode) {\n    return this.rest.put(`${this.baseUrl}/${id}/status/${status}`, '');\n  }\n\n  /**\n   * Change user default account\n   * @Return: EntityResponse<User>\n   */\n  changeDefaultAccount(id: string, accountId: string) {\n    return this.rest.put(`${this.baseUrl}/${id}/defaultAccount/${accountId}`, '');\n  }\n\n  /**\n   * Reset password for user, generate one-time temporary password\n   * @Return: ActionResponse\n   */\n  resetPassword(id: string) {\n    return this.rest.post(`${this.baseUrl}/${id}/reset-password`, '');\n  }\n\n  /**\n   * Delete user from the system\n   * @Return: ActionResponse\n   */\n  delete(id: string) {\n    return this.rest.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Get single user by Id\n   * @Return: EntityResponse<User>\n   */\n  get(id: string) {\n    return this.rest.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Find list of users by filter\n   * @Return: QueryResponse<User>\n   */\n  find(accountId: string, search: string, type: UserTypeCode[], status: UserStatusCode[], sort: string, page: number, pageSize: number) {\n    const params = new Array();\t\t\n    if (accountId != null) { params.push(`accountId=${accountId}`); }\n    if (search != null) { params.push(`search=${search}`); }\n    if (type != null) { params.push(`type=${type}`); }\n    if (status != null) { params.push(`status=${status}`); }\n    if (sort != null) { params.push(`sort=${sort}`); }\n    if (page != null) { params.push(`page=${page}`); }\n    if (pageSize != null) { params.push(`pageSize=${pageSize}`); }\n\n\t\treturn this.rest.get(`${this.baseUrl}`, ...params);\n  }\n\n}\n","import { AdminActivitiesService } from './adminActivitiesService';\nimport { AdminPlaningService } from './adminPlaningService';\nimport { AdminReportsService } from './adminReportsService';\nimport { AdminResourcesService } from './adminResourcesService';\nimport { UsrActivitiesService } from './usrActivitiesService';\nimport { UserBookingsService } from './userBookingsService';\nimport { UserPlacementsService } from './userPlacementsService';\nimport { AdminMembersService } from './adminMembersService';\nimport { AdminNotificationsService } from './adminNotificationsService';\nimport { UserAccountsService } from './userAccountsService';\nimport { UsrMembersService } from './usrMembersService';\nimport { UserService } from './userService';\nimport { AdminAccountService } from './adminAccountService';\nimport { HealthCheckService } from './healthCheckService';\nimport { SysAccountsService } from './sysAccountsService';\nimport { SysUsersService } from './sysUsersService';\n\nexport const Services = [\n    AdminActivitiesService,\n    AdminPlaningService,\n    AdminReportsService,\n    AdminResourcesService,\n    UsrActivitiesService,\n    UserBookingsService,\n    UserPlacementsService,\n    AdminMembersService,\n    AdminNotificationsService,\n    UserAccountsService,\n    UsrMembersService,\n    UserService,\n    AdminAccountService,\n    HealthCheckService,\n    SysAccountsService,\n    SysUsersService,\n    \n]","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Services } from './lib/services/services.export';\nimport { RestUtil } from './utils/rest-util';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CoreConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule]\n})\nexport class CoreLibModule {\n  static forRoot(config: CoreConfig): ModuleWithProviders<CoreLibModule> {\n    return {\n      ngModule: CoreLibModule,\n      providers: [\n        { provide: 'config', useValue: config },\n        RestUtil,\n        ...Services\n      ]\n    };\n  }\n}\n","/* Public API Surface of ng-core-lib */\nexport * from './lib';\nexport * from './core-lib.module';\nexport * from './utils';\nexport * from './config';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["LocalStorageUtil.removeToken","LocalStorageUtil.setToken","i1.RestUtil"],"mappings":"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"}